window.storyFormat({"name":"Explorer","version":"1.0.0","author":"Steve Washington","image":"","url":"","license":"MIT","proofing":false,"source":"<!DOCTYPE html>\r\n<html>\r\n\t<head>\r\n\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\r\n\t\t<meta charset=\"utf-8\" />\r\n\t\t<link rel=\"shortcut icon\" href=\"#\" />\r\n\t\t<title>{{STORY_NAME}}</title>\r\n\t\t<style type=\"text/css\">:root{--background:#222;--text:#ddd;--textDark:#111;--accent1:gold;--accent1bright:#ffa900;--accent1dim:#c8a937;--disabled:#ccc;--accent1fade:#ffd70066;--textShadowDepth:1px}body,html{margin:0;padding:0}body{background-color:var(--background);color:var(--text);text-shadow:0 0 var(--textShadowDepth)currentColor;font-family:monospace;font-size:16px}a{color:var(--accent1bright);font-weight:700}a:visited{color:var(--accent1dim)}a:hover{color:var(--accent1bright)}#interface{max-width:1080px;grid-template-columns:repeat(12,1fr);justify-content:center;gap:4em;margin:0 auto;padding:4em;display:grid}@media screen and (max-width:950px){#interface{grid-template-columns:1fr;gap:1em}}.window{border:solid 1px var(--accent1);box-shadow:0 0 10px var(--accent1fade),0 0 10px inset var(--accent1fade);padding-top:0}.window#tw-story{grid-column:1/span 8}.window#tw-input{grid-column:9/span 4}@media screen and (max-width:950px){.window#tw-story,.window#tw-input{grid-column:1/span 1}}.window .titlebar{background-color:var(--accent1);color:var(--textDark);box-shadow:0 2px 11px var(--accent1fade);justify-content:space-between;padding:.3em .5em;display:flex}.window .titlebar:after{content:\"x\";height:100%}.window .content{min-height:300px;padding:1em}.window .content hr{width:50%;border-color:var(--accent1);box-shadow:0 0 7px var(--accent1fade);transform:scaleX(1.25)}.window .content#tw-passage{animation-duration:.75s;animation-fill-mode:both}.window .content#tw-passage.run-anim{animation-name:appear}.window .buttons{flex-wrap:wrap;grid-template-columns:repeat(3,1fr);justify-content:center;gap:1em;margin:1.5em auto;display:flex}.window .directionals{max-width:150px;grid-template-columns:repeat(3,1fr);justify-content:center;margin:1.5em auto;display:grid}.window .map{justify-content:center;margin:1.5em auto;display:flex}.window button{background-color:var(--background);color:var(--accent1);border:solid 1px var(--accent1);box-shadow:0 0 5px var(--accent1fade),0 0 5px inset var(--accent1fade);text-shadow:0 0 var(--textShadowDepth)currentColor;border-radius:.75em;padding:.5em 1.5em;font-family:monospace;font-size:1rem}.window button:hover:not(:disabled){background-color:var(--accent1);color:var(--textDark);cursor:pointer}.window button:disabled{border-color:var(--disabled);color:var(--disabled);opacity:.5;cursor:not-allowed}.window button[data-passage-name=empty]{opacity:0;pointer-events:none}.window button.north{grid-column-start:2}.window button.west{grid-row-start:2;grid-column-start:1}.window button.east{grid-row-start:2;grid-column-start:3}.window button.south{grid-row-start:3;grid-column-start:2}@keyframes appear{0%{opacity:0}to{opacity:1}}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\n</style>\r\n\t</head>\r\n\t<body>\r\n\t\t{{STORY_DATA}}\r\n\t\t<div id=\"interface\">\r\n\t\t\t<div id=\"tw-story\" class=\"window\">\r\n\t\t\t\t<div class=\"titlebar\">HyperTear MR</div>\r\n\t\t\t\t<div id=\"tw-passage\" class=\"content\"></div>\r\n\t\t\t</div>\r\n\t\t\t<div class=\"window\" id=\"tw-input\">\r\n\t\t\t\t<div class=\"titlebar\">Nav</div>\r\n\t\t\t\t<div class=\"content\">\r\n\t\t\t\t\t<div class=\"buttons\"></div>\r\n\t\t\t\t\t<hr />\r\n\t\t\t\t\t<div class=\"directionals\">\r\n\t\t\t\t\t\t<button class=\"north\" disabled>↑</button>\r\n\t\t\t\t\t\t<button class=\"west\" disabled>←</button>\r\n\t\t\t\t\t\t<button class=\"east\" disabled>→</button>\r\n\t\t\t\t\t\t<button class=\"south\" disabled>↓</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<hr />\r\n\t\t\t\t\t<div class=\"map\">\r\n\t\t\t\t\t\t<canvas id=\"map\"></canvas>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<script type=\"text/javascript\">\r\n\t\t\t(()=>{function $parcel$interopDefault(t){return t&&t.__esModule?t.default:t}function $parcel$export(t,e,i,r){Object.defineProperty(t,e,{get:i,set:r,enumerable:!0,configurable:!0})}var $parcel$global=\"undefined\"!=typeof globalThis?globalThis:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:{},$parcel$modules={},$parcel$inits={},parcelRequire=$parcel$global.parcelRequire7ce9;null==parcelRequire&&(parcelRequire=function(t){if(t in $parcel$modules)return $parcel$modules[t].exports;if(t in $parcel$inits){var e=$parcel$inits[t];delete $parcel$inits[t];var i={id:t,exports:{}};return $parcel$modules[t]=i,e.call(i.exports,i,i.exports),i.exports}var r=new Error(\"Cannot find module '\"+t+\"'\");throw r.code=\"MODULE_NOT_FOUND\",r},parcelRequire.register=function(t,e){$parcel$inits[t]=e},$parcel$global.parcelRequire7ce9=parcelRequire),parcelRequire.register(\"cI9Lu\",(function(module,exports){$parcel$export(module.exports,\"default\",(()=>$16daffe7c4bbb8c9$export$2e2bcd8739ae039));var $4uMJ0=parcelRequire(\"4uMJ0\"),$fiPkb=parcelRequire(\"fiPkb\"),$6F9ZT=parcelRequire(\"6F9ZT\"),$7PJQL=parcelRequire(\"7PJQL\"),$gzCul=parcelRequire(\"gzCul\");class HandlebarsRenderer{typeHelpers=[];constructor(story){this.story=story,$parcel$interopDefault($4uMJ0).registerHelper(\"set\",(t=>{Object.keys(t.hash).forEach((e=>{let i;try{i=JSON.parse(t.hash[e])}catch(r){i=t.hash[e]}this.story.state.set(e,i)}))})),$parcel$interopDefault($4uMJ0).registerHelper(\"script\",(options=>{const scriptContent=(0,$6F9ZT.unescape)(options.fn());(function(){try{eval(scriptContent)}catch(t){throw console.warn(`error evaluating ${scriptContent}`),t}}).call(this.getScriptContext())})),$parcel$interopDefault($4uMJ0).registerHelper(\"display_map\",(t=>{const e=t.hash.name,i=t.hash.highlight;let r=null;if(i){const[t,e]=i.split(\",\"),n=parseInt(t),s=parseInt(e);isNaN(n)||isNaN(s)||(r={x:n,y:s})}this.story.canvasMap.displayMap(e,r),this.story.state.set($fiPkb.MAP_DISPLAYED_STATEKEY,!0)})),$parcel$interopDefault($4uMJ0).registerHelper(\"type\",(t=>{const e=parseInt(t.hash.speed)||40,i=parseInt(t.hash.delay)||0,r=t.hash.next&&String(t.hash.next),n=t.hash.name&&String(t.hash.name),s=Boolean(t.hash.wait),o=t.fn(),a=new(0,$7PJQL.default)(o,e,i,n,s,(()=>{if(!r)return;const t=this.typeHelpers.find((t=>t.name===r));t&&t.start()}));return this.typeHelpers.push(a),a.output()})),$parcel$interopDefault($4uMJ0).registerHelper(\"audio\",(t=>{const e=t.hash.url||\"\",i=t.hash.name||\"\";if(!e)throw new Error(`Tried to load audio at ${e} but it doesn't seem valid.`);if(!i)throw new Error(\"Provided an {{#audio}} macro with no name. Name is required.\");this.audioHelper||(this.audioHelper=new(0,$gzCul.default)),this.audioHelper.add(e,i)})),$parcel$interopDefault($4uMJ0).registerHelper(\"playaudio\",(t=>{const e=t.hash.name||\"\",i=Boolean(t.hash.loop);if(!e)throw new Error(\"Provided a {{#playaudio}} macro with no name. Name is required.\");if(!this.audioHelper)throw new Error(\"AudioHelper not initialized, did you call {{#audio}} already?\");this.audioHelper.playAudio(e,i)}))}resetHelperState(){this.typeHelpers=[]}render(t){this.resetHelperState();return $parcel$interopDefault($4uMJ0).compile(t)(this.story.state.store)}getScriptContext(){return{story:this.story,get:t=>this.story.state.get(t),set:(t,e)=>this.story.state.set(t,e),passage:this.story.currentPassage}}}var $16daffe7c4bbb8c9$export$2e2bcd8739ae039=HandlebarsRenderer})),parcelRequire.register(\"4uMJ0\",(function(t,e){var i=parcelRequire(\"lu0FZ\").default,r=parcelRequire(\"3Zx46\");i.PrintVisitor=r.PrintVisitor,i.print=r.print,t.exports=i})),parcelRequire.register(\"lu0FZ\",(function(t,e){\"use strict\";function i(t){return t&&t.__esModule?t:{default:t}}t.exports.__esModule=!0;var r=i(parcelRequire(\"9vaU1\")),n=i(parcelRequire(\"bV3FD\")),s=parcelRequire(\"lsx56\"),o=parcelRequire(\"5XcjE\"),a=i(parcelRequire(\"1H8oB\")),l=i(parcelRequire(\"fzfDi\")),h=i(parcelRequire(\"8H0Q4\")),c=r.default.create;function u(){var t=c();return t.compile=function(e,i){return o.compile(e,i,t)},t.precompile=function(e,i){return o.precompile(e,i,t)},t.AST=n.default,t.Compiler=o.Compiler,t.JavaScriptCompiler=a.default,t.Parser=s.parser,t.parse=s.parse,t.parseWithoutProcessing=s.parseWithoutProcessing,t}var p=u();p.create=u,h.default(p),p.Visitor=l.default,p.default=p,t.exports.default=p,t.exports=t.exports.default})),parcelRequire.register(\"9vaU1\",(function(t,e){\"use strict\";function i(t){return t&&t.__esModule?t:{default:t}}function r(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}t.exports.__esModule=!0;var n=r(parcelRequire(\"a34Fz\")),s=i(parcelRequire(\"3pPPh\")),o=i(parcelRequire(\"9sXJd\")),a=r(parcelRequire(\"3zX1n\")),l=r(parcelRequire(\"9dydk\")),h=i(parcelRequire(\"8H0Q4\"));function c(){var t=new n.HandlebarsEnvironment;return a.extend(t,n),t.SafeString=s.default,t.Exception=o.default,t.Utils=a,t.escapeExpression=a.escapeExpression,t.VM=l,t.template=function(e){return l.template(e,t)},t}var u=c();u.create=c,h.default(u),u.default=u,t.exports.default=u,t.exports=t.exports.default})),parcelRequire.register(\"a34Fz\",(function(t,e){var i,r,n,s,o,a,l,h,c;function u(t){return t&&t.__esModule?t:{default:t}}$parcel$export(t.exports,\"__esModule\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"HandlebarsEnvironment\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"VERSION\",(()=>n),(t=>n=t)),$parcel$export(t.exports,\"COMPILER_REVISION\",(()=>s),(t=>s=t)),$parcel$export(t.exports,\"LAST_COMPATIBLE_COMPILER_REVISION\",(()=>o),(t=>o=t)),$parcel$export(t.exports,\"REVISION_CHANGES\",(()=>a),(t=>a=t)),$parcel$export(t.exports,\"log\",(()=>l),(t=>l=t)),$parcel$export(t.exports,\"createFrame\",(()=>h),(t=>h=t)),$parcel$export(t.exports,\"logger\",(()=>c),(t=>c=t)),i=!0,r=x;var p=parcelRequire(\"3zX1n\"),f=u(parcelRequire(\"9sXJd\")),d=parcelRequire(\"ipf9b\"),g=parcelRequire(\"lJTWT\"),m=u(parcelRequire(\"lJMiS\")),v=parcelRequire(\"9IVS5\");n=\"4.7.7\";s=8;o=7;a={1:\"<= 1.0.rc.2\",2:\"== 1.0.0-rc.3\",3:\"== 1.0.0-rc.4\",4:\"== 1.x.x\",5:\"== 2.0.0-alpha.x\",6:\">= 2.0.0-beta.1\",7:\">= 4.0.0 <4.3.0\",8:\">= 4.3.0\"};var y=\"[object Object]\";function x(t,e,i){this.helpers=t||{},this.partials=e||{},this.decorators=i||{},d.registerDefaultHelpers(this),g.registerDefaultDecorators(this)}x.prototype={constructor:x,logger:m.default,log:m.default.log,registerHelper:function(t,e){if(p.toString.call(t)===y){if(e)throw new f.default(\"Arg not supported with multiple helpers\");p.extend(this.helpers,t)}else this.helpers[t]=e},unregisterHelper:function(t){delete this.helpers[t]},registerPartial:function(t,e){if(p.toString.call(t)===y)p.extend(this.partials,t);else{if(void 0===e)throw new f.default('Attempting to register a partial called \"'+t+'\" as undefined');this.partials[t]=e}},unregisterPartial:function(t){delete this.partials[t]},registerDecorator:function(t,e){if(p.toString.call(t)===y){if(e)throw new f.default(\"Arg not supported with multiple decorators\");p.extend(this.decorators,t)}else this.decorators[t]=e},unregisterDecorator:function(t){delete this.decorators[t]},resetLoggedPropertyAccesses:function(){v.resetLoggedProperties()}};var _=m.default.log;l=_,h=p.createFrame,c=m.default})),parcelRequire.register(\"3zX1n\",(function(t,e){var i,r,n,s,o,a,l,h,c,u,p;$parcel$export(t.exports,\"__esModule\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"extend\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"indexOf\",(()=>n),(t=>n=t)),$parcel$export(t.exports,\"escapeExpression\",(()=>s),(t=>s=t)),$parcel$export(t.exports,\"isEmpty\",(()=>o),(t=>o=t)),$parcel$export(t.exports,\"createFrame\",(()=>a),(t=>a=t)),$parcel$export(t.exports,\"blockParams\",(()=>l),(t=>l=t)),$parcel$export(t.exports,\"appendContextPath\",(()=>h),(t=>h=t)),$parcel$export(t.exports,\"toString\",(()=>c),(t=>c=t)),$parcel$export(t.exports,\"isFunction\",(()=>u),(t=>u=t)),$parcel$export(t.exports,\"isArray\",(()=>p),(t=>p=t)),i=!0,r=v,n=function(t,e){for(var i=0,r=t.length;i<r;i++)if(t[i]===e)return i;return-1},s=function(t){if(\"string\"!=typeof t){if(t&&t.toHTML)return t.toHTML();if(null==t)return\"\";if(!t)return t+\"\";t=\"\"+t}return g.test(t)?t.replace(d,m):t},o=function(t){return!t&&0!==t||!(!_(t)||0!==t.length)},a=function(t){var e=v({},t);return e._parent=t,e},l=function(t,e){return t.path=e,t},h=function(t,e){return(t?t+\".\":\"\")+e};var f={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#x27;\",\"`\":\"&#x60;\",\"=\":\"&#x3D;\"},d=/[&<>\"'`=]/g,g=/[&<>\"'`=]/;function m(t){return f[t]}function v(t){for(var e=1;e<arguments.length;e++)for(var i in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],i)&&(t[i]=arguments[e][i]);return t}var y=Object.prototype.toString;c=y;var x=function(t){return\"function\"==typeof t};x(/x/)&&(u=x=function(t){return\"function\"==typeof t&&\"[object Function]\"===y.call(t)}),u=x;var _=Array.isArray||function(t){return!(!t||\"object\"!=typeof t)&&\"[object Array]\"===y.call(t)};p=_})),parcelRequire.register(\"9sXJd\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=[\"description\",\"fileName\",\"lineNumber\",\"endLineNumber\",\"message\",\"name\",\"number\",\"stack\"];function r(t,e){var n=e&&e.loc,s=void 0,o=void 0,a=void 0,l=void 0;n&&(s=n.start.line,o=n.end.line,a=n.start.column,l=n.end.column,t+=\" - \"+s+\":\"+a);for(var h=Error.prototype.constructor.call(this,t),c=0;c<i.length;c++)this[i[c]]=h[i[c]];Error.captureStackTrace&&Error.captureStackTrace(this,r);try{n&&(this.lineNumber=s,this.endLineNumber=o,Object.defineProperty?(Object.defineProperty(this,\"column\",{value:a,enumerable:!0}),Object.defineProperty(this,\"endColumn\",{value:l,enumerable:!0})):(this.column=a,this.endColumn=l))}catch(t){}}r.prototype=new Error,t.exports.default=r,t.exports=t.exports.default})),parcelRequire.register(\"ipf9b\",(function(t,e){var i,r;function n(t){return t&&t.__esModule?t:{default:t}}$parcel$export(t.exports,\"registerDefaultHelpers\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"moveHelperToHooks\",(()=>r),(t=>r=t)),i=function(t){s.default(t),o.default(t),a.default(t),l.default(t),h.default(t),c.default(t),u.default(t)},r=function(t,e,i){t.helpers[e]&&(t.hooks[e]=t.helpers[e],i||delete t.helpers[e])};var s=n(parcelRequire(\"21t7d\")),o=n(parcelRequire(\"dyWb5\")),a=n(parcelRequire(\"6I6gy\")),l=n(parcelRequire(\"3MzZc\")),h=n(parcelRequire(\"5a7QJ\")),c=n(parcelRequire(\"h1ehS\")),u=n(parcelRequire(\"kWC50\"))})),parcelRequire.register(\"21t7d\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=parcelRequire(\"3zX1n\");t.exports.default=function(t){t.registerHelper(\"blockHelperMissing\",(function(e,r){var n=r.inverse,s=r.fn;if(!0===e)return s(this);if(!1===e||null==e)return n(this);if(i.isArray(e))return e.length>0?(r.ids&&(r.ids=[r.name]),t.helpers.each(e,r)):n(this);if(r.data&&r.ids){var o=i.createFrame(r.data);o.contextPath=i.appendContextPath(r.data.contextPath,r.name),r={data:o}}return s(e,r)}))},t.exports=t.exports.default})),parcelRequire.register(\"dyWb5\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"3zX1n\"),n=parcelRequire(\"9sXJd\"),s=(i=n)&&i.__esModule?i:{default:i};t.exports.default=function(t){t.registerHelper(\"each\",(function(t,e){if(!e)throw new s.default(\"Must pass iterator to #each\");var i,n=e.fn,o=e.inverse,a=0,l=\"\",h=void 0,c=void 0;function u(e,i,s){h&&(h.key=e,h.index=i,h.first=0===i,h.last=!!s,c&&(h.contextPath=c+e)),l+=n(t[e],{data:h,blockParams:r.blockParams([t[e],e],[c+e,null])})}if(e.data&&e.ids&&(c=r.appendContextPath(e.data.contextPath,e.ids[0])+\".\"),r.isFunction(t)&&(t=t.call(this)),e.data&&(h=r.createFrame(e.data)),t&&\"object\"==typeof t)if(r.isArray(t))for(var p=t.length;a<p;a++)a in t&&u(a,a,a===t.length-1);else if($parcel$global.Symbol&&t[$parcel$global.Symbol.iterator]){for(var f=[],d=t[$parcel$global.Symbol.iterator](),g=d.next();!g.done;g=d.next())f.push(g.value);for(p=(t=f).length;a<p;a++)u(a,a,a===t.length-1)}else i=void 0,Object.keys(t).forEach((function(t){void 0!==i&&u(i,a-1),i=t,a++})),void 0!==i&&u(i,a-1,!0);return 0===a&&(l=o(this)),l}))},t.exports=t.exports.default})),parcelRequire.register(\"6I6gy\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"9sXJd\"),n=(i=r)&&i.__esModule?i:{default:i};t.exports.default=function(t){t.registerHelper(\"helperMissing\",(function(){if(1!==arguments.length)throw new n.default('Missing helper: \"'+arguments[arguments.length-1].name+'\"')}))},t.exports=t.exports.default})),parcelRequire.register(\"3MzZc\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"3zX1n\"),n=parcelRequire(\"9sXJd\"),s=(i=n)&&i.__esModule?i:{default:i};t.exports.default=function(t){t.registerHelper(\"if\",(function(t,e){if(2!=arguments.length)throw new s.default(\"#if requires exactly one argument\");return r.isFunction(t)&&(t=t.call(this)),!e.hash.includeZero&&!t||r.isEmpty(t)?e.inverse(this):e.fn(this)})),t.registerHelper(\"unless\",(function(e,i){if(2!=arguments.length)throw new s.default(\"#unless requires exactly one argument\");return t.helpers.if.call(this,e,{fn:i.inverse,inverse:i.fn,hash:i.hash})}))},t.exports=t.exports.default})),parcelRequire.register(\"5a7QJ\",(function(t,e){\"use strict\";t.exports.__esModule=!0,t.exports.default=function(t){t.registerHelper(\"log\",(function(){for(var e=[void 0],i=arguments[arguments.length-1],r=0;r<arguments.length-1;r++)e.push(arguments[r]);var n=1;null!=i.hash.level?n=i.hash.level:i.data&&null!=i.data.level&&(n=i.data.level),e[0]=n,t.log.apply(t,e)}))},t.exports=t.exports.default})),parcelRequire.register(\"h1ehS\",(function(t,e){\"use strict\";t.exports.__esModule=!0,t.exports.default=function(t){t.registerHelper(\"lookup\",(function(t,e,i){return t?i.lookupProperty(t,e):t}))},t.exports=t.exports.default})),parcelRequire.register(\"kWC50\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"3zX1n\"),n=parcelRequire(\"9sXJd\"),s=(i=n)&&i.__esModule?i:{default:i};t.exports.default=function(t){t.registerHelper(\"with\",(function(t,e){if(2!=arguments.length)throw new s.default(\"#with requires exactly one argument\");r.isFunction(t)&&(t=t.call(this));var i=e.fn;if(r.isEmpty(t))return e.inverse(this);var n=e.data;return e.data&&e.ids&&((n=r.createFrame(e.data)).contextPath=r.appendContextPath(e.data.contextPath,e.ids[0])),i(t,{data:n,blockParams:r.blockParams([t],[n&&n.contextPath])})}))},t.exports=t.exports.default})),parcelRequire.register(\"lJTWT\",(function(t,e){var i;$parcel$export(t.exports,\"registerDefaultDecorators\",(()=>i),(t=>i=t)),i=function(t){s.default(t)};var r,n=parcelRequire(\"a6LkM\"),s=(r=n)&&r.__esModule?r:{default:r}})),parcelRequire.register(\"a6LkM\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=parcelRequire(\"3zX1n\");t.exports.default=function(t){t.registerDecorator(\"inline\",(function(t,e,r,n){var s=t;return e.partials||(e.partials={},s=function(n,s){var o=r.partials;r.partials=i.extend({},o,e.partials);var a=t(n,s);return r.partials=o,a}),e.partials[n.args[0]]=n.fn,s}))},t.exports=t.exports.default})),parcelRequire.register(\"lJMiS\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=parcelRequire(\"3zX1n\"),r={methodMap:[\"debug\",\"info\",\"warn\",\"error\"],level:\"info\",lookupLevel:function(t){if(\"string\"==typeof t){var e=i.indexOf(r.methodMap,t.toLowerCase());t=e>=0?e:parseInt(t,10)}return t},log:function(t){if(t=r.lookupLevel(t),\"undefined\"!=typeof console&&r.lookupLevel(r.level)<=t){var e=r.methodMap[t];console[e]||(e=\"log\");for(var i=arguments.length,n=Array(i>1?i-1:0),s=1;s<i;s++)n[s-1]=arguments[s];console[e].apply(console,n)}}};t.exports.default=r,t.exports=t.exports.default})),parcelRequire.register(\"9IVS5\",(function(t,e){var i,r,n;$parcel$export(t.exports,\"createProtoAccessControl\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"resultIsAllowed\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"resetLoggedProperties\",(()=>n),(t=>n=t)),i=function(t){var e=Object.create(null);e.constructor=!1,e.__defineGetter__=!1,e.__defineSetter__=!1,e.__lookupGetter__=!1;var i=Object.create(null);return i.__proto__=!1,{properties:{whitelist:s.createNewLookupObject(i,t.allowedProtoProperties),defaultValue:t.allowProtoPropertiesByDefault},methods:{whitelist:s.createNewLookupObject(e,t.allowedProtoMethods),defaultValue:t.allowProtoMethodsByDefault}}},r=function(t,e,i){return l(\"function\"==typeof t?e.methods:e.properties,i)},n=function(){Object.keys(a).forEach((function(t){delete a[t]}))};var s=parcelRequire(\"5KDvu\"),o=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}(parcelRequire(\"lJMiS\")),a=Object.create(null);function l(t,e){return void 0!==t.whitelist[e]?!0===t.whitelist[e]:void 0!==t.defaultValue?t.defaultValue:(function(t){!0!==a[t]&&(a[t]=!0,o.log(\"error\",'Handlebars: Access has been denied to resolve the property \"'+t+'\" because it is not an \"own property\" of its parent.\\nYou can add a runtime option to disable the check or this warning:\\nSee https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details'))}(e),!1)}})),parcelRequire.register(\"5KDvu\",(function(t,e){var i;$parcel$export(t.exports,\"createNewLookupObject\",(()=>i),(t=>i=t)),i=function(){for(var t=arguments.length,e=Array(t),i=0;i<t;i++)e[i]=arguments[i];return r.extend.apply(void 0,[Object.create(null)].concat(e))};var r=parcelRequire(\"3zX1n\")})),parcelRequire.register(\"3pPPh\",(function(t,e){\"use strict\";function i(t){this.string=t}t.exports.__esModule=!0,i.prototype.toString=i.prototype.toHTML=function(){return\"\"+this.string},t.exports.default=i,t.exports=t.exports.default})),parcelRequire.register(\"9dydk\",(function(t,e){var i,r,n,s,o,a,l;$parcel$export(t.exports,\"__esModule\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"checkRevision\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"template\",(()=>n),(t=>n=t)),$parcel$export(t.exports,\"wrapProgram\",(()=>s),(t=>s=t)),$parcel$export(t.exports,\"resolvePartial\",(()=>o),(t=>o=t)),$parcel$export(t.exports,\"invokePartial\",(()=>a),(t=>a=t)),$parcel$export(t.exports,\"noop\",(()=>l),(t=>l=t)),i=!0,r=function(t){var e=t&&t[0]||1,i=f.COMPILER_REVISION;if(e>=f.LAST_COMPATIBLE_COMPILER_REVISION&&e<=f.COMPILER_REVISION)return;if(e<f.LAST_COMPATIBLE_COMPILER_REVISION){var r=f.REVISION_CHANGES[i],n=f.REVISION_CHANGES[e];throw new p.default(\"Template was precompiled with an older version of Handlebars than the current runtime. Please update your precompiler to a newer version (\"+r+\") or downgrade your runtime to an older version (\"+n+\").\")}throw new p.default(\"Template was precompiled with a newer version of Handlebars than the current runtime. Please update your runtime to a newer version (\"+t[1]+\").\")},n=function(t,e){if(!e)throw new p.default(\"No environment passed to template\");if(!t||!t.main)throw new p.default(\"Unknown template object: \"+typeof t);t.main.decorator=t.main_d,e.VM.checkRevision(t.compiler);var i=t.compiler&&7===t.compiler[0];var r={strict:function(t,e,i){if(!t||!(e in t))throw new p.default('\"'+e+'\" not defined in '+t,{loc:i});return r.lookupProperty(t,e)},lookupProperty:function(t,e){var i=t[e];return null==i||Object.prototype.hasOwnProperty.call(t,e)||m.resultIsAllowed(i,r.protoAccessControl,e)?i:void 0},lookup:function(t,e){for(var i=t.length,n=0;n<i;n++){if(null!=(t[n]&&r.lookupProperty(t[n],e)))return t[n][e]}},lambda:function(t,e){return\"function\"==typeof t?t.call(e):t},escapeExpression:c.escapeExpression,invokePartial:function(i,r,n){n.hash&&(r=c.extend({},r,n.hash),n.ids&&(n.ids[0]=!0)),i=e.VM.resolvePartial.call(this,i,r,n);var s=c.extend({},n,{hooks:this.hooks,protoAccessControl:this.protoAccessControl}),o=e.VM.invokePartial.call(this,i,r,s);if(null==o&&e.compile&&(n.partials[n.name]=e.compile(i,t.compilerOptions,e),o=n.partials[n.name](r,s)),null!=o){if(n.indent){for(var a=o.split(\"\\n\"),l=0,h=a.length;l<h&&(a[l]||l+1!==h);l++)a[l]=n.indent+a[l];o=a.join(\"\\n\")}return o}throw new p.default(\"The partial \"+n.name+\" could not be compiled when running in runtime-only mode\")},fn:function(e){var i=t[e];return i.decorator=t[e+\"_d\"],i},programs:[],program:function(t,e,i,r,n){var s=this.programs[t],o=this.fn(t);return e||n||r||i?s=v(this,t,o,e,i,r,n):s||(s=this.programs[t]=v(this,t,o)),s},data:function(t,e){for(;t&&e--;)t=t._parent;return t},mergeIfNeeded:function(t,e){var i=t||e;return t&&e&&t!==e&&(i=c.extend({},e,t)),i},nullContext:Object.seal({}),noop:e.VM.noop,compilerInfo:t.compiler};function n(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],s=i.data;n._setup(i),!i.partial&&t.useData&&(s=x(e,s));var o=void 0,a=t.useBlockParams?[]:void 0;function l(e){return\"\"+t.main(r,e,r.helpers,r.partials,s,a,o)}return t.useDepths&&(o=i.depths?e!=i.depths[0]?[e].concat(i.depths):i.depths:[e]),(l=_(t.main,l,r,i.depths||[],s,a))(e,i)}return n.isTop=!0,n._setup=function(n){if(n.partial)r.protoAccessControl=n.protoAccessControl,r.helpers=n.helpers,r.partials=n.partials,r.decorators=n.decorators,r.hooks=n.hooks;else{var s=c.extend({},e.helpers,n.helpers);!function(t,e){Object.keys(t).forEach((function(i){var r=t[i];t[i]=function(t,e){var i=e.lookupProperty;return g.wrapHelper(t,(function(t){return c.extend({lookupProperty:i},t)}))}(r,e)}))}(s,r),r.helpers=s,t.usePartial&&(r.partials=r.mergeIfNeeded(n.partials,e.partials)),(t.usePartial||t.useDecorators)&&(r.decorators=c.extend({},e.decorators,n.decorators)),r.hooks={},r.protoAccessControl=m.createProtoAccessControl(n);var o=n.allowCallsToHelperMissing||i;d.moveHelperToHooks(r,\"helperMissing\",o),d.moveHelperToHooks(r,\"blockHelperMissing\",o)}},n._child=function(e,i,n,s){if(t.useBlockParams&&!n)throw new p.default(\"must pass block params\");if(t.useDepths&&!s)throw new p.default(\"must pass parent depths\");return v(r,e,t[e],i,0,n,s)},n},s=v,o=function(t,e,i){t?t.call||i.name||(i.name=t,t=i.partials[t]):t=\"@partial-block\"===i.name?i.data[\"partial-block\"]:i.partials[i.name];return t},a=function(t,e,i){var r=i.data&&i.data[\"partial-block\"];i.partial=!0,i.ids&&(i.data.contextPath=i.ids[0]||i.data.contextPath);var n=void 0;i.fn&&i.fn!==y&&function(){i.data=f.createFrame(i.data);var t=i.fn;n=i.data[\"partial-block\"]=function(e){var i=arguments.length<=1||void 0===arguments[1]?{}:arguments[1];return i.data=f.createFrame(i.data),i.data[\"partial-block\"]=r,t(e,i)},t.partials&&(i.partials=c.extend({},i.partials,t.partials))}();void 0===t&&n&&(t=n);if(void 0===t)throw new p.default(\"The partial \"+i.name+\" could not be found\");if(t instanceof Function)return t(e,i)},l=y;var h,c=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}(parcelRequire(\"3zX1n\")),u=parcelRequire(\"9sXJd\"),p=(h=u)&&h.__esModule?h:{default:h},f=parcelRequire(\"a34Fz\"),d=parcelRequire(\"ipf9b\"),g=parcelRequire(\"6Q5xX\"),m=parcelRequire(\"9IVS5\");function v(t,e,i,r,n,s,o){function a(e){var n=arguments.length<=1||void 0===arguments[1]?{}:arguments[1],a=o;return!o||e==o[0]||e===t.nullContext&&null===o[0]||(a=[e].concat(o)),i(t,e,t.helpers,t.partials,n.data||r,s&&[n.blockParams].concat(s),a)}return(a=_(i,a,t,o,r,s)).program=e,a.depth=o?o.length:0,a.blockParams=n||0,a}function y(){return\"\"}function x(t,e){return e&&\"root\"in e||((e=e?f.createFrame(e):{}).root=t),e}function _(t,e,i,r,n,s){if(t.decorator){var o={};e=t.decorator(e,o,i,r&&r[0],n,s,r),c.extend(e,o)}return e}})),parcelRequire.register(\"6Q5xX\",(function(t,e){var i;$parcel$export(t.exports,\"wrapHelper\",(()=>i),(t=>i=t)),i=function(t,e){if(\"function\"!=typeof t)return t;return function(){return arguments[arguments.length-1]=e(arguments[arguments.length-1]),t.apply(this,arguments)}}})),parcelRequire.register(\"8H0Q4\",(function(t,e){\"use strict\";t.exports.__esModule=!0,t.exports.default=function(t){var e=void 0!==$parcel$global?$parcel$global:window,i=e.Handlebars;t.noConflict=function(){return e.Handlebars===t&&(e.Handlebars=i),t}},t.exports=t.exports.default})),parcelRequire.register(\"bV3FD\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i={helpers:{helperExpression:function(t){return\"SubExpression\"===t.type||(\"MustacheStatement\"===t.type||\"BlockStatement\"===t.type)&&!!(t.params&&t.params.length||t.hash)},scopedId:function(t){return/^\\.|this\\b/.test(t.original)},simpleId:function(t){return 1===t.parts.length&&!i.helpers.scopedId(t)&&!t.depth}}};t.exports.default=i,t.exports=t.exports.default})),parcelRequire.register(\"lsx56\",(function(t,e){var i,r,n;function s(t){return t&&t.__esModule?t:{default:t}}$parcel$export(t.exports,\"parseWithoutProcessing\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"parse\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"parser\",(()=>n),(t=>n=t)),i=u,r=function(t,e){var i=u(t,e);return new a.default(e).accept(i)};var o=s(parcelRequire(\"3heBP\")),a=s(parcelRequire(\"asr8x\")),l=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e.default=t,e}(parcelRequire(\"aYREd\")),h=parcelRequire(\"3zX1n\");n=o.default;var c={};function u(t,e){return\"Program\"===t.type?t:(o.default.yy=c,c.locInfo=function(t){return new c.SourceLocation(e&&e.srcName,t)},o.default.parse(t))}h.extend(c,l)})),parcelRequire.register(\"3heBP\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=function(){var t={trace:function(){},yy:{},symbols_:{error:2,root:3,program:4,EOF:5,program_repetition0:6,statement:7,mustache:8,block:9,rawBlock:10,partial:11,partialBlock:12,content:13,COMMENT:14,CONTENT:15,openRawBlock:16,rawBlock_repetition0:17,END_RAW_BLOCK:18,OPEN_RAW_BLOCK:19,helperName:20,openRawBlock_repetition0:21,openRawBlock_option0:22,CLOSE_RAW_BLOCK:23,openBlock:24,block_option0:25,closeBlock:26,openInverse:27,block_option1:28,OPEN_BLOCK:29,openBlock_repetition0:30,openBlock_option0:31,openBlock_option1:32,CLOSE:33,OPEN_INVERSE:34,openInverse_repetition0:35,openInverse_option0:36,openInverse_option1:37,openInverseChain:38,OPEN_INVERSE_CHAIN:39,openInverseChain_repetition0:40,openInverseChain_option0:41,openInverseChain_option1:42,inverseAndProgram:43,INVERSE:44,inverseChain:45,inverseChain_option0:46,OPEN_ENDBLOCK:47,OPEN:48,mustache_repetition0:49,mustache_option0:50,OPEN_UNESCAPED:51,mustache_repetition1:52,mustache_option1:53,CLOSE_UNESCAPED:54,OPEN_PARTIAL:55,partialName:56,partial_repetition0:57,partial_option0:58,openPartialBlock:59,OPEN_PARTIAL_BLOCK:60,openPartialBlock_repetition0:61,openPartialBlock_option0:62,param:63,sexpr:64,OPEN_SEXPR:65,sexpr_repetition0:66,sexpr_option0:67,CLOSE_SEXPR:68,hash:69,hash_repetition_plus0:70,hashSegment:71,ID:72,EQUALS:73,blockParams:74,OPEN_BLOCK_PARAMS:75,blockParams_repetition_plus0:76,CLOSE_BLOCK_PARAMS:77,path:78,dataName:79,STRING:80,NUMBER:81,BOOLEAN:82,UNDEFINED:83,NULL:84,DATA:85,pathSegments:86,SEP:87,$accept:0,$end:1},terminals_:{2:\"error\",5:\"EOF\",14:\"COMMENT\",15:\"CONTENT\",18:\"END_RAW_BLOCK\",19:\"OPEN_RAW_BLOCK\",23:\"CLOSE_RAW_BLOCK\",29:\"OPEN_BLOCK\",33:\"CLOSE\",34:\"OPEN_INVERSE\",39:\"OPEN_INVERSE_CHAIN\",44:\"INVERSE\",47:\"OPEN_ENDBLOCK\",48:\"OPEN\",51:\"OPEN_UNESCAPED\",54:\"CLOSE_UNESCAPED\",55:\"OPEN_PARTIAL\",60:\"OPEN_PARTIAL_BLOCK\",65:\"OPEN_SEXPR\",68:\"CLOSE_SEXPR\",72:\"ID\",73:\"EQUALS\",75:\"OPEN_BLOCK_PARAMS\",77:\"CLOSE_BLOCK_PARAMS\",80:\"STRING\",81:\"NUMBER\",82:\"BOOLEAN\",83:\"UNDEFINED\",84:\"NULL\",85:\"DATA\",87:\"SEP\"},productions_:[0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,0],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],performAction:function(t,e,i,r,n,s,o){var a=s.length-1;switch(n){case 1:return s[a-1];case 2:this.$=r.prepareProgram(s[a]);break;case 3:case 4:case 5:case 6:case 7:case 8:case 20:case 27:case 28:case 33:case 34:case 40:case 41:this.$=s[a];break;case 9:this.$={type:\"CommentStatement\",value:r.stripComment(s[a]),strip:r.stripFlags(s[a],s[a]),loc:r.locInfo(this._$)};break;case 10:this.$={type:\"ContentStatement\",original:s[a],value:s[a],loc:r.locInfo(this._$)};break;case 11:this.$=r.prepareRawBlock(s[a-2],s[a-1],s[a],this._$);break;case 12:this.$={path:s[a-3],params:s[a-2],hash:s[a-1]};break;case 13:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!1,this._$);break;case 14:this.$=r.prepareBlock(s[a-3],s[a-2],s[a-1],s[a],!0,this._$);break;case 15:this.$={open:s[a-5],path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 16:case 17:this.$={path:s[a-4],params:s[a-3],hash:s[a-2],blockParams:s[a-1],strip:r.stripFlags(s[a-5],s[a])};break;case 18:this.$={strip:r.stripFlags(s[a-1],s[a-1]),program:s[a]};break;case 19:var l=r.prepareBlock(s[a-2],s[a-1],s[a],s[a],!1,this._$),h=r.prepareProgram([l],s[a-1].loc);h.chained=!0,this.$={strip:s[a-2].strip,program:h,chain:!0};break;case 21:this.$={path:s[a-1],strip:r.stripFlags(s[a-2],s[a])};break;case 22:case 23:this.$=r.prepareMustache(s[a-3],s[a-2],s[a-1],s[a-4],r.stripFlags(s[a-4],s[a]),this._$);break;case 24:this.$={type:\"PartialStatement\",name:s[a-3],params:s[a-2],hash:s[a-1],indent:\"\",strip:r.stripFlags(s[a-4],s[a]),loc:r.locInfo(this._$)};break;case 25:this.$=r.preparePartialBlock(s[a-2],s[a-1],s[a],this._$);break;case 26:this.$={path:s[a-3],params:s[a-2],hash:s[a-1],strip:r.stripFlags(s[a-4],s[a])};break;case 29:this.$={type:\"SubExpression\",path:s[a-3],params:s[a-2],hash:s[a-1],loc:r.locInfo(this._$)};break;case 30:this.$={type:\"Hash\",pairs:s[a],loc:r.locInfo(this._$)};break;case 31:this.$={type:\"HashPair\",key:r.id(s[a-2]),value:s[a],loc:r.locInfo(this._$)};break;case 32:this.$=r.id(s[a-1]);break;case 35:this.$={type:\"StringLiteral\",value:s[a],original:s[a],loc:r.locInfo(this._$)};break;case 36:this.$={type:\"NumberLiteral\",value:Number(s[a]),original:Number(s[a]),loc:r.locInfo(this._$)};break;case 37:this.$={type:\"BooleanLiteral\",value:\"true\"===s[a],original:\"true\"===s[a],loc:r.locInfo(this._$)};break;case 38:this.$={type:\"UndefinedLiteral\",original:void 0,value:void 0,loc:r.locInfo(this._$)};break;case 39:this.$={type:\"NullLiteral\",original:null,value:null,loc:r.locInfo(this._$)};break;case 42:this.$=r.preparePath(!0,s[a],this._$);break;case 43:this.$=r.preparePath(!1,s[a],this._$);break;case 44:s[a-2].push({part:r.id(s[a]),original:s[a],separator:s[a-1]}),this.$=s[a-2];break;case 45:this.$=[{part:r.id(s[a]),original:s[a]}];break;case 46:case 48:case 50:case 58:case 64:case 70:case 78:case 82:case 86:case 90:case 94:this.$=[];break;case 47:case 49:case 51:case 59:case 65:case 71:case 79:case 83:case 87:case 91:case 95:case 99:case 101:s[a-1].push(s[a]);break;case 98:case 100:this.$=[s[a]]}},table:[{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{15:[2,48],17:39,18:[2,48]},{20:41,56:40,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:44,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:45,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:41,56:48,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:49,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,50]},{72:[1,35],86:51},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:52,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:53,38:55,39:[1,57],43:56,44:[1,58],45:54,47:[2,54]},{28:59,43:60,44:[1,58],47:[2,56]},{13:62,15:[1,20],18:[1,61]},{33:[2,86],57:63,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:64,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:65,47:[1,66]},{30:67,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:68,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:69,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:70,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:74,33:[2,80],50:71,63:72,64:75,65:[1,43],69:73,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,79]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,50]},{20:74,53:80,54:[2,84],63:81,64:75,65:[1,43],69:82,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:83,47:[1,66]},{47:[2,55]},{4:84,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:85,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:86,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:87,47:[1,66]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:74,33:[2,88],58:88,63:89,64:75,65:[1,43],69:90,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:91,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:92,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,31:93,33:[2,60],63:94,64:75,65:[1,43],69:95,70:76,71:77,72:[1,78],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,66],36:96,63:97,64:75,65:[1,43],69:98,70:76,71:77,72:[1,78],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,22:99,23:[2,52],63:100,64:75,65:[1,43],69:101,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,92],62:102,63:103,64:75,65:[1,43],69:104,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,105]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:106,72:[1,107],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,108],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,109]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:55,39:[1,57],43:56,44:[1,58],45:111,46:110,47:[2,76]},{33:[2,70],40:112,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,113]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:74,63:115,64:75,65:[1,43],67:114,68:[2,96],69:116,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,117]},{32:118,33:[2,62],74:119,75:[1,120]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:121,74:122,75:[1,120]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,123]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,124]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,108]},{20:74,63:125,64:75,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:74,33:[2,72],41:126,63:127,64:75,65:[1,43],69:128,70:76,71:77,72:[1,78],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,129]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,130]},{33:[2,63]},{72:[1,132],76:131},{33:[1,133]},{33:[2,69]},{15:[2,12],18:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:134,74:135,75:[1,120]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,137],77:[1,136]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,138]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],defaultActions:{4:[2,1],54:[2,55],56:[2,20],60:[2,57],73:[2,81],82:[2,85],86:[2,18],90:[2,89],101:[2,53],104:[2,93],110:[2,19],111:[2,77],116:[2,97],119:[2,63],122:[2,69],135:[2,75],136:[2,32]},parseError:function(t,e){throw new Error(t)},parse:function(t){var e=this,i=[0],r=[null],n=[],s=this.table,o=\"\",a=0,l=0,h=0;this.lexer.setInput(t),this.lexer.yy=this.yy,this.yy.lexer=this.lexer,this.yy.parser=this,void 0===this.lexer.yylloc&&(this.lexer.yylloc={});var c=this.lexer.yylloc;n.push(c);var u=this.lexer.options&&this.lexer.options.ranges;\"function\"==typeof this.yy.parseError&&(this.parseError=this.yy.parseError);for(var p,f,d,g,m,v,y,x,_,b,C={};;){if(d=i[i.length-1],this.defaultActions[d]?g=this.defaultActions[d]:(null==p&&(b=void 0,\"number\"!=typeof(b=e.lexer.lex()||1)&&(b=e.symbols_[b]||b),p=b),g=s[d]&&s[d][p]),void 0===g||!g.length||!g[0]){var S=\"\";if(!h){for(v in _=[],s[d])this.terminals_[v]&&v>2&&_.push(\"'\"+this.terminals_[v]+\"'\");S=this.lexer.showPosition?\"Parse error on line \"+(a+1)+\":\\n\"+this.lexer.showPosition()+\"\\nExpecting \"+_.join(\", \")+\", got '\"+(this.terminals_[p]||p)+\"'\":\"Parse error on line \"+(a+1)+\": Unexpected \"+(1==p?\"end of input\":\"'\"+(this.terminals_[p]||p)+\"'\"),this.parseError(S,{text:this.lexer.match,token:this.terminals_[p]||p,line:this.lexer.yylineno,loc:c,expected:_})}}if(g[0]instanceof Array&&g.length>1)throw new Error(\"Parse Error: multiple actions possible at state: \"+d+\", token: \"+p);switch(g[0]){case 1:i.push(p),r.push(this.lexer.yytext),n.push(this.lexer.yylloc),i.push(g[1]),p=null,f?(p=f,f=null):(l=this.lexer.yyleng,o=this.lexer.yytext,a=this.lexer.yylineno,c=this.lexer.yylloc,h>0&&h--);break;case 2:if(y=this.productions_[g[1]][1],C.$=r[r.length-y],C._$={first_line:n[n.length-(y||1)].first_line,last_line:n[n.length-1].last_line,first_column:n[n.length-(y||1)].first_column,last_column:n[n.length-1].last_column},u&&(C._$.range=[n[n.length-(y||1)].range[0],n[n.length-1].range[1]]),void 0!==(m=this.performAction.call(C,o,l,a,this.yy,g[1],r,n)))return m;y&&(i=i.slice(0,-1*y*2),r=r.slice(0,-1*y),n=n.slice(0,-1*y)),i.push(this.productions_[g[1]][0]),r.push(C.$),n.push(C._$),x=s[i[i.length-2]][i[i.length-1]],i.push(x);break;case 3:return!0}}return!0}},e=function(){var t={EOF:1,parseError:function(t,e){if(!this.yy.parser)throw new Error(t);this.yy.parser.parseError(t,e)},setInput:function(t){return this._input=t,this._more=this._less=this.done=!1,this.yylineno=this.yyleng=0,this.yytext=this.matched=this.match=\"\",this.conditionStack=[\"INITIAL\"],this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0},this.options.ranges&&(this.yylloc.range=[0,0]),this.offset=0,this},input:function(){var t=this._input[0];return this.yytext+=t,this.yyleng++,this.offset++,this.match+=t,this.matched+=t,t.match(/(?:\\r\\n?|\\n).*/g)?(this.yylineno++,this.yylloc.last_line++):this.yylloc.last_column++,this.options.ranges&&this.yylloc.range[1]++,this._input=this._input.slice(1),t},unput:function(t){var e=t.length,i=t.split(/(?:\\r\\n?|\\n)/g);this._input=t+this._input,this.yytext=this.yytext.substr(0,this.yytext.length-e-1),this.offset-=e;var r=this.match.split(/(?:\\r\\n?|\\n)/g);this.match=this.match.substr(0,this.match.length-1),this.matched=this.matched.substr(0,this.matched.length-1),i.length-1&&(this.yylineno-=i.length-1);var n=this.yylloc.range;return this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:i?(i.length===r.length?this.yylloc.first_column:0)+r[r.length-i.length].length-i[0].length:this.yylloc.first_column-e},this.options.ranges&&(this.yylloc.range=[n[0],n[0]+this.yyleng-e]),this},more:function(){return this._more=!0,this},less:function(t){this.unput(this.match.slice(t))},pastInput:function(){var t=this.matched.substr(0,this.matched.length-this.match.length);return(t.length>20?\"...\":\"\")+t.substr(-20).replace(/\\n/g,\"\")},upcomingInput:function(){var t=this.match;return t.length<20&&(t+=this._input.substr(0,20-t.length)),(t.substr(0,20)+(t.length>20?\"...\":\"\")).replace(/\\n/g,\"\")},showPosition:function(){var t=this.pastInput(),e=new Array(t.length+1).join(\"-\");return t+this.upcomingInput()+\"\\n\"+e+\"^\"},next:function(){if(this.done)return this.EOF;var t,e,i,r,n;this._input||(this.done=!0),this._more||(this.yytext=\"\",this.match=\"\");for(var s=this._currentRules(),o=0;o<s.length&&(!(i=this._input.match(this.rules[s[o]]))||e&&!(i[0].length>e[0].length)||(e=i,r=o,this.options.flex));o++);return e?((n=e[0].match(/(?:\\r\\n?|\\n).*/g))&&(this.yylineno+=n.length),this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:n?n[n.length-1].length-n[n.length-1].match(/\\r?\\n?/)[0].length:this.yylloc.last_column+e[0].length},this.yytext+=e[0],this.match+=e[0],this.matches=e,this.yyleng=this.yytext.length,this.options.ranges&&(this.yylloc.range=[this.offset,this.offset+=this.yyleng]),this._more=!1,this._input=this._input.slice(e[0].length),this.matched+=e[0],t=this.performAction.call(this,this.yy,this,s[r],this.conditionStack[this.conditionStack.length-1]),this.done&&this._input&&(this.done=!1),t||void 0):\"\"===this._input?this.EOF:this.parseError(\"Lexical error on line \"+(this.yylineno+1)+\". Unrecognized text.\\n\"+this.showPosition(),{text:\"\",token:null,line:this.yylineno})},lex:function(){var t=this.next();return void 0!==t?t:this.lex()},begin:function(t){this.conditionStack.push(t)},popState:function(){return this.conditionStack.pop()},_currentRules:function(){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules},topState:function(){return this.conditionStack[this.conditionStack.length-2]},pushState:function(t){this.begin(t)},options:{},performAction:function(t,e,i,r){function n(t,i){return e.yytext=e.yytext.substring(t,e.yyleng-i+t)}switch(i){case 0:if(\"\\\\\\\\\"===e.yytext.slice(-2)?(n(0,1),this.begin(\"mu\")):\"\\\\\"===e.yytext.slice(-1)?(n(0,1),this.begin(\"emu\")):this.begin(\"mu\"),e.yytext)return 15;break;case 1:case 5:return 15;case 2:return this.popState(),15;case 3:return this.begin(\"raw\"),15;case 4:return this.popState(),\"raw\"===this.conditionStack[this.conditionStack.length-1]?15:(n(5,9),\"END_RAW_BLOCK\");case 6:case 22:return this.popState(),14;case 7:return 65;case 8:return 68;case 9:return 19;case 10:return this.popState(),this.begin(\"raw\"),23;case 11:return 55;case 12:return 60;case 13:return 29;case 14:return 47;case 15:case 16:return this.popState(),44;case 17:return 34;case 18:return 39;case 19:return 51;case 20:case 23:return 48;case 21:this.unput(e.yytext),this.popState(),this.begin(\"com\");break;case 24:return 73;case 25:case 26:case 41:return 72;case 27:return 87;case 28:break;case 29:return this.popState(),54;case 30:return this.popState(),33;case 31:return e.yytext=n(1,2).replace(/\\\\\"/g,'\"'),80;case 32:return e.yytext=n(1,2).replace(/\\\\'/g,\"'\"),80;case 33:return 85;case 34:case 35:return 82;case 36:return 83;case 37:return 84;case 38:return 81;case 39:return 75;case 40:return 77;case 42:return e.yytext=e.yytext.replace(/\\\\([\\\\\\]])/g,\"$1\"),72;case 43:return\"INVALID\";case 44:return 5}},rules:[/^(?:[^\\x00]*?(?=(\\{\\{)))/,/^(?:[^\\x00]+)/,/^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/,/^(?:\\{\\{\\{\\{(?=[^\\/]))/,/^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/,/^(?:[^\\x00]+?(?=(\\{\\{\\{\\{)))/,/^(?:[\\s\\S]*?--(~)?\\}\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{\\{\\{\\{)/,/^(?:\\}\\}\\}\\})/,/^(?:\\{\\{(~)?>)/,/^(?:\\{\\{(~)?#>)/,/^(?:\\{\\{(~)?#\\*?)/,/^(?:\\{\\{(~)?\\/)/,/^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\^)/,/^(?:\\{\\{(~)?\\s*else\\b)/,/^(?:\\{\\{(~)?\\{)/,/^(?:\\{\\{(~)?&)/,/^(?:\\{\\{(~)?!--)/,/^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/,/^(?:\\{\\{(~)?\\*?)/,/^(?:=)/,/^(?:\\.\\.)/,/^(?:\\.(?=([=~}\\s\\/.)|])))/,/^(?:[\\/.])/,/^(?:\\s+)/,/^(?:\\}(~)?\\}\\})/,/^(?:(~)?\\}\\})/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\\s)])))/,/^(?:false(?=([~}\\s)])))/,/^(?:undefined(?=([~}\\s)])))/,/^(?:null(?=([~}\\s)])))/,/^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/,/^(?:as\\s+\\|)/,/^(?:\\|)/,/^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/,/^(?:\\[(\\\\\\]|[^\\]])*\\])/,/^(?:.)/,/^(?:$)/],conditions:{mu:{rules:[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],inclusive:!1},emu:{rules:[2],inclusive:!1},com:{rules:[6],inclusive:!1},raw:{rules:[3,4,5],inclusive:!1},INITIAL:{rules:[0,1,44],inclusive:!0}}};return t}();function i(){this.yy={}}return t.lexer=e,i.prototype=t,t.Parser=i,new i}();t.exports.default=i,t.exports=t.exports.default})),parcelRequire.register(\"asr8x\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"fzfDi\"),n=(i=r)&&i.__esModule?i:{default:i};function s(){var t=arguments.length<=0||void 0===arguments[0]?{}:arguments[0];this.options=t}function o(t,e,i){void 0===e&&(e=t.length);var r=t[e-1],n=t[e-2];return r?\"ContentStatement\"===r.type?(n||!i?/\\r?\\n\\s*?$/:/(^|\\r?\\n)\\s*?$/).test(r.original):void 0:i}function a(t,e,i){void 0===e&&(e=-1);var r=t[e+1],n=t[e+2];return r?\"ContentStatement\"===r.type?(n||!i?/^\\s*?\\r?\\n/:/^\\s*?(\\r?\\n|$)/).test(r.original):void 0:i}function l(t,e,i){var r=t[null==e?0:e+1];if(r&&\"ContentStatement\"===r.type&&(i||!r.rightStripped)){var n=r.value;r.value=r.value.replace(i?/^\\s+/:/^[ \\t]*\\r?\\n?/,\"\"),r.rightStripped=r.value!==n}}function h(t,e,i){var r=t[null==e?t.length-1:e-1];if(r&&\"ContentStatement\"===r.type&&(i||!r.leftStripped)){var n=r.value;return r.value=r.value.replace(i?/\\s+$/:/[ \\t]+$/,\"\"),r.leftStripped=r.value!==n,r.leftStripped}}s.prototype=new n.default,s.prototype.Program=function(t){var e=!this.options.ignoreStandalone,i=!this.isRootSeen;this.isRootSeen=!0;for(var r=t.body,n=0,s=r.length;n<s;n++){var c=r[n],u=this.accept(c);if(u){var p=o(r,n,i),f=a(r,n,i),d=u.openStandalone&&p,g=u.closeStandalone&&f,m=u.inlineStandalone&&p&&f;u.close&&l(r,n,!0),u.open&&h(r,n,!0),e&&m&&(l(r,n),h(r,n)&&\"PartialStatement\"===c.type&&(c.indent=/([ \\t]+$)/.exec(r[n-1].original)[1])),e&&d&&(l((c.program||c.inverse).body),h(r,n)),e&&g&&(l(r,n),h((c.inverse||c.program).body))}}return t},s.prototype.BlockStatement=s.prototype.DecoratorBlock=s.prototype.PartialBlockStatement=function(t){this.accept(t.program),this.accept(t.inverse);var e=t.program||t.inverse,i=t.program&&t.inverse,r=i,n=i;if(i&&i.chained)for(r=i.body[0].program;n.chained;)n=n.body[n.body.length-1].program;var s={open:t.openStrip.open,close:t.closeStrip.close,openStandalone:a(e.body),closeStandalone:o((r||e).body)};if(t.openStrip.close&&l(e.body,null,!0),i){var c=t.inverseStrip;c.open&&h(e.body,null,!0),c.close&&l(r.body,null,!0),t.closeStrip.open&&h(n.body,null,!0),!this.options.ignoreStandalone&&o(e.body)&&a(r.body)&&(h(e.body),l(r.body))}else t.closeStrip.open&&h(e.body,null,!0);return s},s.prototype.Decorator=s.prototype.MustacheStatement=function(t){return t.strip},s.prototype.PartialStatement=s.prototype.CommentStatement=function(t){var e=t.strip||{};return{inlineStandalone:!0,open:e.open,close:e.close}},t.exports.default=s,t.exports=t.exports.default})),parcelRequire.register(\"fzfDi\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i,r=parcelRequire(\"9sXJd\"),n=(i=r)&&i.__esModule?i:{default:i};function s(){this.parents=[]}function o(t){this.acceptRequired(t,\"path\"),this.acceptArray(t.params),this.acceptKey(t,\"hash\")}function a(t){o.call(this,t),this.acceptKey(t,\"program\"),this.acceptKey(t,\"inverse\")}function l(t){this.acceptRequired(t,\"name\"),this.acceptArray(t.params),this.acceptKey(t,\"hash\")}s.prototype={constructor:s,mutating:!1,acceptKey:function(t,e){var i=this.accept(t[e]);if(this.mutating){if(i&&!s.prototype[i.type])throw new n.default('Unexpected node type \"'+i.type+'\" found when accepting '+e+\" on \"+t.type);t[e]=i}},acceptRequired:function(t,e){if(this.acceptKey(t,e),!t[e])throw new n.default(t.type+\" requires \"+e)},acceptArray:function(t){for(var e=0,i=t.length;e<i;e++)this.acceptKey(t,e),t[e]||(t.splice(e,1),e--,i--)},accept:function(t){if(t){if(!this[t.type])throw new n.default(\"Unknown type: \"+t.type,t);this.current&&this.parents.unshift(this.current),this.current=t;var e=this[t.type](t);return this.current=this.parents.shift(),!this.mutating||e?e:!1!==e?t:void 0}},Program:function(t){this.acceptArray(t.body)},MustacheStatement:o,Decorator:o,BlockStatement:a,DecoratorBlock:a,PartialStatement:l,PartialBlockStatement:function(t){l.call(this,t),this.acceptKey(t,\"program\")},ContentStatement:function(){},CommentStatement:function(){},SubExpression:o,PathExpression:function(){},StringLiteral:function(){},NumberLiteral:function(){},BooleanLiteral:function(){},UndefinedLiteral:function(){},NullLiteral:function(){},Hash:function(t){this.acceptArray(t.pairs)},HashPair:function(t){this.acceptRequired(t,\"value\")}},t.exports.default=s,t.exports=t.exports.default})),parcelRequire.register(\"aYREd\",(function(t,e){var i,r,n,s,o,a,l,h,c,u,p;$parcel$export(t.exports,\"__esModule\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"SourceLocation\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"id\",(()=>n),(t=>n=t)),$parcel$export(t.exports,\"stripFlags\",(()=>s),(t=>s=t)),$parcel$export(t.exports,\"stripComment\",(()=>o),(t=>o=t)),$parcel$export(t.exports,\"preparePath\",(()=>a),(t=>a=t)),$parcel$export(t.exports,\"prepareMustache\",(()=>l),(t=>l=t)),$parcel$export(t.exports,\"prepareRawBlock\",(()=>h),(t=>h=t)),$parcel$export(t.exports,\"prepareBlock\",(()=>c),(t=>c=t)),$parcel$export(t.exports,\"prepareProgram\",(()=>u),(t=>u=t)),$parcel$export(t.exports,\"preparePartialBlock\",(()=>p),(t=>p=t)),i=!0,r=function(t,e){this.source=t,this.start={line:e.first_line,column:e.first_column},this.end={line:e.last_line,column:e.last_column}},n=function(t){return/^\\[.*\\]$/.test(t)?t.substring(1,t.length-1):t},s=function(t,e){return{open:\"~\"===t.charAt(2),close:\"~\"===e.charAt(e.length-3)}},o=function(t){return t.replace(/^\\{\\{~?!-?-?/,\"\").replace(/-?-?~?\\}\\}$/,\"\")},a=function(t,e,i){i=this.locInfo(i);for(var r=t?\"@\":\"\",n=[],s=0,o=0,a=e.length;o<a;o++){var l=e[o].part,h=e[o].original!==l;if(r+=(e[o].separator||\"\")+l,h||\"..\"!==l&&\".\"!==l&&\"this\"!==l)n.push(l);else{if(n.length>0)throw new g.default(\"Invalid path: \"+r,{loc:i});\"..\"===l&&s++}}return{type:\"PathExpression\",data:t,depth:s,parts:n,original:r,loc:i}},l=function(t,e,i,r,n,s){var o=r.charAt(3)||r.charAt(2),a=\"{\"!==o&&\"&\"!==o;return{type:/\\*/.test(r)?\"Decorator\":\"MustacheStatement\",path:t,params:e,hash:i,escaped:a,strip:n,loc:this.locInfo(s)}},h=function(t,e,i,r){m(t,i),r=this.locInfo(r);var n={type:\"Program\",body:e,strip:{},loc:r};return{type:\"BlockStatement\",path:t.path,params:t.params,hash:t.hash,program:n,openStrip:{},inverseStrip:{},closeStrip:{},loc:r}},c=function(t,e,i,r,n,s){r&&r.path&&m(t,r);var o=/\\*/.test(t.open);e.blockParams=t.blockParams;var a=void 0,l=void 0;if(i){if(o)throw new g.default(\"Unexpected inverse block on decorator\",i);i.chain&&(i.program.body[0].closeStrip=r.strip),l=i.strip,a=i.program}n&&(n=a,a=e,e=n);return{type:o?\"DecoratorBlock\":\"BlockStatement\",path:t.path,params:t.params,hash:t.hash,program:e,inverse:a,openStrip:t.strip,inverseStrip:l,closeStrip:r&&r.strip,loc:this.locInfo(s)}},u=function(t,e){if(!e&&t.length){var i=t[0].loc,r=t[t.length-1].loc;i&&r&&(e={source:i.source,start:{line:i.start.line,column:i.start.column},end:{line:r.end.line,column:r.end.column}})}return{type:\"Program\",body:t,strip:{},loc:e}},p=function(t,e,i,r){return m(t,i),{type:\"PartialBlockStatement\",name:t.path,params:t.params,hash:t.hash,program:e,openStrip:t.strip,closeStrip:i&&i.strip,loc:this.locInfo(r)}};var f,d=parcelRequire(\"9sXJd\"),g=(f=d)&&f.__esModule?f:{default:f};function m(t,e){if(e=e.path?e.path.original:e,t.path.original!==e){var i={loc:t.path.loc};throw new g.default(t.path.original+\" doesn't match \"+e,i)}}})),parcelRequire.register(\"5XcjE\",(function(t,e){var i,r,n;function s(t){return t&&t.__esModule?t:{default:t}}$parcel$export(t.exports,\"Compiler\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"precompile\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"compile\",(()=>n),(t=>n=t)),i=c,r=function(t,e,i){if(null==t||\"string\"!=typeof t&&\"Program\"!==t.type)throw new o.default(\"You must pass a string or Handlebars AST to Handlebars.precompile. You passed \"+t);\"data\"in(e=e||{})||(e.data=!0);e.compat&&(e.useDepths=!0);var r=i.parse(t,e),n=(new i.Compiler).compile(r,e);return(new i.JavaScriptCompiler).compile(n,e)},n=function(t,e,i){void 0===e&&(e={});if(null==t||\"string\"!=typeof t&&\"Program\"!==t.type)throw new o.default(\"You must pass a string or Handlebars AST to Handlebars.compile. You passed \"+t);\"data\"in(e=a.extend({},e))||(e.data=!0);e.compat&&(e.useDepths=!0);var r=void 0;function n(){var r=i.parse(t,e),n=(new i.Compiler).compile(r,e),s=(new i.JavaScriptCompiler).compile(n,e,void 0,!0);return i.template(s)}function s(t,e){return r||(r=n()),r.call(this,t,e)}return s._setup=function(t){return r||(r=n()),r._setup(t)},s._child=function(t,e,i,s){return r||(r=n()),r._child(t,e,i,s)},s};var o=s(parcelRequire(\"9sXJd\")),a=parcelRequire(\"3zX1n\"),l=s(parcelRequire(\"bV3FD\")),h=[].slice;function c(){}function u(t,e){if(t===e)return!0;if(a.isArray(t)&&a.isArray(e)&&t.length===e.length){for(var i=0;i<t.length;i++)if(!u(t[i],e[i]))return!1;return!0}}function p(t){if(!t.path.parts){var e=t.path;t.path={type:\"PathExpression\",data:!1,depth:0,parts:[e.original+\"\"],original:e.original+\"\",loc:e.loc}}}c.prototype={compiler:c,equals:function(t){var e=this.opcodes.length;if(t.opcodes.length!==e)return!1;for(var i=0;i<e;i++){var r=this.opcodes[i],n=t.opcodes[i];if(r.opcode!==n.opcode||!u(r.args,n.args))return!1}e=this.children.length;for(i=0;i<e;i++)if(!this.children[i].equals(t.children[i]))return!1;return!0},guid:0,compile:function(t,e){return this.sourceNode=[],this.opcodes=[],this.children=[],this.options=e,this.stringParams=e.stringParams,this.trackIds=e.trackIds,e.blockParams=e.blockParams||[],e.knownHelpers=a.extend(Object.create(null),{helperMissing:!0,blockHelperMissing:!0,each:!0,if:!0,unless:!0,with:!0,log:!0,lookup:!0},e.knownHelpers),this.accept(t)},compileProgram:function(t){var e=(new this.compiler).compile(t,this.options),i=this.guid++;return this.usePartial=this.usePartial||e.usePartial,this.children[i]=e,this.useDepths=this.useDepths||e.useDepths,i},accept:function(t){if(!this[t.type])throw new o.default(\"Unknown type: \"+t.type,t);this.sourceNode.unshift(t);var e=this[t.type](t);return this.sourceNode.shift(),e},Program:function(t){this.options.blockParams.unshift(t.blockParams);for(var e=t.body,i=e.length,r=0;r<i;r++)this.accept(e[r]);return this.options.blockParams.shift(),this.isSimple=1===i,this.blockParams=t.blockParams?t.blockParams.length:0,this},BlockStatement:function(t){p(t);var e=t.program,i=t.inverse;e=e&&this.compileProgram(e),i=i&&this.compileProgram(i);var r=this.classifySexpr(t);\"helper\"===r?this.helperSexpr(t,e,i):\"simple\"===r?(this.simpleSexpr(t),this.opcode(\"pushProgram\",e),this.opcode(\"pushProgram\",i),this.opcode(\"emptyHash\"),this.opcode(\"blockValue\",t.path.original)):(this.ambiguousSexpr(t,e,i),this.opcode(\"pushProgram\",e),this.opcode(\"pushProgram\",i),this.opcode(\"emptyHash\"),this.opcode(\"ambiguousBlockValue\")),this.opcode(\"append\")},DecoratorBlock:function(t){var e=t.program&&this.compileProgram(t.program),i=this.setupFullMustacheParams(t,e,void 0),r=t.path;this.useDecorators=!0,this.opcode(\"registerDecorator\",i.length,r.original)},PartialStatement:function(t){this.usePartial=!0;var e=t.program;e&&(e=this.compileProgram(t.program));var i=t.params;if(i.length>1)throw new o.default(\"Unsupported number of partial arguments: \"+i.length,t);i.length||(this.options.explicitPartialContext?this.opcode(\"pushLiteral\",\"undefined\"):i.push({type:\"PathExpression\",parts:[],depth:0}));var r=t.name.original,n=\"SubExpression\"===t.name.type;n&&this.accept(t.name),this.setupFullMustacheParams(t,e,void 0,!0);var s=t.indent||\"\";this.options.preventIndent&&s&&(this.opcode(\"appendContent\",s),s=\"\"),this.opcode(\"invokePartial\",n,r,s),this.opcode(\"append\")},PartialBlockStatement:function(t){this.PartialStatement(t)},MustacheStatement:function(t){this.SubExpression(t),t.escaped&&!this.options.noEscape?this.opcode(\"appendEscaped\"):this.opcode(\"append\")},Decorator:function(t){this.DecoratorBlock(t)},ContentStatement:function(t){t.value&&this.opcode(\"appendContent\",t.value)},CommentStatement:function(){},SubExpression:function(t){p(t);var e=this.classifySexpr(t);\"simple\"===e?this.simpleSexpr(t):\"helper\"===e?this.helperSexpr(t):this.ambiguousSexpr(t)},ambiguousSexpr:function(t,e,i){var r=t.path,n=r.parts[0],s=null!=e||null!=i;this.opcode(\"getContext\",r.depth),this.opcode(\"pushProgram\",e),this.opcode(\"pushProgram\",i),r.strict=!0,this.accept(r),this.opcode(\"invokeAmbiguous\",n,s)},simpleSexpr:function(t){var e=t.path;e.strict=!0,this.accept(e),this.opcode(\"resolvePossibleLambda\")},helperSexpr:function(t,e,i){var r=this.setupFullMustacheParams(t,e,i),n=t.path,s=n.parts[0];if(this.options.knownHelpers[s])this.opcode(\"invokeKnownHelper\",r.length,s);else{if(this.options.knownHelpersOnly)throw new o.default(\"You specified knownHelpersOnly, but used the unknown helper \"+s,t);n.strict=!0,n.falsy=!0,this.accept(n),this.opcode(\"invokeHelper\",r.length,n.original,l.default.helpers.simpleId(n))}},PathExpression:function(t){this.addDepth(t.depth),this.opcode(\"getContext\",t.depth);var e=t.parts[0],i=l.default.helpers.scopedId(t),r=!t.depth&&!i&&this.blockParamIndex(e);r?this.opcode(\"lookupBlockParam\",r,t.parts):e?t.data?(this.options.data=!0,this.opcode(\"lookupData\",t.depth,t.parts,t.strict)):this.opcode(\"lookupOnContext\",t.parts,t.falsy,t.strict,i):this.opcode(\"pushContext\")},StringLiteral:function(t){this.opcode(\"pushString\",t.value)},NumberLiteral:function(t){this.opcode(\"pushLiteral\",t.value)},BooleanLiteral:function(t){this.opcode(\"pushLiteral\",t.value)},UndefinedLiteral:function(){this.opcode(\"pushLiteral\",\"undefined\")},NullLiteral:function(){this.opcode(\"pushLiteral\",\"null\")},Hash:function(t){var e=t.pairs,i=0,r=e.length;for(this.opcode(\"pushHash\");i<r;i++)this.pushParam(e[i].value);for(;i--;)this.opcode(\"assignToHash\",e[i].key);this.opcode(\"popHash\")},opcode:function(t){this.opcodes.push({opcode:t,args:h.call(arguments,1),loc:this.sourceNode[0].loc})},addDepth:function(t){t&&(this.useDepths=!0)},classifySexpr:function(t){var e=l.default.helpers.simpleId(t.path),i=e&&!!this.blockParamIndex(t.path.parts[0]),r=!i&&l.default.helpers.helperExpression(t),n=!i&&(r||e);if(n&&!r){var s=t.path.parts[0],o=this.options;o.knownHelpers[s]?r=!0:o.knownHelpersOnly&&(n=!1)}return r?\"helper\":n?\"ambiguous\":\"simple\"},pushParams:function(t){for(var e=0,i=t.length;e<i;e++)this.pushParam(t[e])},pushParam:function(t){var e=null!=t.value?t.value:t.original||\"\";if(this.stringParams)e.replace&&(e=e.replace(/^(\\.?\\.\\/)*/g,\"\").replace(/\\//g,\".\")),t.depth&&this.addDepth(t.depth),this.opcode(\"getContext\",t.depth||0),this.opcode(\"pushStringParam\",e,t.type),\"SubExpression\"===t.type&&this.accept(t);else{if(this.trackIds){var i=void 0;if(!t.parts||l.default.helpers.scopedId(t)||t.depth||(i=this.blockParamIndex(t.parts[0])),i){var r=t.parts.slice(1).join(\".\");this.opcode(\"pushId\",\"BlockParam\",i,r)}else(e=t.original||e).replace&&(e=e.replace(/^this(?:\\.|$)/,\"\").replace(/^\\.\\//,\"\").replace(/^\\.$/,\"\")),this.opcode(\"pushId\",t.type,e)}this.accept(t)}},setupFullMustacheParams:function(t,e,i,r){var n=t.params;return this.pushParams(n),this.opcode(\"pushProgram\",e),this.opcode(\"pushProgram\",i),t.hash?this.accept(t.hash):this.opcode(\"emptyHash\",r),n},blockParamIndex:function(t){for(var e=0,i=this.options.blockParams.length;e<i;e++){var r=this.options.blockParams[e],n=r&&a.indexOf(r,t);if(r&&n>=0)return[e,n]}}}})),parcelRequire.register(\"1H8oB\",(function(t,e){\"use strict\";function i(t){return t&&t.__esModule?t:{default:t}}t.exports.__esModule=!0;var r=parcelRequire(\"a34Fz\"),n=i(parcelRequire(\"9sXJd\")),s=parcelRequire(\"3zX1n\"),o=i(parcelRequire(\"6074a\"));function a(t){this.value=t}function l(){}l.prototype={nameLookup:function(t,e){return this.internalNameLookup(t,e)},depthedLookup:function(t){return[this.aliasable(\"container.lookup\"),\"(depths, \",JSON.stringify(t),\")\"]},compilerInfo:function(){var t=r.COMPILER_REVISION;return[t,r.REVISION_CHANGES[t]]},appendToBuffer:function(t,e,i){return s.isArray(t)||(t=[t]),t=this.source.wrap(t,e),this.environment.isSimple?[\"return \",t,\";\"]:i?[\"buffer += \",t,\";\"]:(t.appendToBuffer=!0,t)},initializeBuffer:function(){return this.quotedString(\"\")},internalNameLookup:function(t,e){return this.lookupPropertyFunctionIsUsed=!0,[\"lookupProperty(\",t,\",\",JSON.stringify(e),\")\"]},lookupPropertyFunctionIsUsed:!1,compile:function(t,e,i,r){this.environment=t,this.options=e,this.stringParams=this.options.stringParams,this.trackIds=this.options.trackIds,this.precompile=!r,this.name=this.environment.name,this.isChild=!!i,this.context=i||{decorators:[],programs:[],environments:[]},this.preamble(),this.stackSlot=0,this.stackVars=[],this.aliases={},this.registers={list:[]},this.hashes=[],this.compileStack=[],this.inlineStack=[],this.blockParams=[],this.compileChildren(t,e),this.useDepths=this.useDepths||t.useDepths||t.useDecorators||this.options.compat,this.useBlockParams=this.useBlockParams||t.useBlockParams;var s=t.opcodes,o=void 0,a=void 0,l=void 0,h=void 0;for(l=0,h=s.length;l<h;l++)o=s[l],this.source.currentLocation=o.loc,a=a||o.loc,this[o.opcode].apply(this,o.args);if(this.source.currentLocation=a,this.pushSource(\"\"),this.stackSlot||this.inlineStack.length||this.compileStack.length)throw new n.default(\"Compile completed with content left on stack\");this.decorators.isEmpty()?this.decorators=void 0:(this.useDecorators=!0,this.decorators.prepend([\"var decorators = container.decorators, \",this.lookupPropertyFunctionVarDeclaration(),\";\\n\"]),this.decorators.push(\"return fn;\"),r?this.decorators=Function.apply(this,[\"fn\",\"props\",\"container\",\"depth0\",\"data\",\"blockParams\",\"depths\",this.decorators.merge()]):(this.decorators.prepend(\"function(fn, props, container, depth0, data, blockParams, depths) {\\n\"),this.decorators.push(\"}\\n\"),this.decorators=this.decorators.merge()));var c=this.createFunctionContext(r);if(this.isChild)return c;var u={compiler:this.compilerInfo(),main:c};this.decorators&&(u.main_d=this.decorators,u.useDecorators=!0);var p=this.context,f=p.programs,d=p.decorators;for(l=0,h=f.length;l<h;l++)f[l]&&(u[l]=f[l],d[l]&&(u[l+\"_d\"]=d[l],u.useDecorators=!0));return this.environment.usePartial&&(u.usePartial=!0),this.options.data&&(u.useData=!0),this.useDepths&&(u.useDepths=!0),this.useBlockParams&&(u.useBlockParams=!0),this.options.compat&&(u.compat=!0),r?u.compilerOptions=this.options:(u.compiler=JSON.stringify(u.compiler),this.source.currentLocation={start:{line:1,column:0}},u=this.objectLiteral(u),e.srcName?(u=u.toStringWithSourceMap({file:e.destName})).map=u.map&&u.map.toString():u=u.toString()),u},preamble:function(){this.lastContext=0,this.source=new o.default(this.options.srcName),this.decorators=new o.default(this.options.srcName)},createFunctionContext:function(t){var e=this,i=\"\",r=this.stackVars.concat(this.registers.list);r.length>0&&(i+=\", \"+r.join(\", \"));var n=0;Object.keys(this.aliases).forEach((function(t){var r=e.aliases[t];r.children&&r.referenceCount>1&&(i+=\", alias\"+ ++n+\"=\"+t,r.children[0]=\"alias\"+n)})),this.lookupPropertyFunctionIsUsed&&(i+=\", \"+this.lookupPropertyFunctionVarDeclaration());var s=[\"container\",\"depth0\",\"helpers\",\"partials\",\"data\"];(this.useBlockParams||this.useDepths)&&s.push(\"blockParams\"),this.useDepths&&s.push(\"depths\");var o=this.mergeSource(i);return t?(s.push(o),Function.apply(this,s)):this.source.wrap([\"function(\",s.join(\",\"),\") {\\n  \",o,\"}\"])},mergeSource:function(t){var e=this.environment.isSimple,i=!this.forceBuffer,r=void 0,n=void 0,s=void 0,o=void 0;return this.source.each((function(t){t.appendToBuffer?(s?t.prepend(\"  + \"):s=t,o=t):(s&&(n?s.prepend(\"buffer += \"):r=!0,o.add(\";\"),s=o=void 0),n=!0,e||(i=!1))})),i?s?(s.prepend(\"return \"),o.add(\";\")):n||this.source.push('return \"\";'):(t+=\", buffer = \"+(r?\"\":this.initializeBuffer()),s?(s.prepend(\"return buffer + \"),o.add(\";\")):this.source.push(\"return buffer;\")),t&&this.source.prepend(\"var \"+t.substring(2)+(r?\"\":\";\\n\")),this.source.merge()},lookupPropertyFunctionVarDeclaration:function(){return\"\\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\\n          return parent[propertyName];\\n        }\\n        return undefined\\n    }\\n    \".trim()},blockValue:function(t){var e=this.aliasable(\"container.hooks.blockHelperMissing\"),i=[this.contextName(0)];this.setupHelperArgs(t,0,i);var r=this.popStack();i.splice(1,0,r),this.push(this.source.functionCall(e,\"call\",i))},ambiguousBlockValue:function(){var t=this.aliasable(\"container.hooks.blockHelperMissing\"),e=[this.contextName(0)];this.setupHelperArgs(\"\",0,e,!0),this.flushInline();var i=this.topStack();e.splice(1,0,i),this.pushSource([\"if (!\",this.lastHelper,\") { \",i,\" = \",this.source.functionCall(t,\"call\",e),\"}\"])},appendContent:function(t){this.pendingContent?t=this.pendingContent+t:this.pendingLocation=this.source.currentLocation,this.pendingContent=t},append:function(){if(this.isInline())this.replaceStack((function(t){return[\" != null ? \",t,' : \"\"']})),this.pushSource(this.appendToBuffer(this.popStack()));else{var t=this.popStack();this.pushSource([\"if (\",t,\" != null) { \",this.appendToBuffer(t,void 0,!0),\" }\"]),this.environment.isSimple&&this.pushSource([\"else { \",this.appendToBuffer(\"''\",void 0,!0),\" }\"])}},appendEscaped:function(){this.pushSource(this.appendToBuffer([this.aliasable(\"container.escapeExpression\"),\"(\",this.popStack(),\")\"]))},getContext:function(t){this.lastContext=t},pushContext:function(){this.pushStackLiteral(this.contextName(this.lastContext))},lookupOnContext:function(t,e,i,r){var n=0;r||!this.options.compat||this.lastContext?this.pushContext():this.push(this.depthedLookup(t[n++])),this.resolvePath(\"context\",t,n,e,i)},lookupBlockParam:function(t,e){this.useBlockParams=!0,this.push([\"blockParams[\",t[0],\"][\",t[1],\"]\"]),this.resolvePath(\"context\",e,1)},lookupData:function(t,e,i){t?this.pushStackLiteral(\"container.data(data, \"+t+\")\"):this.pushStackLiteral(\"data\"),this.resolvePath(\"data\",e,0,!0,i)},resolvePath:function(t,e,i,r,n){var s=this;if(this.options.strict||this.options.assumeObjects)this.push(function(t,e,i,r){var n=e.popStack(),s=0,o=i.length;t&&o--;for(;s<o;s++)n=e.nameLookup(n,i[s],r);return t?[e.aliasable(\"container.strict\"),\"(\",n,\", \",e.quotedString(i[s]),\", \",JSON.stringify(e.source.currentLocation),\" )\"]:n}(this.options.strict&&n,this,e,t));else for(var o=e.length;i<o;i++)this.replaceStack((function(n){var o=s.nameLookup(n,e[i],t);return r?[\" && \",o]:[\" != null ? \",o,\" : \",n]}))},resolvePossibleLambda:function(){this.push([this.aliasable(\"container.lambda\"),\"(\",this.popStack(),\", \",this.contextName(0),\")\"])},pushStringParam:function(t,e){this.pushContext(),this.pushString(e),\"SubExpression\"!==e&&(\"string\"==typeof t?this.pushString(t):this.pushStackLiteral(t))},emptyHash:function(t){this.trackIds&&this.push(\"{}\"),this.stringParams&&(this.push(\"{}\"),this.push(\"{}\")),this.pushStackLiteral(t?\"undefined\":\"{}\")},pushHash:function(){this.hash&&this.hashes.push(this.hash),this.hash={values:{},types:[],contexts:[],ids:[]}},popHash:function(){var t=this.hash;this.hash=this.hashes.pop(),this.trackIds&&this.push(this.objectLiteral(t.ids)),this.stringParams&&(this.push(this.objectLiteral(t.contexts)),this.push(this.objectLiteral(t.types))),this.push(this.objectLiteral(t.values))},pushString:function(t){this.pushStackLiteral(this.quotedString(t))},pushLiteral:function(t){this.pushStackLiteral(t)},pushProgram:function(t){null!=t?this.pushStackLiteral(this.programExpression(t)):this.pushStackLiteral(null)},registerDecorator:function(t,e){var i=this.nameLookup(\"decorators\",e,\"decorator\"),r=this.setupHelperArgs(e,t);this.decorators.push([\"fn = \",this.decorators.functionCall(i,\"\",[\"fn\",\"props\",\"container\",r]),\" || fn;\"])},invokeHelper:function(t,e,i){var r=this.popStack(),n=this.setupHelper(t,e),s=[];i&&s.push(n.name),s.push(r),this.options.strict||s.push(this.aliasable(\"container.hooks.helperMissing\"));var o=[\"(\",this.itemsSeparatedBy(s,\"||\"),\")\"],a=this.source.functionCall(o,\"call\",n.callParams);this.push(a)},itemsSeparatedBy:function(t,e){var i=[];i.push(t[0]);for(var r=1;r<t.length;r++)i.push(e,t[r]);return i},invokeKnownHelper:function(t,e){var i=this.setupHelper(t,e);this.push(this.source.functionCall(i.name,\"call\",i.callParams))},invokeAmbiguous:function(t,e){this.useRegister(\"helper\");var i=this.popStack();this.emptyHash();var r=this.setupHelper(0,t,e),n=[\"(\",\"(helper = \",this.lastHelper=this.nameLookup(\"helpers\",t,\"helper\"),\" || \",i,\")\"];this.options.strict||(n[0]=\"(helper = \",n.push(\" != null ? helper : \",this.aliasable(\"container.hooks.helperMissing\"))),this.push([\"(\",n,r.paramsInit?[\"),(\",r.paramsInit]:[],\"),\",\"(typeof helper === \",this.aliasable('\"function\"'),\" ? \",this.source.functionCall(\"helper\",\"call\",r.callParams),\" : helper))\"])},invokePartial:function(t,e,i){var r=[],n=this.setupParams(e,1,r);t&&(e=this.popStack(),delete n.name),i&&(n.indent=JSON.stringify(i)),n.helpers=\"helpers\",n.partials=\"partials\",n.decorators=\"container.decorators\",t?r.unshift(e):r.unshift(this.nameLookup(\"partials\",e,\"partial\")),this.options.compat&&(n.depths=\"depths\"),n=this.objectLiteral(n),r.push(n),this.push(this.source.functionCall(\"container.invokePartial\",\"\",r))},assignToHash:function(t){var e=this.popStack(),i=void 0,r=void 0,n=void 0;this.trackIds&&(n=this.popStack()),this.stringParams&&(r=this.popStack(),i=this.popStack());var s=this.hash;i&&(s.contexts[t]=i),r&&(s.types[t]=r),n&&(s.ids[t]=n),s.values[t]=e},pushId:function(t,e,i){\"BlockParam\"===t?this.pushStackLiteral(\"blockParams[\"+e[0]+\"].path[\"+e[1]+\"]\"+(i?\" + \"+JSON.stringify(\".\"+i):\"\")):\"PathExpression\"===t?this.pushString(e):\"SubExpression\"===t?this.pushStackLiteral(\"true\"):this.pushStackLiteral(\"null\")},compiler:l,compileChildren:function(t,e){for(var i=t.children,r=void 0,n=void 0,s=0,o=i.length;s<o;s++){r=i[s],n=new this.compiler;var a=this.matchExistingProgram(r);if(null==a){this.context.programs.push(\"\");var l=this.context.programs.length;r.index=l,r.name=\"program\"+l,this.context.programs[l]=n.compile(r,e,this.context,!this.precompile),this.context.decorators[l]=n.decorators,this.context.environments[l]=r,this.useDepths=this.useDepths||n.useDepths,this.useBlockParams=this.useBlockParams||n.useBlockParams,r.useDepths=this.useDepths,r.useBlockParams=this.useBlockParams}else r.index=a.index,r.name=\"program\"+a.index,this.useDepths=this.useDepths||a.useDepths,this.useBlockParams=this.useBlockParams||a.useBlockParams}},matchExistingProgram:function(t){for(var e=0,i=this.context.environments.length;e<i;e++){var r=this.context.environments[e];if(r&&r.equals(t))return r}},programExpression:function(t){var e=this.environment.children[t],i=[e.index,\"data\",e.blockParams];return(this.useBlockParams||this.useDepths)&&i.push(\"blockParams\"),this.useDepths&&i.push(\"depths\"),\"container.program(\"+i.join(\", \")+\")\"},useRegister:function(t){this.registers[t]||(this.registers[t]=!0,this.registers.list.push(t))},push:function(t){return t instanceof a||(t=this.source.wrap(t)),this.inlineStack.push(t),t},pushStackLiteral:function(t){this.push(new a(t))},pushSource:function(t){this.pendingContent&&(this.source.push(this.appendToBuffer(this.source.quotedString(this.pendingContent),this.pendingLocation)),this.pendingContent=void 0),t&&this.source.push(t)},replaceStack:function(t){var e=[\"(\"],i=void 0,r=void 0,s=void 0;if(!this.isInline())throw new n.default(\"replaceStack on non-inline\");var o=this.popStack(!0);if(o instanceof a)e=[\"(\",i=[o.value]],s=!0;else{r=!0;var l=this.incrStack();e=[\"((\",this.push(l),\" = \",o,\")\"],i=this.topStack()}var h=t.call(this,i);s||this.popStack(),r&&this.stackSlot--,this.push(e.concat(h,\")\"))},incrStack:function(){return this.stackSlot++,this.stackSlot>this.stackVars.length&&this.stackVars.push(\"stack\"+this.stackSlot),this.topStackName()},topStackName:function(){return\"stack\"+this.stackSlot},flushInline:function(){var t=this.inlineStack;this.inlineStack=[];for(var e=0,i=t.length;e<i;e++){var r=t[e];if(r instanceof a)this.compileStack.push(r);else{var n=this.incrStack();this.pushSource([n,\" = \",r,\";\"]),this.compileStack.push(n)}}},isInline:function(){return this.inlineStack.length},popStack:function(t){var e=this.isInline(),i=(e?this.inlineStack:this.compileStack).pop();if(!t&&i instanceof a)return i.value;if(!e){if(!this.stackSlot)throw new n.default(\"Invalid stack pop\");this.stackSlot--}return i},topStack:function(){var t=this.isInline()?this.inlineStack:this.compileStack,e=t[t.length-1];return e instanceof a?e.value:e},contextName:function(t){return this.useDepths&&t?\"depths[\"+t+\"]\":\"depth\"+t},quotedString:function(t){return this.source.quotedString(t)},objectLiteral:function(t){return this.source.objectLiteral(t)},aliasable:function(t){var e=this.aliases[t];return e?(e.referenceCount++,e):((e=this.aliases[t]=this.source.wrap(t)).aliasable=!0,e.referenceCount=1,e)},setupHelper:function(t,e,i){var r=[];return{params:r,paramsInit:this.setupHelperArgs(e,t,r,i),name:this.nameLookup(\"helpers\",e,\"helper\"),callParams:[this.aliasable(this.contextName(0)+\" != null ? \"+this.contextName(0)+\" : (container.nullContext || {})\")].concat(r)}},setupParams:function(t,e,i){var r={},n=[],s=[],o=[],a=!i,l=void 0;a&&(i=[]),r.name=this.quotedString(t),r.hash=this.popStack(),this.trackIds&&(r.hashIds=this.popStack()),this.stringParams&&(r.hashTypes=this.popStack(),r.hashContexts=this.popStack());var h=this.popStack(),c=this.popStack();(c||h)&&(r.fn=c||\"container.noop\",r.inverse=h||\"container.noop\");for(var u=e;u--;)l=this.popStack(),i[u]=l,this.trackIds&&(o[u]=this.popStack()),this.stringParams&&(s[u]=this.popStack(),n[u]=this.popStack());return a&&(r.args=this.source.generateArray(i)),this.trackIds&&(r.ids=this.source.generateArray(o)),this.stringParams&&(r.types=this.source.generateArray(s),r.contexts=this.source.generateArray(n)),this.options.data&&(r.data=\"data\"),this.useBlockParams&&(r.blockParams=\"blockParams\"),r},setupHelperArgs:function(t,e,i,r){var n=this.setupParams(t,e,i);return n.loc=JSON.stringify(this.source.currentLocation),n=this.objectLiteral(n),r?(this.useRegister(\"options\"),i.push(\"options\"),[\"options=\",n]):i?(i.push(n),\"\"):n}},function(){for(var t=\"break else new var case finally return void catch for switch while continue function this with default if throw delete in try do instanceof typeof abstract enum int short boolean export interface static byte extends long super char final native synchronized class float package throws const goto private transient debugger implements protected volatile double import public let yield await null true false\".split(\" \"),e=l.RESERVED_WORDS={},i=0,r=t.length;i<r;i++)e[t[i]]=!0}(),l.isValidJavaScriptVariableName=function(t){return!l.RESERVED_WORDS[t]&&/^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(t)},t.exports.default=l,t.exports=t.exports.default})),parcelRequire.register(\"6074a\",(function(t,e){\"use strict\";t.exports.__esModule=!0;var i=parcelRequire(\"3zX1n\"),r=void 0;try{if(\"function\"!=typeof define||!define.amd){var n=parcelRequire(\"97gFG\");r=n.SourceNode}}catch(t){}function s(t,e,r){if(i.isArray(t)){for(var n=[],s=0,o=t.length;s<o;s++)n.push(e.wrap(t[s],r));return n}return\"boolean\"==typeof t||\"number\"==typeof t?t+\"\":t}function o(t){this.srcFile=t,this.source=[]}r||((r=function(t,e,i,r){this.src=\"\",r&&this.add(r)}).prototype={add:function(t){i.isArray(t)&&(t=t.join(\"\")),this.src+=t},prepend:function(t){i.isArray(t)&&(t=t.join(\"\")),this.src=t+this.src},toStringWithSourceMap:function(){return{code:this.toString()}},toString:function(){return this.src}}),o.prototype={isEmpty:function(){return!this.source.length},prepend:function(t,e){this.source.unshift(this.wrap(t,e))},push:function(t,e){this.source.push(this.wrap(t,e))},merge:function(){var t=this.empty();return this.each((function(e){t.add([\"  \",e,\"\\n\"])})),t},each:function(t){for(var e=0,i=this.source.length;e<i;e++)t(this.source[e])},empty:function(){var t=this.currentLocation||{start:{}};return new r(t.start.line,t.start.column,this.srcFile)},wrap:function(t){var e=arguments.length<=1||void 0===arguments[1]?this.currentLocation||{start:{}}:arguments[1];return t instanceof r?t:(t=s(t,this,e),new r(e.start.line,e.start.column,this.srcFile,t))},functionCall:function(t,e,i){return i=this.generateList(i),this.wrap([t,e?\".\"+e+\"(\":\"(\",i,\")\"])},quotedString:function(t){return'\"'+(t+\"\").replace(/\\\\/g,\"\\\\\\\\\").replace(/\"/g,'\\\\\"').replace(/\\n/g,\"\\\\n\").replace(/\\r/g,\"\\\\r\").replace(/\\u2028/g,\"\\\\u2028\").replace(/\\u2029/g,\"\\\\u2029\")+'\"'},objectLiteral:function(t){var e=this,i=[];Object.keys(t).forEach((function(r){var n=s(t[r],e);\"undefined\"!==n&&i.push([e.quotedString(r),\":\",n])}));var r=this.generateList(i);return r.prepend(\"{\"),r.add(\"}\"),r},generateList:function(t){for(var e=this.empty(),i=0,r=t.length;i<r;i++)i&&e.add(\",\"),e.add(s(t[i],this));return e},generateArray:function(t){var e=this.generateList(t);return e.prepend(\"[\"),e.add(\"]\"),e}},t.exports.default=o,t.exports=t.exports.default})),parcelRequire.register(\"97gFG\",(function(t,e){var i,r,n;$parcel$export(t.exports,\"SourceMapGenerator\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"SourceMapConsumer\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"SourceNode\",(()=>n),(t=>n=t)),i=parcelRequire(\"h712z\").SourceMapGenerator,r=parcelRequire(\"lLalb\").SourceMapConsumer,n=parcelRequire(\"jtIqc\").SourceNode})),parcelRequire.register(\"h712z\",(function(t,e){var i;$parcel$export(t.exports,\"SourceMapGenerator\",(()=>i),(t=>i=t));var r=parcelRequire(\"f30X9\"),n=parcelRequire(\"6I6y5\"),s=parcelRequire(\"kKGit\").ArraySet,o=parcelRequire(\"1DOoG\").MappingList;function a(t){t||(t={}),this._file=n.getArg(t,\"file\",null),this._sourceRoot=n.getArg(t,\"sourceRoot\",null),this._skipValidation=n.getArg(t,\"skipValidation\",!1),this._sources=new s,this._names=new s,this._mappings=new o,this._sourcesContents=null}a.prototype._version=3,a.fromSourceMap=function(t){var e=t.sourceRoot,i=new a({file:t.file,sourceRoot:e});return t.eachMapping((function(t){var r={generated:{line:t.generatedLine,column:t.generatedColumn}};null!=t.source&&(r.source=t.source,null!=e&&(r.source=n.relative(e,r.source)),r.original={line:t.originalLine,column:t.originalColumn},null!=t.name&&(r.name=t.name)),i.addMapping(r)})),t.sources.forEach((function(r){var s=r;null!==e&&(s=n.relative(e,r)),i._sources.has(s)||i._sources.add(s);var o=t.sourceContentFor(r);null!=o&&i.setSourceContent(r,o)})),i},a.prototype.addMapping=function(t){var e=n.getArg(t,\"generated\"),i=n.getArg(t,\"original\",null),r=n.getArg(t,\"source\",null),s=n.getArg(t,\"name\",null);this._skipValidation||this._validateMapping(e,i,r,s),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=s&&(s=String(s),this._names.has(s)||this._names.add(s)),this._mappings.add({generatedLine:e.line,generatedColumn:e.column,originalLine:null!=i&&i.line,originalColumn:null!=i&&i.column,source:r,name:s})},a.prototype.setSourceContent=function(t,e){var i=t;null!=this._sourceRoot&&(i=n.relative(this._sourceRoot,i)),null!=e?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[n.toSetString(i)]=e):this._sourcesContents&&(delete this._sourcesContents[n.toSetString(i)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},a.prototype.applySourceMap=function(t,e,i){var r=e;if(null==e){if(null==t.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\\'s \"file\" property. Both were omitted.');r=t.file}var o=this._sourceRoot;null!=o&&(r=n.relative(o,r));var a=new s,l=new s;this._mappings.unsortedForEach((function(e){if(e.source===r&&null!=e.originalLine){var s=t.originalPositionFor({line:e.originalLine,column:e.originalColumn});null!=s.source&&(e.source=s.source,null!=i&&(e.source=n.join(i,e.source)),null!=o&&(e.source=n.relative(o,e.source)),e.originalLine=s.line,e.originalColumn=s.column,null!=s.name&&(e.name=s.name))}var h=e.source;null==h||a.has(h)||a.add(h);var c=e.name;null==c||l.has(c)||l.add(c)}),this),this._sources=a,this._names=l,t.sources.forEach((function(e){var r=t.sourceContentFor(e);null!=r&&(null!=i&&(e=n.join(i,e)),null!=o&&(e=n.relative(o,e)),this.setSourceContent(e,r))}),this)},a.prototype._validateMapping=function(t,e,i,r){if(e&&\"number\"!=typeof e.line&&\"number\"!=typeof e.column)throw new Error(\"original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.\");if((!(t&&\"line\"in t&&\"column\"in t&&t.line>0&&t.column>=0)||e||i||r)&&!(t&&\"line\"in t&&\"column\"in t&&e&&\"line\"in e&&\"column\"in e&&t.line>0&&t.column>=0&&e.line>0&&e.column>=0&&i))throw new Error(\"Invalid mapping: \"+JSON.stringify({generated:t,source:i,original:e,name:r}))},a.prototype._serializeMappings=function(){for(var t,e,i,s,o=0,a=1,l=0,h=0,c=0,u=0,p=\"\",f=this._mappings.toArray(),d=0,g=f.length;d<g;d++){if(t=\"\",(e=f[d]).generatedLine!==a)for(o=0;e.generatedLine!==a;)t+=\";\",a++;else if(d>0){if(!n.compareByGeneratedPositionsInflated(e,f[d-1]))continue;t+=\",\"}t+=r.encode(e.generatedColumn-o),o=e.generatedColumn,null!=e.source&&(s=this._sources.indexOf(e.source),t+=r.encode(s-u),u=s,t+=r.encode(e.originalLine-1-h),h=e.originalLine-1,t+=r.encode(e.originalColumn-l),l=e.originalColumn,null!=e.name&&(i=this._names.indexOf(e.name),t+=r.encode(i-c),c=i)),p+=t}return p},a.prototype._generateSourcesContent=function(t,e){return t.map((function(t){if(!this._sourcesContents)return null;null!=e&&(t=n.relative(e,t));var i=n.toSetString(t);return Object.prototype.hasOwnProperty.call(this._sourcesContents,i)?this._sourcesContents[i]:null}),this)},a.prototype.toJSON=function(){var t={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(t.file=this._file),null!=this._sourceRoot&&(t.sourceRoot=this._sourceRoot),this._sourcesContents&&(t.sourcesContent=this._generateSourcesContent(t.sources,t.sourceRoot)),t},a.prototype.toString=function(){return JSON.stringify(this.toJSON())},i=a})),parcelRequire.register(\"f30X9\",(function(t,e){var i,r;$parcel$export(t.exports,\"encode\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"decode\",(()=>r),(t=>r=t));var n=parcelRequire(\"iiYre\");i=function(t){var e,i=\"\",r=function(t){return t<0?1+(-t<<1):0+(t<<1)}(t);do{e=31&r,(r>>>=5)>0&&(e|=32),i+=n.encode(e)}while(r>0);return i},r=function(t,e,i){var r,s,o,a,l=t.length,h=0,c=0;do{if(e>=l)throw new Error(\"Expected more digits in base 64 VLQ value.\");if(-1===(s=n.decode(t.charCodeAt(e++))))throw new Error(\"Invalid base64 digit: \"+t.charAt(e-1));r=!!(32&s),h+=(s&=31)<<c,c+=5}while(r);i.value=(a=(o=h)>>1,1==(1&o)?-a:a),i.rest=e}})),parcelRequire.register(\"iiYre\",(function(t,e){var i,r;$parcel$export(t.exports,\"encode\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"decode\",(()=>r),(t=>r=t));var n=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");i=function(t){if(0<=t&&t<n.length)return n[t];throw new TypeError(\"Must be between 0 and 63: \"+t)},r=function(t){return 65<=t&&t<=90?t-65:97<=t&&t<=122?t-97+26:48<=t&&t<=57?t-48+52:43==t?62:47==t?63:-1}})),parcelRequire.register(\"6I6y5\",(function(t,e){var i,r,n,s,o,a,l,h,c,u,p,f,d;$parcel$export(t.exports,\"getArg\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"urlParse\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"isAbsolute\",(()=>o),(t=>o=t)),$parcel$export(t.exports,\"normalize\",(()=>n),(t=>n=t)),$parcel$export(t.exports,\"join\",(()=>s),(t=>s=t)),$parcel$export(t.exports,\"relative\",(()=>a),(t=>a=t)),$parcel$export(t.exports,\"toSetString\",(()=>l),(t=>l=t)),$parcel$export(t.exports,\"fromSetString\",(()=>h),(t=>h=t)),$parcel$export(t.exports,\"compareByOriginalPositions\",(()=>c),(t=>c=t)),$parcel$export(t.exports,\"compareByGeneratedPositionsDeflated\",(()=>u),(t=>u=t)),$parcel$export(t.exports,\"compareByGeneratedPositionsInflated\",(()=>p),(t=>p=t)),$parcel$export(t.exports,\"parseSourceMapInput\",(()=>f),(t=>f=t)),$parcel$export(t.exports,\"computeSourceURL\",(()=>d),(t=>d=t)),i=function(t,e,i){if(e in t)return t[e];if(3===arguments.length)return i;throw new Error('\"'+e+'\" is a required argument.')};var g=/^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/,m=/^data:.+\\,.+$/;function v(t){var e=t.match(g);return e?{scheme:e[1],auth:e[2],host:e[3],port:e[4],path:e[5]}:null}function y(t){var e=\"\";return t.scheme&&(e+=t.scheme+\":\"),e+=\"//\",t.auth&&(e+=t.auth+\"@\"),t.host&&(e+=t.host),t.port&&(e+=\":\"+t.port),t.path&&(e+=t.path),e}function x(t){var e=t,i=v(t);if(i){if(!i.path)return t;e=i.path}for(var r,n=o(e),s=e.split(/\\/+/),a=0,l=s.length-1;l>=0;l--)\".\"===(r=s[l])?s.splice(l,1):\"..\"===r?a++:a>0&&(\"\"===r?(s.splice(l+1,a),a=0):(s.splice(l,2),a--));return\"\"===(e=s.join(\"/\"))&&(e=n?\"/\":\".\"),i?(i.path=e,y(i)):e}function _(t,e){\"\"===t&&(t=\".\"),\"\"===e&&(e=\".\");var i=v(e),r=v(t);if(r&&(t=r.path||\"/\"),i&&!i.scheme)return r&&(i.scheme=r.scheme),y(i);if(i||e.match(m))return e;if(r&&!r.host&&!r.path)return r.host=e,y(r);var n=\"/\"===e.charAt(0)?e:x(t.replace(/\\/+$/,\"\")+\"/\"+e);return r?(r.path=n,y(r)):n}r=v,n=x,s=_,o=function(t){return\"/\"===t.charAt(0)||g.test(t)},a=function(t,e){\"\"===t&&(t=\".\"),t=t.replace(/\\/$/,\"\");for(var i=0;0!==e.indexOf(t+\"/\");){var r=t.lastIndexOf(\"/\");if(r<0)return e;if((t=t.slice(0,r)).match(/^([^\\/]+:\\/)?\\/*$/))return e;++i}return Array(i+1).join(\"../\")+e.substr(t.length+1)};var b=!(\"__proto__\"in Object.create(null));function C(t){return t}function S(t){if(!t)return!1;var e=t.length;if(e<9)return!1;if(95!==t.charCodeAt(e-1)||95!==t.charCodeAt(e-2)||111!==t.charCodeAt(e-3)||116!==t.charCodeAt(e-4)||111!==t.charCodeAt(e-5)||114!==t.charCodeAt(e-6)||112!==t.charCodeAt(e-7)||95!==t.charCodeAt(e-8)||95!==t.charCodeAt(e-9))return!1;for(var i=e-10;i>=0;i--)if(36!==t.charCodeAt(i))return!1;return!0}function w(t,e){return t===e?0:null===t?1:null===e?-1:t>e?1:-1}l=b?C:function(t){return S(t)?\"$\"+t:t},h=b?C:function(t){return S(t)?t.slice(1):t},c=function(t,e,i){var r=w(t.source,e.source);return 0!==r||0!==(r=t.originalLine-e.originalLine)||0!==(r=t.originalColumn-e.originalColumn)||i||0!==(r=t.generatedColumn-e.generatedColumn)||0!==(r=t.generatedLine-e.generatedLine)?r:w(t.name,e.name)},u=function(t,e,i){var r=t.generatedLine-e.generatedLine;return 0!==r||0!==(r=t.generatedColumn-e.generatedColumn)||i||0!==(r=w(t.source,e.source))||0!==(r=t.originalLine-e.originalLine)||0!==(r=t.originalColumn-e.originalColumn)?r:w(t.name,e.name)},p=function(t,e){var i=t.generatedLine-e.generatedLine;return 0!==i||0!==(i=t.generatedColumn-e.generatedColumn)||0!==(i=w(t.source,e.source))||0!==(i=t.originalLine-e.originalLine)||0!==(i=t.originalColumn-e.originalColumn)?i:w(t.name,e.name)},f=function(t){return JSON.parse(t.replace(/^\\)]}'[^\\n]*\\n/,\"\"))},d=function(t,e,i){if(e=e||\"\",t&&(\"/\"!==t[t.length-1]&&\"/\"!==e[0]&&(t+=\"/\"),e=t+e),i){var r=v(i);if(!r)throw new Error(\"sourceMapURL could not be parsed\");if(r.path){var n=r.path.lastIndexOf(\"/\");n>=0&&(r.path=r.path.substring(0,n+1))}e=_(y(r),e)}return x(e)}})),parcelRequire.register(\"kKGit\",(function(t,e){var i;$parcel$export(t.exports,\"ArraySet\",(()=>i),(t=>i=t));var r=parcelRequire(\"6I6y5\"),n=Object.prototype.hasOwnProperty,s=\"undefined\"!=typeof Map;function o(){this._array=[],this._set=s?new Map:Object.create(null)}o.fromArray=function(t,e){for(var i=new o,r=0,n=t.length;r<n;r++)i.add(t[r],e);return i},o.prototype.size=function(){return s?this._set.size:Object.getOwnPropertyNames(this._set).length},o.prototype.add=function(t,e){var i=s?t:r.toSetString(t),o=s?this.has(t):n.call(this._set,i),a=this._array.length;o&&!e||this._array.push(t),o||(s?this._set.set(t,a):this._set[i]=a)},o.prototype.has=function(t){if(s)return this._set.has(t);var e=r.toSetString(t);return n.call(this._set,e)},o.prototype.indexOf=function(t){if(s){var e=this._set.get(t);if(e>=0)return e}else{var i=r.toSetString(t);if(n.call(this._set,i))return this._set[i]}throw new Error('\"'+t+'\" is not in the set.')},o.prototype.at=function(t){if(t>=0&&t<this._array.length)return this._array[t];throw new Error(\"No element indexed by \"+t)},o.prototype.toArray=function(){return this._array.slice()},i=o})),parcelRequire.register(\"1DOoG\",(function(t,e){var i;$parcel$export(t.exports,\"MappingList\",(()=>i),(t=>i=t));var r=parcelRequire(\"6I6y5\");function n(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}n.prototype.unsortedForEach=function(t,e){this._array.forEach(t,e)},n.prototype.add=function(t){var e,i,n,s,o,a;e=this._last,i=t,n=e.generatedLine,s=i.generatedLine,o=e.generatedColumn,a=i.generatedColumn,s>n||s==n&&a>=o||r.compareByGeneratedPositionsInflated(e,i)<=0?(this._last=t,this._array.push(t)):(this._sorted=!1,this._array.push(t))},n.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},i=n})),parcelRequire.register(\"lLalb\",(function(t,e){var i;$parcel$export(t.exports,\"SourceMapConsumer\",(()=>i),(t=>i=t));var r=parcelRequire(\"6I6y5\"),n=parcelRequire(\"lntwO\"),s=parcelRequire(\"kKGit\").ArraySet,o=parcelRequire(\"f30X9\"),a=parcelRequire(\"flTmO\").quickSort;function l(t,e){var i=t;return\"string\"==typeof t&&(i=r.parseSourceMapInput(t)),null!=i.sections?new u(i,e):new h(i,e)}function h(t,e){var i=t;\"string\"==typeof t&&(i=r.parseSourceMapInput(t));var n=r.getArg(i,\"version\"),o=r.getArg(i,\"sources\"),a=r.getArg(i,\"names\",[]),l=r.getArg(i,\"sourceRoot\",null),h=r.getArg(i,\"sourcesContent\",null),c=r.getArg(i,\"mappings\"),u=r.getArg(i,\"file\",null);if(n!=this._version)throw new Error(\"Unsupported version: \"+n);l&&(l=r.normalize(l)),o=o.map(String).map(r.normalize).map((function(t){return l&&r.isAbsolute(l)&&r.isAbsolute(t)?r.relative(l,t):t})),this._names=s.fromArray(a.map(String),!0),this._sources=s.fromArray(o,!0),this._absoluteSources=this._sources.toArray().map((function(t){return r.computeSourceURL(l,t,e)})),this.sourceRoot=l,this.sourcesContent=h,this._mappings=c,this._sourceMapURL=e,this.file=u}function c(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function u(t,e){var i=t;\"string\"==typeof t&&(i=r.parseSourceMapInput(t));var n=r.getArg(i,\"version\"),o=r.getArg(i,\"sections\");if(n!=this._version)throw new Error(\"Unsupported version: \"+n);this._sources=new s,this._names=new s;var a={line:-1,column:0};this._sections=o.map((function(t){if(t.url)throw new Error(\"Support for url field in sections not implemented.\");var i=r.getArg(t,\"offset\"),n=r.getArg(i,\"line\"),s=r.getArg(i,\"column\");if(n<a.line||n===a.line&&s<a.column)throw new Error(\"Section offsets must be ordered and non-overlapping.\");return a=i,{generatedOffset:{generatedLine:n+1,generatedColumn:s+1},consumer:new l(r.getArg(t,\"map\"),e)}}))}l.fromSourceMap=function(t,e){return h.fromSourceMap(t,e)},l.prototype._version=3,l.prototype.__generatedMappings=null,Object.defineProperty(l.prototype,\"_generatedMappings\",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),l.prototype.__originalMappings=null,Object.defineProperty(l.prototype,\"_originalMappings\",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),l.prototype._charIsMappingSeparator=function(t,e){var i=t.charAt(e);return\";\"===i||\",\"===i},l.prototype._parseMappings=function(t,e){throw new Error(\"Subclasses must implement _parseMappings\")},l.GENERATED_ORDER=1,l.ORIGINAL_ORDER=2,l.GREATEST_LOWER_BOUND=1,l.LEAST_UPPER_BOUND=2,l.prototype.eachMapping=function(t,e,i){var n,s=e||null;switch(i||l.GENERATED_ORDER){case l.GENERATED_ORDER:n=this._generatedMappings;break;case l.ORIGINAL_ORDER:n=this._originalMappings;break;default:throw new Error(\"Unknown order of iteration.\")}var o=this.sourceRoot;n.map((function(t){var e=null===t.source?null:this._sources.at(t.source);return{source:e=r.computeSourceURL(o,e,this._sourceMapURL),generatedLine:t.generatedLine,generatedColumn:t.generatedColumn,originalLine:t.originalLine,originalColumn:t.originalColumn,name:null===t.name?null:this._names.at(t.name)}}),this).forEach(t,s)},l.prototype.allGeneratedPositionsFor=function(t){var e=r.getArg(t,\"line\"),i={source:r.getArg(t,\"source\"),originalLine:e,originalColumn:r.getArg(t,\"column\",0)};if(i.source=this._findSourceIndex(i.source),i.source<0)return[];var s=[],o=this._findMapping(i,this._originalMappings,\"originalLine\",\"originalColumn\",r.compareByOriginalPositions,n.LEAST_UPPER_BOUND);if(o>=0){var a=this._originalMappings[o];if(void 0===t.column)for(var l=a.originalLine;a&&a.originalLine===l;)s.push({line:r.getArg(a,\"generatedLine\",null),column:r.getArg(a,\"generatedColumn\",null),lastColumn:r.getArg(a,\"lastGeneratedColumn\",null)}),a=this._originalMappings[++o];else for(var h=a.originalColumn;a&&a.originalLine===e&&a.originalColumn==h;)s.push({line:r.getArg(a,\"generatedLine\",null),column:r.getArg(a,\"generatedColumn\",null),lastColumn:r.getArg(a,\"lastGeneratedColumn\",null)}),a=this._originalMappings[++o]}return s},i=l,h.prototype=Object.create(l.prototype),h.prototype.consumer=l,h.prototype._findSourceIndex=function(t){var e,i=t;if(null!=this.sourceRoot&&(i=r.relative(this.sourceRoot,i)),this._sources.has(i))return this._sources.indexOf(i);for(e=0;e<this._absoluteSources.length;++e)if(this._absoluteSources[e]==t)return e;return-1},h.fromSourceMap=function(t,e){var i=Object.create(h.prototype),n=i._names=s.fromArray(t._names.toArray(),!0),o=i._sources=s.fromArray(t._sources.toArray(),!0);i.sourceRoot=t._sourceRoot,i.sourcesContent=t._generateSourcesContent(i._sources.toArray(),i.sourceRoot),i.file=t._file,i._sourceMapURL=e,i._absoluteSources=i._sources.toArray().map((function(t){return r.computeSourceURL(i.sourceRoot,t,e)}));for(var l=t._mappings.toArray().slice(),u=i.__generatedMappings=[],p=i.__originalMappings=[],f=0,d=l.length;f<d;f++){var g=l[f],m=new c;m.generatedLine=g.generatedLine,m.generatedColumn=g.generatedColumn,g.source&&(m.source=o.indexOf(g.source),m.originalLine=g.originalLine,m.originalColumn=g.originalColumn,g.name&&(m.name=n.indexOf(g.name)),p.push(m)),u.push(m)}return a(i.__originalMappings,r.compareByOriginalPositions),i},h.prototype._version=3,Object.defineProperty(h.prototype,\"sources\",{get:function(){return this._absoluteSources.slice()}}),h.prototype._parseMappings=function(t,e){for(var i,n,s,l,h,u=1,p=0,f=0,d=0,g=0,m=0,v=t.length,y=0,x={},_={},b=[],C=[];y<v;)if(\";\"===t.charAt(y))u++,y++,p=0;else if(\",\"===t.charAt(y))y++;else{for((i=new c).generatedLine=u,l=y;l<v&&!this._charIsMappingSeparator(t,l);l++);if(s=x[n=t.slice(y,l)])y+=n.length;else{for(s=[];y<l;)o.decode(t,y,_),h=_.value,y=_.rest,s.push(h);if(2===s.length)throw new Error(\"Found a source, but no line and column\");if(3===s.length)throw new Error(\"Found a source and line, but no column\");x[n]=s}i.generatedColumn=p+s[0],p=i.generatedColumn,s.length>1&&(i.source=g+s[1],g+=s[1],i.originalLine=f+s[2],f=i.originalLine,i.originalLine+=1,i.originalColumn=d+s[3],d=i.originalColumn,s.length>4&&(i.name=m+s[4],m+=s[4])),C.push(i),\"number\"==typeof i.originalLine&&b.push(i)}a(C,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=C,a(b,r.compareByOriginalPositions),this.__originalMappings=b},h.prototype._findMapping=function(t,e,i,r,s,o){if(t[i]<=0)throw new TypeError(\"Line must be greater than or equal to 1, got \"+t[i]);if(t[r]<0)throw new TypeError(\"Column must be greater than or equal to 0, got \"+t[r]);return n.search(t,e,s,o)},h.prototype.computeColumnSpans=function(){for(var t=0;t<this._generatedMappings.length;++t){var e=this._generatedMappings[t];if(t+1<this._generatedMappings.length){var i=this._generatedMappings[t+1];if(e.generatedLine===i.generatedLine){e.lastGeneratedColumn=i.generatedColumn-1;continue}}e.lastGeneratedColumn=1/0}},h.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,\"line\"),generatedColumn:r.getArg(t,\"column\")},i=this._findMapping(e,this._generatedMappings,\"generatedLine\",\"generatedColumn\",r.compareByGeneratedPositionsDeflated,r.getArg(t,\"bias\",l.GREATEST_LOWER_BOUND));if(i>=0){var n=this._generatedMappings[i];if(n.generatedLine===e.generatedLine){var s=r.getArg(n,\"source\",null);null!==s&&(s=this._sources.at(s),s=r.computeSourceURL(this.sourceRoot,s,this._sourceMapURL));var o=r.getArg(n,\"name\",null);return null!==o&&(o=this._names.at(o)),{source:s,line:r.getArg(n,\"originalLine\",null),column:r.getArg(n,\"originalColumn\",null),name:o}}}return{source:null,line:null,column:null,name:null}},h.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(t){return null==t})))},h.prototype.sourceContentFor=function(t,e){if(!this.sourcesContent)return null;var i=this._findSourceIndex(t);if(i>=0)return this.sourcesContent[i];var n,s=t;if(null!=this.sourceRoot&&(s=r.relative(this.sourceRoot,s)),null!=this.sourceRoot&&(n=r.urlParse(this.sourceRoot))){var o=s.replace(/^file:\\/\\//,\"\");if(\"file\"==n.scheme&&this._sources.has(o))return this.sourcesContent[this._sources.indexOf(o)];if((!n.path||\"/\"==n.path)&&this._sources.has(\"/\"+s))return this.sourcesContent[this._sources.indexOf(\"/\"+s)]}if(e)return null;throw new Error('\"'+s+'\" is not in the SourceMap.')},h.prototype.generatedPositionFor=function(t){var e=r.getArg(t,\"source\");if((e=this._findSourceIndex(e))<0)return{line:null,column:null,lastColumn:null};var i={source:e,originalLine:r.getArg(t,\"line\"),originalColumn:r.getArg(t,\"column\")},n=this._findMapping(i,this._originalMappings,\"originalLine\",\"originalColumn\",r.compareByOriginalPositions,r.getArg(t,\"bias\",l.GREATEST_LOWER_BOUND));if(n>=0){var s=this._originalMappings[n];if(s.source===i.source)return{line:r.getArg(s,\"generatedLine\",null),column:r.getArg(s,\"generatedColumn\",null),lastColumn:r.getArg(s,\"lastGeneratedColumn\",null)}}return{line:null,column:null,lastColumn:null}},u.prototype=Object.create(l.prototype),u.prototype.constructor=l,u.prototype._version=3,Object.defineProperty(u.prototype,\"sources\",{get:function(){for(var t=[],e=0;e<this._sections.length;e++)for(var i=0;i<this._sections[e].consumer.sources.length;i++)t.push(this._sections[e].consumer.sources[i]);return t}}),u.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,\"line\"),generatedColumn:r.getArg(t,\"column\")},i=n.search(e,this._sections,(function(t,e){var i=t.generatedLine-e.generatedOffset.generatedLine;return i||t.generatedColumn-e.generatedOffset.generatedColumn})),s=this._sections[i];return s?s.consumer.originalPositionFor({line:e.generatedLine-(s.generatedOffset.generatedLine-1),column:e.generatedColumn-(s.generatedOffset.generatedLine===e.generatedLine?s.generatedOffset.generatedColumn-1:0),bias:t.bias}):{source:null,line:null,column:null,name:null}},u.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(t){return t.consumer.hasContentsOfAllSources()}))},u.prototype.sourceContentFor=function(t,e){for(var i=0;i<this._sections.length;i++){var r=this._sections[i].consumer.sourceContentFor(t,!0);if(r)return r}if(e)return null;throw new Error('\"'+t+'\" is not in the SourceMap.')},u.prototype.generatedPositionFor=function(t){for(var e=0;e<this._sections.length;e++){var i=this._sections[e];if(-1!==i.consumer._findSourceIndex(r.getArg(t,\"source\"))){var n=i.consumer.generatedPositionFor(t);if(n)return{line:n.line+(i.generatedOffset.generatedLine-1),column:n.column+(i.generatedOffset.generatedLine===n.line?i.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},u.prototype._parseMappings=function(t,e){this.__generatedMappings=[],this.__originalMappings=[];for(var i=0;i<this._sections.length;i++)for(var n=this._sections[i],s=n.consumer._generatedMappings,o=0;o<s.length;o++){var l=s[o],h=n.consumer._sources.at(l.source);h=r.computeSourceURL(n.consumer.sourceRoot,h,this._sourceMapURL),this._sources.add(h),h=this._sources.indexOf(h);var c=null;l.name&&(c=n.consumer._names.at(l.name),this._names.add(c),c=this._names.indexOf(c));var u={source:h,generatedLine:l.generatedLine+(n.generatedOffset.generatedLine-1),generatedColumn:l.generatedColumn+(n.generatedOffset.generatedLine===l.generatedLine?n.generatedOffset.generatedColumn-1:0),originalLine:l.originalLine,originalColumn:l.originalColumn,name:c};this.__generatedMappings.push(u),\"number\"==typeof u.originalLine&&this.__originalMappings.push(u)}a(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),a(this.__originalMappings,r.compareByOriginalPositions)}})),parcelRequire.register(\"lntwO\",(function(t,e){var i,r,n;function s(t,e,i,n,o,a){var l=Math.floor((e-t)/2)+t,h=o(i,n[l],!0);return 0===h?l:h>0?e-l>1?s(l,e,i,n,o,a):a==r?e<n.length?e:-1:l:l-t>1?s(t,l,i,n,o,a):a==r?l:t<0?-1:t}$parcel$export(t.exports,\"GREATEST_LOWER_BOUND\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"LEAST_UPPER_BOUND\",(()=>r),(t=>r=t)),$parcel$export(t.exports,\"search\",(()=>n),(t=>n=t)),i=1,r=2,n=function(t,e,r,n){if(0===e.length)return-1;var o=s(-1,e.length,t,e,r,n||i);if(o<0)return-1;for(;o-1>=0&&0===r(e[o],e[o-1],!0);)--o;return o}})),parcelRequire.register(\"flTmO\",(function(t,e){var i;function r(t,e,i){var r=t[e];t[e]=t[i],t[i]=r}function n(t,e,i,s){if(i<s){var o=i-1;r(t,(c=i,u=s,Math.round(c+Math.random()*(u-c))),s);for(var a=t[s],l=i;l<s;l++)e(t[l],a)<=0&&r(t,o+=1,l);r(t,o+1,l);var h=o+1;n(t,e,i,h-1),n(t,e,h+1,s)}var c,u}$parcel$export(t.exports,\"quickSort\",(()=>i),(t=>i=t)),i=function(t,e){n(t,e,0,t.length-1)}})),parcelRequire.register(\"jtIqc\",(function(t,e){var i;$parcel$export(t.exports,\"SourceNode\",(()=>i),(t=>i=t));var r=parcelRequire(\"h712z\").SourceMapGenerator,n=parcelRequire(\"6I6y5\"),s=/(\\r?\\n)/;function o(t,e,i,r,n){this.children=[],this.sourceContents={},this.line=null==t?null:t,this.column=null==e?null:e,this.source=null==i?null:i,this.name=null==n?null:n,this.$$$isSourceNode$$$=!0,null!=r&&this.add(r)}o.fromStringWithSourceMap=function(t,e,i){var r=new o,a=t.split(s),l=0,h=function(){return t()+(t()||\"\");function t(){return l<a.length?a[l++]:void 0}},c=1,u=0,p=null;return e.eachMapping((function(t){if(null!==p){if(!(c<t.generatedLine)){var e=(i=a[l]||\"\").substr(0,t.generatedColumn-u);return a[l]=i.substr(t.generatedColumn-u),u=t.generatedColumn,f(p,e),void(p=t)}f(p,h()),c++,u=0}for(;c<t.generatedLine;)r.add(h()),c++;if(u<t.generatedColumn){var i=a[l]||\"\";r.add(i.substr(0,t.generatedColumn)),a[l]=i.substr(t.generatedColumn),u=t.generatedColumn}p=t}),this),l<a.length&&(p&&f(p,h()),r.add(a.splice(l).join(\"\"))),e.sources.forEach((function(t){var s=e.sourceContentFor(t);null!=s&&(null!=i&&(t=n.join(i,t)),r.setSourceContent(t,s))})),r;function f(t,e){if(null===t||void 0===t.source)r.add(e);else{var s=i?n.join(i,t.source):t.source;r.add(new o(t.originalLine,t.originalColumn,s,e,t.name))}}},o.prototype.add=function(t){if(Array.isArray(t))t.forEach((function(t){this.add(t)}),this);else{if(!t.$$$isSourceNode$$$&&\"string\"!=typeof t)throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"+t);t&&this.children.push(t)}return this},o.prototype.prepend=function(t){if(Array.isArray(t))for(var e=t.length-1;e>=0;e--)this.prepend(t[e]);else{if(!t.$$$isSourceNode$$$&&\"string\"!=typeof t)throw new TypeError(\"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \"+t);this.children.unshift(t)}return this},o.prototype.walk=function(t){for(var e,i=0,r=this.children.length;i<r;i++)(e=this.children[i]).$$$isSourceNode$$$?e.walk(t):\"\"!==e&&t(e,{source:this.source,line:this.line,column:this.column,name:this.name})},o.prototype.join=function(t){var e,i,r=this.children.length;if(r>0){for(e=[],i=0;i<r-1;i++)e.push(this.children[i]),e.push(t);e.push(this.children[i]),this.children=e}return this},o.prototype.replaceRight=function(t,e){var i=this.children[this.children.length-1];return i.$$$isSourceNode$$$?i.replaceRight(t,e):\"string\"==typeof i?this.children[this.children.length-1]=i.replace(t,e):this.children.push(\"\".replace(t,e)),this},o.prototype.setSourceContent=function(t,e){this.sourceContents[n.toSetString(t)]=e},o.prototype.walkSourceContents=function(t){for(var e=0,i=this.children.length;e<i;e++)this.children[e].$$$isSourceNode$$$&&this.children[e].walkSourceContents(t);var r=Object.keys(this.sourceContents);for(e=0,i=r.length;e<i;e++)t(n.fromSetString(r[e]),this.sourceContents[r[e]])},o.prototype.toString=function(){var t=\"\";return this.walk((function(e){t+=e})),t},o.prototype.toStringWithSourceMap=function(t){var e={code:\"\",line:1,column:0},i=new r(t),n=!1,s=null,o=null,a=null,l=null;return this.walk((function(t,r){e.code+=t,null!==r.source&&null!==r.line&&null!==r.column?(s===r.source&&o===r.line&&a===r.column&&l===r.name||i.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name}),s=r.source,o=r.line,a=r.column,l=r.name,n=!0):n&&(i.addMapping({generated:{line:e.line,column:e.column}}),s=null,n=!1);for(var h=0,c=t.length;h<c;h++)10===t.charCodeAt(h)?(e.line++,e.column=0,h+1===c?(s=null,n=!1):n&&i.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name})):e.column++})),this.walkSourceContents((function(t,e){i.setSourceContent(t,e)})),{code:e.code,map:i}},i=o})),parcelRequire.register(\"3Zx46\",(function(t,e){var i,r;$parcel$export(t.exports,\"print\",(()=>i),(t=>i=t)),$parcel$export(t.exports,\"PrintVisitor\",(()=>r),(t=>r=t)),i=function(t){return(new a).accept(t)},r=a;var n,s=parcelRequire(\"fzfDi\"),o=(n=s)&&n.__esModule?n:{default:n};function a(){this.padding=0}a.prototype=new o.default,a.prototype.pad=function(t){for(var e=\"\",i=0,r=this.padding;i<r;i++)e+=\"  \";return e+=t+\"\\n\"},a.prototype.Program=function(t){var e=\"\",i=t.body,r=void 0,n=void 0;if(t.blockParams){var s=\"BLOCK PARAMS: [\";for(r=0,n=t.blockParams.length;r<n;r++)s+=\" \"+t.blockParams[r];s+=\" ]\",e+=this.pad(s)}for(r=0,n=i.length;r<n;r++)e+=this.accept(i[r]);return this.padding--,e},a.prototype.MustacheStatement=function(t){return this.pad(\"{{ \"+this.SubExpression(t)+\" }}\")},a.prototype.Decorator=function(t){return this.pad(\"{{ DIRECTIVE \"+this.SubExpression(t)+\" }}\")},a.prototype.BlockStatement=a.prototype.DecoratorBlock=function(t){var e=\"\";return e+=this.pad((\"DecoratorBlock\"===t.type?\"DIRECTIVE \":\"\")+\"BLOCK:\"),this.padding++,e+=this.pad(this.SubExpression(t)),t.program&&(e+=this.pad(\"PROGRAM:\"),this.padding++,e+=this.accept(t.program),this.padding--),t.inverse&&(t.program&&this.padding++,e+=this.pad(\"{{^}}\"),this.padding++,e+=this.accept(t.inverse),this.padding--,t.program&&this.padding--),this.padding--,e},a.prototype.PartialStatement=function(t){var e=\"PARTIAL:\"+t.name.original;return t.params[0]&&(e+=\" \"+this.accept(t.params[0])),t.hash&&(e+=\" \"+this.accept(t.hash)),this.pad(\"{{> \"+e+\" }}\")},a.prototype.PartialBlockStatement=function(t){var e=\"PARTIAL BLOCK:\"+t.name.original;return t.params[0]&&(e+=\" \"+this.accept(t.params[0])),t.hash&&(e+=\" \"+this.accept(t.hash)),e+=\" \"+this.pad(\"PROGRAM:\"),this.padding++,e+=this.accept(t.program),this.padding--,this.pad(\"{{> \"+e+\" }}\")},a.prototype.ContentStatement=function(t){return this.pad(\"CONTENT[ '\"+t.value+\"' ]\")},a.prototype.CommentStatement=function(t){return this.pad(\"{{! '\"+t.value+\"' }}\")},a.prototype.SubExpression=function(t){for(var e,i=t.params,r=[],n=0,s=i.length;n<s;n++)r.push(this.accept(i[n]));return i=\"[\"+r.join(\", \")+\"]\",e=t.hash?\" \"+this.accept(t.hash):\"\",this.accept(t.path)+\" \"+i+e},a.prototype.PathExpression=function(t){var e=t.parts.join(\"/\");return(t.data?\"@\":\"\")+\"PATH:\"+e},a.prototype.StringLiteral=function(t){return'\"'+t.value+'\"'},a.prototype.NumberLiteral=function(t){return\"NUMBER{\"+t.value+\"}\"},a.prototype.BooleanLiteral=function(t){return\"BOOLEAN{\"+t.value+\"}\"},a.prototype.UndefinedLiteral=function(){return\"UNDEFINED\"},a.prototype.NullLiteral=function(){return\"NULL\"},a.prototype.Hash=function(t){for(var e=t.pairs,i=[],r=0,n=e.length;r<n;r++)i.push(this.accept(e[r]));return\"HASH{\"+i.join(\", \")+\"}\"},a.prototype.HashPair=function(t){return t.key+\"=\"+this.accept(t.value)}})),parcelRequire.register(\"gXZrF\",(function(t,e){})),parcelRequire.register(\"fiPkb\",(function(t,e){$parcel$export(t.exports,\"MAP_DISPLAYED_STATEKEY\",(()=>l)),$parcel$export(t.exports,\"default\",(()=>h));var i=parcelRequire(\"jmD4K\"),r=parcelRequire(\"93bu7\"),n=parcelRequire(\"cI9Lu\"),s=parcelRequire(\"67nOO\");const o=\"currentPassagePid\",a=\"lastPassagePid\",l=\"mapDisplayed\";var h=class{constructor(t){const e=t.getAttribute(\"name\"),h=t.getAttribute(\"ifid\"),c=t.getAttribute(\"startnode\");if(!e)throw new Error(\"Story is missing a name!\");if(!h)throw new Error(\"Story is missing an ifid!\");if(!c)throw new Error(\"No startnode specified!\");this.name=e,this.ifid=h,this.startnode=c,this.format=t.getAttribute(\"format\"),this.formatVersion=t.getAttribute(\"format-version\"),this.zoom=t.getAttribute(\"zoom\"),this.creator=t.getAttribute(\"creator\"),this.creatorVersion=t.getAttribute(\"creator-version\"),this.canvasMap=new(0,s.default),this.renderer=new(0,n.default)(this),this.state=new(0,r.default)({[o]:c,[a]:null,[l]:!1});const u=[],p=t.querySelectorAll(\"tw-passagedata\");Array.from(p).forEach((t=>{const e=new(0,i.default)(t);if(\"MapDefaults\"===e.name){let t;try{t=JSON.parse(e.rawContent),this.canvasMap.setDefaultMapData(t)}catch(t){throw new Error(\"Malformed default map data!\")}}e.tags.includes(\"map\")&&this.canvasMap.addMap({map:e.rawContent,name:e.name}),\"StorySetup\"===e.name&&this.renderer.render(e.rawContent),u.push(e)})),this.passages=u}get currentPassage(){const t=this.getPassageByPid(this.state.get(o));if(!t)throw new Error(\"Tried to fetch currentPassage but it doesn't exist!\");return t}getPassageByPid(t){return this.passages.find((e=>e.pid===t))||null}getPassageByName(t){return this.passages.find((e=>e.name===t))||null}displayPassage(t,e,i){let r;if(\"string\"==typeof t){const e=this.getPassageByPid(t);if(!e)throw new Error(`Tried to display passage with pid: ${t}, but it doesn't exist!`);r=e}else r=t;this.state.set(l,!1),this.state.set(a,this.state.get(o)),this.state.set(o,r.pid);const n=this.renderer.render(r.richContent);if(e.classList.remove(\"run-anim\"),e.innerHTML=\"\",setTimeout((()=>{e.classList.add(\"run-anim\"),e.innerHTML=n}),1),this.state.get(l)||this.canvasMap.clear(),i){const t=i.querySelector(\".buttons\"),e=i.querySelector(\".directionals\");if(t){t.innerHTML=\"\";const i=[...r.links];if(i.length||i.push({alias:\"empty\",passageName:\"empty\"}),i.forEach((e=>{const i=document.createElement(\"button\");i.innerHTML=e.alias,i.dataset.passageName=e.passageName,t.appendChild(i)})),e){const t=[...e.querySelectorAll(\"button\")];t.forEach((t=>{t.disabled=!0,t.dataset.passageName=\"\"})),r.directionalLinks&&r.directionalLinks.forEach((e=>{const i=t.find((t=>t.classList.contains(e.alias.toLowerCase())));i?(i.disabled=!1,i.dataset.passageName=e.passageName):console.warn(`Tried to set up a directional called ${e.alias.toLowerCase()}, but that button wasn't found.`)}))}}}}displayCurrentPassage(t,e){this.displayPassage(this.currentPassage,t,e)}}})),parcelRequire.register(\"jmD4K\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>n));var i=parcelRequire(\"4VxIC\"),r=parcelRequire(\"6F9ZT\");var n=class{constructor(t){const e=t.getAttribute(\"pid\"),i=t.getAttribute(\"name\");if(!e)throw new Error(`A passage (name: ${i}) is missing a pid!`);if(!i)throw new Error(`A passage with pid ${e} is missing a name!`);const n=t.getAttribute(\"tags\"),s=t.getAttribute(\"position\"),o=t.getAttribute(\"size\"),a=t.innerHTML,l=n?.split(\" \")||[],h={x:0,y:0};if(s){const t=s.split(\",\").map((t=>parseFloat(t)));h.x=t[0],h.y=t[1]}const c={width:100,height:100};if(o){const t=o.split(\",\").map((t=>parseFloat(t)));c.width=t[0],c.height=t[1]}this.pid=e,this.name=i,this.tags=l,this.position=h,this.size=c,this.rawContent=a;const{links:u,directionalLinks:p,content:f}=(0,r.extractLinks)(a);this.rawContentWithoutLinks=f,this.links=u,this.directionalLinks=p}get richContent(){const t=(0,r.unescape)(this.rawContentWithoutLinks),e=i.marked.parse(t);return(0,r.fixHandlebarsAttributeQuotes)(e)}}})),parcelRequire.register(\"4VxIC\",(function(t,e){t.exports,function(t){\"use strict\";function e(t,e){for(var i=0;i<e.length;i++){var r=e[i];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function i(t,i,r){return i&&e(t.prototype,i),r&&e(t,r),Object.defineProperty(t,\"prototype\",{writable:!1}),t}function r(t,e){if(t){if(\"string\"==typeof t)return n(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return\"Object\"===i&&t.constructor&&(i=t.constructor.name),\"Map\"===i||\"Set\"===i?Array.from(t):\"Arguments\"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?n(t,e):void 0}}function n(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,r=new Array(e);i<e;i++)r[i]=t[i];return r}function s(t,e){var i=\"undefined\"!=typeof Symbol&&t[Symbol.iterator]||t[\"@@iterator\"];if(i)return(i=i.call(t)).next.bind(i);if(Array.isArray(t)||(i=r(t))||e&&t&&\"number\"==typeof t.length){i&&(t=i);var n=0;return function(){return n>=t.length?{done:!0}:{done:!1,value:t[n++]}}}throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\")}function o(){return{async:!1,baseUrl:null,breaks:!1,extensions:null,gfm:!0,headerIds:!0,headerPrefix:\"\",highlight:null,langPrefix:\"language-\",mangle:!0,pedantic:!1,renderer:null,sanitize:!1,sanitizer:null,silent:!1,smartLists:!1,smartypants:!1,tokenizer:null,walkTokens:null,xhtml:!1}}function a(e){t.defaults=e}t.defaults=o();var l=/[&<>\"']/,h=/[&<>\"']/g,c=/[<>\"']|&(?!#?\\w+;)/,u=/[<>\"']|&(?!#?\\w+;)/g,p={\"&\":\"&amp;\",\"<\":\"&lt;\",\">\":\"&gt;\",'\"':\"&quot;\",\"'\":\"&#39;\"},f=function(t){return p[t]};function d(t,e){if(e){if(l.test(t))return t.replace(h,f)}else if(c.test(t))return t.replace(u,f);return t}var g=/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/gi;function m(t){return t.replace(g,(function(t,e){return\"colon\"===(e=e.toLowerCase())?\":\":\"#\"===e.charAt(0)?\"x\"===e.charAt(1)?String.fromCharCode(parseInt(e.substring(2),16)):String.fromCharCode(+e.substring(1)):\"\"}))}var v=/(^|[^\\[])\\^/g;function y(t,e){t=\"string\"==typeof t?t:t.source,e=e||\"\";var i={replace:function(e,r){return r=(r=r.source||r).replace(v,\"$1\"),t=t.replace(e,r),i},getRegex:function(){return new RegExp(t,e)}};return i}var x=/[^\\w:]/g,_=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function b(t,e,i){if(t){var r;try{r=decodeURIComponent(m(i)).replace(x,\"\").toLowerCase()}catch(t){return null}if(0===r.indexOf(\"javascript:\")||0===r.indexOf(\"vbscript:\")||0===r.indexOf(\"data:\"))return null}e&&!_.test(i)&&(i=k(e,i));try{i=encodeURI(i).replace(/%25/g,\"%\")}catch(t){return null}return i}var C={},S=/^[^:]+:\\/*[^/]*$/,w=/^([^:]+:)[\\s\\S]*$/,D=/^([^:]+:\\/*[^/]*)[\\s\\S]*$/;function k(t,e){C[\" \"+t]||(S.test(t)?C[\" \"+t]=t+\"/\":C[\" \"+t]=O(t,\"/\",!0));var i=-1===(t=C[\" \"+t]).indexOf(\":\");return\"//\"===e.substring(0,2)?i?e:t.replace(w,\"$1\")+e:\"/\"===e.charAt(0)?i?e:t.replace(D,\"$1\")+e:t+e}var T={exec:function(){}};function E(t){for(var e,i,r=1;r<arguments.length;r++)for(i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}function A(t,e){var i=t.replace(/\\|/g,(function(t,e,i){for(var r=!1,n=e;--n>=0&&\"\\\\\"===i[n];)r=!r;return r?\"|\":\" |\"})).split(/ \\|/),r=0;if(i[0].trim()||i.shift(),i.length>0&&!i[i.length-1].trim()&&i.pop(),i.length>e)i.splice(e);else for(;i.length<e;)i.push(\"\");for(;r<i.length;r++)i[r]=i[r].trim().replace(/\\\\\\|/g,\"|\");return i}function O(t,e,i){var r=t.length;if(0===r)return\"\";for(var n=0;n<r;){var s=t.charAt(r-n-1);if(s!==e||i){if(s===e||!i)break;n++}else n++}return t.slice(0,r-n)}function P(t,e){if(-1===t.indexOf(e[1]))return-1;for(var i=t.length,r=0,n=0;n<i;n++)if(\"\\\\\"===t[n])n++;else if(t[n]===e[0])r++;else if(t[n]===e[1]&&--r<0)return n;return-1}function F(t){t&&t.sanitize&&!t.silent&&console.warn(\"marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options\")}function M(t,e){if(e<1)return\"\";for(var i=\"\";e>1;)1&e&&(i+=t),e>>=1,t+=t;return i+t}function L(t,e,i,r){var n=e.href,s=e.title?d(e.title):null,o=t[1].replace(/\\\\([\\[\\]])/g,\"$1\");if(\"!\"!==t[0].charAt(0)){r.state.inLink=!0;var a={type:\"link\",raw:i,href:n,title:s,text:o,tokens:r.inlineTokens(o)};return r.state.inLink=!1,a}return{type:\"image\",raw:i,href:n,title:s,text:d(o)}}function R(t,e){var i=t.match(/^(\\s+)(?:```)/);if(null===i)return e;var r=i[1];return e.split(\"\\n\").map((function(t){var e=t.match(/^\\s+/);return null===e?t:e[0].length>=r.length?t.slice(r.length):t})).join(\"\\n\")}var B=function(){function e(e){this.options=e||t.defaults}var i=e.prototype;return i.space=function(t){var e=this.rules.block.newline.exec(t);if(e&&e[0].length>0)return{type:\"space\",raw:e[0]}},i.code=function(t){var e=this.rules.block.code.exec(t);if(e){var i=e[0].replace(/^ {1,4}/gm,\"\");return{type:\"code\",raw:e[0],codeBlockStyle:\"indented\",text:this.options.pedantic?i:O(i,\"\\n\")}}},i.fences=function(t){var e=this.rules.block.fences.exec(t);if(e){var i=e[0],r=R(i,e[3]||\"\");return{type:\"code\",raw:i,lang:e[2]?e[2].trim():e[2],text:r}}},i.heading=function(t){var e=this.rules.block.heading.exec(t);if(e){var i=e[2].trim();if(/#$/.test(i)){var r=O(i,\"#\");this.options.pedantic?i=r.trim():r&&!/ $/.test(r)||(i=r.trim())}return{type:\"heading\",raw:e[0],depth:e[1].length,text:i,tokens:this.lexer.inline(i)}}},i.hr=function(t){var e=this.rules.block.hr.exec(t);if(e)return{type:\"hr\",raw:e[0]}},i.blockquote=function(t){var e=this.rules.block.blockquote.exec(t);if(e){var i=e[0].replace(/^ *>[ \\t]?/gm,\"\");return{type:\"blockquote\",raw:e[0],tokens:this.lexer.blockTokens(i,[]),text:i}}},i.list=function(t){var e=this.rules.block.list.exec(t);if(e){var i,r,n,o,a,l,h,c,u,p,f,d,g=e[1].trim(),m=g.length>1,v={type:\"list\",raw:\"\",ordered:m,start:m?+g.slice(0,-1):\"\",loose:!1,items:[]};g=m?\"\\\\d{1,9}\\\\\"+g.slice(-1):\"\\\\\"+g,this.options.pedantic&&(g=m?g:\"[*+-]\");for(var y=new RegExp(\"^( {0,3}\"+g+\")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\");t&&(d=!1,e=y.exec(t))&&!this.rules.block.hr.test(t);){if(i=e[0],t=t.substring(i.length),c=e[2].split(\"\\n\",1)[0],u=t.split(\"\\n\",1)[0],this.options.pedantic?(o=2,f=c.trimLeft()):(o=(o=e[2].search(/[^ ]/))>4?1:o,f=c.slice(o),o+=e[1].length),l=!1,!c&&/^ *$/.test(u)&&(i+=u+\"\\n\",t=t.substring(u.length+1),d=!0),!d)for(var x=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}(?:[*+-]|\\\\d{1,9}[.)])((?: [^\\\\n]*)?(?:\\\\n|$))\"),_=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"),b=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}(?:```|~~~)\"),C=new RegExp(\"^ {0,\"+Math.min(3,o-1)+\"}#\");t&&(c=p=t.split(\"\\n\",1)[0],this.options.pedantic&&(c=c.replace(/^ {1,4}(?=( {4})*[^ ])/g,\"  \")),!b.test(c))&&!C.test(c)&&!x.test(c)&&!_.test(t);){if(c.search(/[^ ]/)>=o||!c.trim())f+=\"\\n\"+c.slice(o);else{if(l)break;f+=\"\\n\"+c}l||c.trim()||(l=!0),i+=p+\"\\n\",t=t.substring(p.length+1)}v.loose||(h?v.loose=!0:/\\n *\\n *$/.test(i)&&(h=!0)),this.options.gfm&&(r=/^\\[[ xX]\\] /.exec(f))&&(n=\"[ ] \"!==r[0],f=f.replace(/^\\[[ xX]\\] +/,\"\")),v.items.push({type:\"list_item\",raw:i,task:!!r,checked:n,loose:!1,text:f}),v.raw+=i}v.items[v.items.length-1].raw=i.trimRight(),v.items[v.items.length-1].text=f.trimRight(),v.raw=v.raw.trimRight();var S=v.items.length;for(a=0;a<S;a++){this.lexer.state.top=!1,v.items[a].tokens=this.lexer.blockTokens(v.items[a].text,[]);var w=v.items[a].tokens.filter((function(t){return\"space\"===t.type})),D=w.every((function(t){for(var e,i=0,r=s(t.raw.split(\"\"));!(e=r()).done;)if(\"\\n\"===e.value&&(i+=1),i>1)return!0;return!1}));!v.loose&&w.length&&D&&(v.loose=!0,v.items[a].loose=!0)}return v}},i.html=function(t){var e=this.rules.block.html.exec(t);if(e){var i={type:\"html\",raw:e[0],pre:!this.options.sanitizer&&(\"pre\"===e[1]||\"script\"===e[1]||\"style\"===e[1]),text:e[0]};if(this.options.sanitize){var r=this.options.sanitizer?this.options.sanitizer(e[0]):d(e[0]);i.type=\"paragraph\",i.text=r,i.tokens=this.lexer.inline(r)}return i}},i.def=function(t){var e=this.rules.block.def.exec(t);if(e)return e[3]&&(e[3]=e[3].substring(1,e[3].length-1)),{type:\"def\",tag:e[1].toLowerCase().replace(/\\s+/g,\" \"),raw:e[0],href:e[2],title:e[3]}},i.table=function(t){var e=this.rules.block.table.exec(t);if(e){var i={type:\"table\",header:A(e[1]).map((function(t){return{text:t}})),align:e[2].replace(/^ *|\\| *$/g,\"\").split(/ *\\| */),rows:e[3]&&e[3].trim()?e[3].replace(/\\n[ \\t]*$/,\"\").split(\"\\n\"):[]};if(i.header.length===i.align.length){i.raw=e[0];var r,n,s,o,a=i.align.length;for(r=0;r<a;r++)/^ *-+: *$/.test(i.align[r])?i.align[r]=\"right\":/^ *:-+: *$/.test(i.align[r])?i.align[r]=\"center\":/^ *:-+ *$/.test(i.align[r])?i.align[r]=\"left\":i.align[r]=null;for(a=i.rows.length,r=0;r<a;r++)i.rows[r]=A(i.rows[r],i.header.length).map((function(t){return{text:t}}));for(a=i.header.length,n=0;n<a;n++)i.header[n].tokens=this.lexer.inline(i.header[n].text);for(a=i.rows.length,n=0;n<a;n++)for(o=i.rows[n],s=0;s<o.length;s++)o[s].tokens=this.lexer.inline(o[s].text);return i}}},i.lheading=function(t){var e=this.rules.block.lheading.exec(t);if(e)return{type:\"heading\",raw:e[0],depth:\"=\"===e[2].charAt(0)?1:2,text:e[1],tokens:this.lexer.inline(e[1])}},i.paragraph=function(t){var e=this.rules.block.paragraph.exec(t);if(e){var i=\"\\n\"===e[1].charAt(e[1].length-1)?e[1].slice(0,-1):e[1];return{type:\"paragraph\",raw:e[0],text:i,tokens:this.lexer.inline(i)}}},i.text=function(t){var e=this.rules.block.text.exec(t);if(e)return{type:\"text\",raw:e[0],text:e[0],tokens:this.lexer.inline(e[0])}},i.escape=function(t){var e=this.rules.inline.escape.exec(t);if(e)return{type:\"escape\",raw:e[0],text:d(e[1])}},i.tag=function(t){var e=this.rules.inline.tag.exec(t);if(e)return!this.lexer.state.inLink&&/^<a /i.test(e[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&/^<\\/a>/i.test(e[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&/^<(pre|code|kbd|script)(\\s|>)/i.test(e[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&/^<\\/(pre|code|kbd|script)(\\s|>)/i.test(e[0])&&(this.lexer.state.inRawBlock=!1),{type:this.options.sanitize?\"text\":\"html\",raw:e[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,text:this.options.sanitize?this.options.sanitizer?this.options.sanitizer(e[0]):d(e[0]):e[0]}},i.link=function(t){var e=this.rules.inline.link.exec(t);if(e){var i=e[2].trim();if(!this.options.pedantic&&/^</.test(i)){if(!/>$/.test(i))return;var r=O(i.slice(0,-1),\"\\\\\");if((i.length-r.length)%2==0)return}else{var n=P(e[2],\"()\");if(n>-1){var s=(0===e[0].indexOf(\"!\")?5:4)+e[1].length+n;e[2]=e[2].substring(0,n),e[0]=e[0].substring(0,s).trim(),e[3]=\"\"}}var o=e[2],a=\"\";if(this.options.pedantic){var l=/^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(o);l&&(o=l[1],a=l[3])}else a=e[3]?e[3].slice(1,-1):\"\";return o=o.trim(),/^</.test(o)&&(o=this.options.pedantic&&!/>$/.test(i)?o.slice(1):o.slice(1,-1)),L(e,{href:o?o.replace(this.rules.inline._escapes,\"$1\"):o,title:a?a.replace(this.rules.inline._escapes,\"$1\"):a},e[0],this.lexer)}},i.reflink=function(t,e){var i;if((i=this.rules.inline.reflink.exec(t))||(i=this.rules.inline.nolink.exec(t))){var r=(i[2]||i[1]).replace(/\\s+/g,\" \");if(!(r=e[r.toLowerCase()])||!r.href){var n=i[0].charAt(0);return{type:\"text\",raw:n,text:n}}return L(i,r,i[0],this.lexer)}},i.emStrong=function(t,e,i){void 0===i&&(i=\"\");var r=this.rules.inline.emStrong.lDelim.exec(t);if(r&&(!r[3]||!i.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/))){var n=r[1]||r[2]||\"\";if(!n||n&&(\"\"===i||this.rules.inline.punctuation.exec(i))){var s,o,a=r[0].length-1,l=a,h=0,c=\"*\"===r[0][0]?this.rules.inline.emStrong.rDelimAst:this.rules.inline.emStrong.rDelimUnd;for(c.lastIndex=0,e=e.slice(-1*t.length+a);null!=(r=c.exec(e));)if(s=r[1]||r[2]||r[3]||r[4]||r[5]||r[6])if(o=s.length,r[3]||r[4])l+=o;else if(!((r[5]||r[6])&&a%3)||(a+o)%3){if(!((l-=o)>0)){if(o=Math.min(o,o+l+h),Math.min(a,o)%2){var u=t.slice(1,a+r.index+o);return{type:\"em\",raw:t.slice(0,a+r.index+o+1),text:u,tokens:this.lexer.inlineTokens(u)}}var p=t.slice(2,a+r.index+o-1);return{type:\"strong\",raw:t.slice(0,a+r.index+o+1),text:p,tokens:this.lexer.inlineTokens(p)}}}else h+=o}}},i.codespan=function(t){var e=this.rules.inline.code.exec(t);if(e){var i=e[2].replace(/\\n/g,\" \"),r=/[^ ]/.test(i),n=/^ /.test(i)&&/ $/.test(i);return r&&n&&(i=i.substring(1,i.length-1)),i=d(i,!0),{type:\"codespan\",raw:e[0],text:i}}},i.br=function(t){var e=this.rules.inline.br.exec(t);if(e)return{type:\"br\",raw:e[0]}},i.del=function(t){var e=this.rules.inline.del.exec(t);if(e)return{type:\"del\",raw:e[0],text:e[2],tokens:this.lexer.inlineTokens(e[2])}},i.autolink=function(t,e){var i,r,n=this.rules.inline.autolink.exec(t);if(n)return r=\"@\"===n[2]?\"mailto:\"+(i=d(this.options.mangle?e(n[1]):n[1])):i=d(n[1]),{type:\"link\",raw:n[0],text:i,href:r,tokens:[{type:\"text\",raw:i,text:i}]}},i.url=function(t,e){var i;if(i=this.rules.inline.url.exec(t)){var r,n;if(\"@\"===i[2])n=\"mailto:\"+(r=d(this.options.mangle?e(i[0]):i[0]));else{var s;do{s=i[0],i[0]=this.rules.inline._backpedal.exec(i[0])[0]}while(s!==i[0]);r=d(i[0]),n=\"www.\"===i[1]?\"http://\"+r:r}return{type:\"link\",raw:i[0],text:r,href:n,tokens:[{type:\"text\",raw:r,text:r}]}}},i.inlineText=function(t,e){var i,r=this.rules.inline.text.exec(t);if(r)return i=this.lexer.state.inRawBlock?this.options.sanitize?this.options.sanitizer?this.options.sanitizer(r[0]):d(r[0]):r[0]:d(this.options.smartypants?e(r[0]):r[0]),{type:\"text\",raw:r[0],text:i}},e}(),j={newline:/^(?: *(?:\\n|$))+/,code:/^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,fences:/^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,hr:/^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,heading:/^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,blockquote:/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,list:/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,html:\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$))\",def:/^ {0,3}\\[(label)\\]: *(?:\\n *)?<?([^\\s>]+)>?(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,table:T,lheading:/^([^\\n]+)\\n {0,3}(=+|-+) *(?:\\n+|$)/,_paragraph:/^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,text:/^[^\\n]+/,_label:/(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,_title:/(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/};j.def=y(j.def).replace(\"label\",j._label).replace(\"title\",j._title).getRegex(),j.bullet=/(?:[*+-]|\\d{1,9}[.)])/,j.listItemStart=y(/^( *)(bull) */).replace(\"bull\",j.bullet).getRegex(),j.list=y(j.list).replace(/bull/g,j.bullet).replace(\"hr\",\"\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))\").replace(\"def\",\"\\\\n+(?=\"+j.def.source+\")\").getRegex(),j._tag=\"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",j._comment=/<!--(?!-?>)[\\s\\S]*?(?:-->|$)/,j.html=y(j.html,\"i\").replace(\"comment\",j._comment).replace(\"tag\",j._tag).replace(\"attribute\",/ +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),j.paragraph=y(j._paragraph).replace(\"hr\",j.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"|table\",\"\").replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",j._tag).getRegex(),j.blockquote=y(j.blockquote).replace(\"paragraph\",j.paragraph).getRegex(),j.normal=E({},j),j.gfm=E({},j.normal,{table:\"^ *([^\\\\n ].*\\\\|.*)\\\\n {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\"}),j.gfm.table=y(j.gfm.table).replace(\"hr\",j.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"blockquote\",\" {0,3}>\").replace(\"code\",\" {4}[^\\\\n]\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",j._tag).getRegex(),j.gfm.paragraph=y(j._paragraph).replace(\"hr\",j.hr).replace(\"heading\",\" {0,3}#{1,6} \").replace(\"|lheading\",\"\").replace(\"table\",j.gfm.table).replace(\"blockquote\",\" {0,3}>\").replace(\"fences\",\" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\",\" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\",\"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\",j._tag).getRegex(),j.pedantic=E({},j.normal,{html:y(\"^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\\\"[^\\\"]*\\\"|'[^']*'|\\\\s[^'\\\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))\").replace(\"comment\",j._comment).replace(/tag/g,\"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),def:/^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,heading:/^(#{1,6})(.*)(?:\\n+|$)/,fences:T,paragraph:y(j.normal._paragraph).replace(\"hr\",j.hr).replace(\"heading\",\" *#{1,6} *[^\\n]\").replace(\"lheading\",j.lheading).replace(\"blockquote\",\" {0,3}>\").replace(\"|fences\",\"\").replace(\"|list\",\"\").replace(\"|html\",\"\").getRegex()});var I={escape:/^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,autolink:/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,url:T,tag:\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\",link:/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,reflink:/^!?\\[(label)\\]\\[(ref)\\]/,nolink:/^!?\\[(ref)\\](?:\\[\\])?/,reflinkSearch:\"reflink|nolink(?!\\\\()\",emStrong:{lDelim:/^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,rDelimAst:/^[^_*]*?\\_\\_[^_*]*?\\*[^_*]*?(?=\\_\\_)|[^*]+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|[^punct*_\\s](\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|[^punct*_\\s](\\*+)(?=[^punct*_\\s])/,rDelimUnd:/^[^_*]*?\\*\\*[^_*]*?\\_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|[^punct*_\\s](\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/},code:/^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,br:/^( {2,}|\\\\)\\n(?!\\s*$)/,del:T,text:/^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,punctuation:/^([\\spunctuation])/};function N(t){return t.replace(/---/g,\"—\").replace(/--/g,\"–\").replace(/(^|[-\\u2014/(\\[{\"\\s])'/g,\"$1‘\").replace(/'/g,\"’\").replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g,\"$1“\").replace(/\"/g,\"”\").replace(/\\.{3}/g,\"…\")}function $(t){var e,i,r=\"\",n=t.length;for(e=0;e<n;e++)i=t.charCodeAt(e),Math.random()>.5&&(i=\"x\"+i.toString(16)),r+=\"&#\"+i+\";\";return r}I._punctuation=\"!\\\"#$%&'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~\",I.punctuation=y(I.punctuation).replace(/punctuation/g,I._punctuation).getRegex(),I.blockSkip=/\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g,I.escapedEmSt=/\\\\\\*|\\\\_/g,I._comment=y(j._comment).replace(\"(?:--\\x3e|$)\",\"--\\x3e\").getRegex(),I.emStrong.lDelim=y(I.emStrong.lDelim).replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimAst=y(I.emStrong.rDelimAst,\"g\").replace(/punct/g,I._punctuation).getRegex(),I.emStrong.rDelimUnd=y(I.emStrong.rDelimUnd,\"g\").replace(/punct/g,I._punctuation).getRegex(),I._escapes=/\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g,I._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,I._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,I.autolink=y(I.autolink).replace(\"scheme\",I._scheme).replace(\"email\",I._email).getRegex(),I._attribute=/\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/,I.tag=y(I.tag).replace(\"comment\",I._comment).replace(\"attribute\",I._attribute).getRegex(),I._label=/(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,I._href=/<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/,I._title=/\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/,I.link=y(I.link).replace(\"label\",I._label).replace(\"href\",I._href).replace(\"title\",I._title).getRegex(),I.reflink=y(I.reflink).replace(\"label\",I._label).replace(\"ref\",j._label).getRegex(),I.nolink=y(I.nolink).replace(\"ref\",j._label).getRegex(),I.reflinkSearch=y(I.reflinkSearch,\"g\").replace(\"reflink\",I.reflink).replace(\"nolink\",I.nolink).getRegex(),I.normal=E({},I),I.pedantic=E({},I.normal,{strong:{start:/^__|\\*\\*/,middle:/^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,endAst:/\\*\\*(?!\\*)/g,endUnd:/__(?!_)/g},em:{start:/^_|\\*/,middle:/^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,endAst:/\\*(?!\\*)/g,endUnd:/_(?!_)/g},link:y(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\",I._label).getRegex(),reflink:y(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\",I._label).getRegex()}),I.gfm=E({},I.normal,{escape:y(I.escape).replace(\"])\",\"~|])\").getRegex(),_extended_email:/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,url:/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,_backpedal:/(?:[^?!.,:;*_~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/}),I.gfm.url=y(I.gfm.url,\"i\").replace(\"email\",I.gfm._extended_email).getRegex(),I.breaks=E({},I.gfm,{br:y(I.br).replace(\"{2,}\",\"*\").getRegex(),text:y(I.gfm.text).replace(\"\\\\b_\",\"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g,\"*\").getRegex()});var z=function(){function e(e){this.tokens=[],this.tokens.links=Object.create(null),this.options=e||t.defaults,this.options.tokenizer=this.options.tokenizer||new B,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};var i={block:j.normal,inline:I.normal};this.options.pedantic?(i.block=j.pedantic,i.inline=I.pedantic):this.options.gfm&&(i.block=j.gfm,this.options.breaks?i.inline=I.breaks:i.inline=I.gfm),this.tokenizer.rules=i}e.lex=function(t,i){return new e(i).lex(t)},e.lexInline=function(t,i){return new e(i).inlineTokens(t)};var r=e.prototype;return r.lex=function(t){var e;for(t=t.replace(/\\r\\n|\\r/g,\"\\n\"),this.blockTokens(t,this.tokens);e=this.inlineQueue.shift();)this.inlineTokens(e.src,e.tokens);return this.tokens},r.blockTokens=function(t,e){var i,r,n,s,o=this;for(void 0===e&&(e=[]),t=this.options.pedantic?t.replace(/\\t/g,\"    \").replace(/^ +$/gm,\"\"):t.replace(/^( *)(\\t+)/gm,(function(t,e,i){return e+\"    \".repeat(i.length)}));t;)if(!(this.options.extensions&&this.options.extensions.block&&this.options.extensions.block.some((function(r){return!!(i=r.call({lexer:o},t,e))&&(t=t.substring(i.raw.length),e.push(i),!0)}))))if(i=this.tokenizer.space(t))t=t.substring(i.raw.length),1===i.raw.length&&e.length>0?e[e.length-1].raw+=\"\\n\":e.push(i);else if(i=this.tokenizer.code(t))t=t.substring(i.raw.length),!(r=e[e.length-1])||\"paragraph\"!==r.type&&\"text\"!==r.type?e.push(i):(r.raw+=\"\\n\"+i.raw,r.text+=\"\\n\"+i.text,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(i=this.tokenizer.fences(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.heading(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.hr(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.blockquote(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.list(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.html(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.def(t))t=t.substring(i.raw.length),!(r=e[e.length-1])||\"paragraph\"!==r.type&&\"text\"!==r.type?this.tokens.links[i.tag]||(this.tokens.links[i.tag]={href:i.href,title:i.title}):(r.raw+=\"\\n\"+i.raw,r.text+=\"\\n\"+i.raw,this.inlineQueue[this.inlineQueue.length-1].src=r.text);else if(i=this.tokenizer.table(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.lheading(t))t=t.substring(i.raw.length),e.push(i);else if(n=t,this.options.extensions&&this.options.extensions.startBlock&&function(){var e=1/0,i=t.slice(1),r=void 0;o.options.extensions.startBlock.forEach((function(t){\"number\"==typeof(r=t.call({lexer:this},i))&&r>=0&&(e=Math.min(e,r))})),e<1/0&&e>=0&&(n=t.substring(0,e+1))}(),this.state.top&&(i=this.tokenizer.paragraph(n)))r=e[e.length-1],s&&\"paragraph\"===r.type?(r.raw+=\"\\n\"+i.raw,r.text+=\"\\n\"+i.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):e.push(i),s=n.length!==t.length,t=t.substring(i.raw.length);else if(i=this.tokenizer.text(t))t=t.substring(i.raw.length),(r=e[e.length-1])&&\"text\"===r.type?(r.raw+=\"\\n\"+i.raw,r.text+=\"\\n\"+i.text,this.inlineQueue.pop(),this.inlineQueue[this.inlineQueue.length-1].src=r.text):e.push(i);else if(t){var a=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(a);break}throw new Error(a)}return this.state.top=!0,e},r.inline=function(t,e){return void 0===e&&(e=[]),this.inlineQueue.push({src:t,tokens:e}),e},r.inlineTokens=function(t,e){var i,r,n,s=this;void 0===e&&(e=[]);var o,a,l,h=t;if(this.tokens.links){var c=Object.keys(this.tokens.links);if(c.length>0)for(;null!=(o=this.tokenizer.rules.inline.reflinkSearch.exec(h));)c.includes(o[0].slice(o[0].lastIndexOf(\"[\")+1,-1))&&(h=h.slice(0,o.index)+\"[\"+M(\"a\",o[0].length-2)+\"]\"+h.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(o=this.tokenizer.rules.inline.blockSkip.exec(h));)h=h.slice(0,o.index)+\"[\"+M(\"a\",o[0].length-2)+\"]\"+h.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(o=this.tokenizer.rules.inline.escapedEmSt.exec(h));)h=h.slice(0,o.index)+\"++\"+h.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);for(;t;)if(a||(l=\"\"),a=!1,!(this.options.extensions&&this.options.extensions.inline&&this.options.extensions.inline.some((function(r){return!!(i=r.call({lexer:s},t,e))&&(t=t.substring(i.raw.length),e.push(i),!0)}))))if(i=this.tokenizer.escape(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.tag(t))t=t.substring(i.raw.length),(r=e[e.length-1])&&\"text\"===i.type&&\"text\"===r.type?(r.raw+=i.raw,r.text+=i.text):e.push(i);else if(i=this.tokenizer.link(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.reflink(t,this.tokens.links))t=t.substring(i.raw.length),(r=e[e.length-1])&&\"text\"===i.type&&\"text\"===r.type?(r.raw+=i.raw,r.text+=i.text):e.push(i);else if(i=this.tokenizer.emStrong(t,h,l))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.codespan(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.br(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.del(t))t=t.substring(i.raw.length),e.push(i);else if(i=this.tokenizer.autolink(t,$))t=t.substring(i.raw.length),e.push(i);else if(this.state.inLink||!(i=this.tokenizer.url(t,$))){if(n=t,this.options.extensions&&this.options.extensions.startInline&&function(){var e=1/0,i=t.slice(1),r=void 0;s.options.extensions.startInline.forEach((function(t){\"number\"==typeof(r=t.call({lexer:this},i))&&r>=0&&(e=Math.min(e,r))})),e<1/0&&e>=0&&(n=t.substring(0,e+1))}(),i=this.tokenizer.inlineText(n,N))t=t.substring(i.raw.length),\"_\"!==i.raw.slice(-1)&&(l=i.raw.slice(-1)),a=!0,(r=e[e.length-1])&&\"text\"===r.type?(r.raw+=i.raw,r.text+=i.text):e.push(i);else if(t){var u=\"Infinite loop on byte: \"+t.charCodeAt(0);if(this.options.silent){console.error(u);break}throw new Error(u)}}else t=t.substring(i.raw.length),e.push(i);return e},i(e,null,[{key:\"rules\",get:function(){return{block:j,inline:I}}}]),e}(),H=function(){function e(e){this.options=e||t.defaults}var i=e.prototype;return i.code=function(t,e,i){var r=(e||\"\").match(/\\S*/)[0];if(this.options.highlight){var n=this.options.highlight(t,r);null!=n&&n!==t&&(i=!0,t=n)}return t=t.replace(/\\n$/,\"\")+\"\\n\",r?'<pre><code class=\"'+this.options.langPrefix+d(r,!0)+'\">'+(i?t:d(t,!0))+\"</code></pre>\\n\":\"<pre><code>\"+(i?t:d(t,!0))+\"</code></pre>\\n\"},i.blockquote=function(t){return\"<blockquote>\\n\"+t+\"</blockquote>\\n\"},i.html=function(t){return t},i.heading=function(t,e,i,r){return this.options.headerIds?\"<h\"+e+' id=\"'+(this.options.headerPrefix+r.slug(i))+'\">'+t+\"</h\"+e+\">\\n\":\"<h\"+e+\">\"+t+\"</h\"+e+\">\\n\"},i.hr=function(){return this.options.xhtml?\"<hr/>\\n\":\"<hr>\\n\"},i.list=function(t,e,i){var r=e?\"ol\":\"ul\";return\"<\"+r+(e&&1!==i?' start=\"'+i+'\"':\"\")+\">\\n\"+t+\"</\"+r+\">\\n\"},i.listitem=function(t){return\"<li>\"+t+\"</li>\\n\"},i.checkbox=function(t){return\"<input \"+(t?'checked=\"\" ':\"\")+'disabled=\"\" type=\"checkbox\"'+(this.options.xhtml?\" /\":\"\")+\"> \"},i.paragraph=function(t){return\"<p>\"+t+\"</p>\\n\"},i.table=function(t,e){return e&&(e=\"<tbody>\"+e+\"</tbody>\"),\"<table>\\n<thead>\\n\"+t+\"</thead>\\n\"+e+\"</table>\\n\"},i.tablerow=function(t){return\"<tr>\\n\"+t+\"</tr>\\n\"},i.tablecell=function(t,e){var i=e.header?\"th\":\"td\";return(e.align?\"<\"+i+' align=\"'+e.align+'\">':\"<\"+i+\">\")+t+\"</\"+i+\">\\n\"},i.strong=function(t){return\"<strong>\"+t+\"</strong>\"},i.em=function(t){return\"<em>\"+t+\"</em>\"},i.codespan=function(t){return\"<code>\"+t+\"</code>\"},i.br=function(){return this.options.xhtml?\"<br/>\":\"<br>\"},i.del=function(t){return\"<del>\"+t+\"</del>\"},i.link=function(t,e,i){if(null===(t=b(this.options.sanitize,this.options.baseUrl,t)))return i;var r='<a href=\"'+d(t)+'\"';return e&&(r+=' title=\"'+e+'\"'),r+=\">\"+i+\"</a>\"},i.image=function(t,e,i){if(null===(t=b(this.options.sanitize,this.options.baseUrl,t)))return i;var r='<img src=\"'+t+'\" alt=\"'+i+'\"';return e&&(r+=' title=\"'+e+'\"'),r+=this.options.xhtml?\"/>\":\">\"},i.text=function(t){return t},e}(),X=function(){function t(){}var e=t.prototype;return e.strong=function(t){return t},e.em=function(t){return t},e.codespan=function(t){return t},e.del=function(t){return t},e.html=function(t){return t},e.text=function(t){return t},e.link=function(t,e,i){return\"\"+i},e.image=function(t,e,i){return\"\"+i},e.br=function(){return\"\"},t}(),W=function(){function t(){this.seen={}}var e=t.prototype;return e.serialize=function(t){return t.toLowerCase().trim().replace(/<[!\\/a-z].*?>/gi,\"\").replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g,\"\").replace(/\\s/g,\"-\")},e.getNextSafeSlug=function(t,e){var i=t,r=0;if(this.seen.hasOwnProperty(i)){r=this.seen[t];do{i=t+\"-\"+ ++r}while(this.seen.hasOwnProperty(i))}return e||(this.seen[t]=r,this.seen[i]=0),i},e.slug=function(t,e){void 0===e&&(e={});var i=this.serialize(t);return this.getNextSafeSlug(i,e.dryrun)},t}(),V=function(){function e(e){this.options=e||t.defaults,this.options.renderer=this.options.renderer||new H,this.renderer=this.options.renderer,this.renderer.options=this.options,this.textRenderer=new X,this.slugger=new W}e.parse=function(t,i){return new e(i).parse(t)},e.parseInline=function(t,i){return new e(i).parseInline(t)};var i=e.prototype;return i.parse=function(t,e){void 0===e&&(e=!0);var i,r,n,s,o,a,l,h,c,u,p,f,d,g,v,y,x,_,b,C=\"\",S=t.length;for(i=0;i<S;i++)if(u=t[i],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[u.type])||!1===(b=this.options.extensions.renderers[u.type].call({parser:this},u))&&[\"space\",\"hr\",\"heading\",\"code\",\"table\",\"blockquote\",\"list\",\"html\",\"paragraph\",\"text\"].includes(u.type))switch(u.type){case\"space\":continue;case\"hr\":C+=this.renderer.hr();continue;case\"heading\":C+=this.renderer.heading(this.parseInline(u.tokens),u.depth,m(this.parseInline(u.tokens,this.textRenderer)),this.slugger);continue;case\"code\":C+=this.renderer.code(u.text,u.lang,u.escaped);continue;case\"table\":for(h=\"\",l=\"\",s=u.header.length,r=0;r<s;r++)l+=this.renderer.tablecell(this.parseInline(u.header[r].tokens),{header:!0,align:u.align[r]});for(h+=this.renderer.tablerow(l),c=\"\",s=u.rows.length,r=0;r<s;r++){for(l=\"\",o=(a=u.rows[r]).length,n=0;n<o;n++)l+=this.renderer.tablecell(this.parseInline(a[n].tokens),{header:!1,align:u.align[n]});c+=this.renderer.tablerow(l)}C+=this.renderer.table(h,c);continue;case\"blockquote\":c=this.parse(u.tokens),C+=this.renderer.blockquote(c);continue;case\"list\":for(p=u.ordered,f=u.start,d=u.loose,s=u.items.length,c=\"\",r=0;r<s;r++)y=(v=u.items[r]).checked,x=v.task,g=\"\",v.task&&(_=this.renderer.checkbox(y),d?v.tokens.length>0&&\"paragraph\"===v.tokens[0].type?(v.tokens[0].text=_+\" \"+v.tokens[0].text,v.tokens[0].tokens&&v.tokens[0].tokens.length>0&&\"text\"===v.tokens[0].tokens[0].type&&(v.tokens[0].tokens[0].text=_+\" \"+v.tokens[0].tokens[0].text)):v.tokens.unshift({type:\"text\",text:_}):g+=_),g+=this.parse(v.tokens,d),c+=this.renderer.listitem(g,x,y);C+=this.renderer.list(c,p,f);continue;case\"html\":C+=this.renderer.html(u.text);continue;case\"paragraph\":C+=this.renderer.paragraph(this.parseInline(u.tokens));continue;case\"text\":for(c=u.tokens?this.parseInline(u.tokens):u.text;i+1<S&&\"text\"===t[i+1].type;)c+=\"\\n\"+((u=t[++i]).tokens?this.parseInline(u.tokens):u.text);C+=e?this.renderer.paragraph(c):c;continue;default:var w='Token with \"'+u.type+'\" type was not found.';if(this.options.silent)return void console.error(w);throw new Error(w)}else C+=b||\"\";return C},i.parseInline=function(t,e){e=e||this.renderer;var i,r,n,s=\"\",o=t.length;for(i=0;i<o;i++)if(r=t[i],!(this.options.extensions&&this.options.extensions.renderers&&this.options.extensions.renderers[r.type])||!1===(n=this.options.extensions.renderers[r.type].call({parser:this},r))&&[\"escape\",\"html\",\"link\",\"image\",\"strong\",\"em\",\"codespan\",\"br\",\"del\",\"text\"].includes(r.type))switch(r.type){case\"escape\":case\"text\":s+=e.text(r.text);break;case\"html\":s+=e.html(r.text);break;case\"link\":s+=e.link(r.href,r.title,this.parseInline(r.tokens,e));break;case\"image\":s+=e.image(r.href,r.title,r.text);break;case\"strong\":s+=e.strong(this.parseInline(r.tokens,e));break;case\"em\":s+=e.em(this.parseInline(r.tokens,e));break;case\"codespan\":s+=e.codespan(r.text);break;case\"br\":s+=e.br();break;case\"del\":s+=e.del(this.parseInline(r.tokens,e));break;default:var a='Token with \"'+r.type+'\" type was not found.';if(this.options.silent)return void console.error(a);throw new Error(a)}else s+=n||\"\";return s},e}();function U(t,e,i){if(null==t)throw new Error(\"marked(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");if(\"function\"==typeof e&&(i=e,e=null),F(e=E({},U.defaults,e||{})),i){var r,n=e.highlight;try{r=z.lex(t,e)}catch(t){return i(t)}var s=function(t){var s;if(!t)try{e.walkTokens&&U.walkTokens(r,e.walkTokens),s=V.parse(r,e)}catch(e){t=e}return e.highlight=n,t?i(t):i(null,s)};if(!n||n.length<3)return s();if(delete e.highlight,!r.length)return s();var o=0;return U.walkTokens(r,(function(t){\"code\"===t.type&&(o++,setTimeout((function(){n(t.text,t.lang,(function(e,i){if(e)return s(e);null!=i&&i!==t.text&&(t.text=i,t.escaped=!0),0==--o&&s()}))}),0))})),void(0===o&&s())}function a(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+d(t.message+\"\",!0)+\"</pre>\";throw t}try{var l=z.lex(t,e);if(e.walkTokens){if(e.async)return Promise.all(U.walkTokens(l,e.walkTokens)).then((function(){return V.parse(l,e)})).catch(a);U.walkTokens(l,e.walkTokens)}return V.parse(l,e)}catch(t){a(t)}}U.options=U.setOptions=function(t){return E(U.defaults,t),a(U.defaults),U},U.getDefaults=o,U.defaults=t.defaults,U.use=function(){for(var t=arguments.length,e=new Array(t),i=0;i<t;i++)e[i]=arguments[i];var r,n=E.apply(void 0,[{}].concat(e)),s=U.defaults.extensions||{renderers:{},childTokens:{}};e.forEach((function(t){if(t.extensions&&(r=!0,t.extensions.forEach((function(t){if(!t.name)throw new Error(\"extension name required\");if(t.renderer){var e=s.renderers?s.renderers[t.name]:null;s.renderers[t.name]=e?function(){for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];var s=t.renderer.apply(this,r);return!1===s&&(s=e.apply(this,r)),s}:t.renderer}if(t.tokenizer){if(!t.level||\"block\"!==t.level&&\"inline\"!==t.level)throw new Error(\"extension level must be 'block' or 'inline'\");s[t.level]?s[t.level].unshift(t.tokenizer):s[t.level]=[t.tokenizer],t.start&&(\"block\"===t.level?s.startBlock?s.startBlock.push(t.start):s.startBlock=[t.start]:\"inline\"===t.level&&(s.startInline?s.startInline.push(t.start):s.startInline=[t.start]))}t.childTokens&&(s.childTokens[t.name]=t.childTokens)}))),t.renderer&&function(){var e=U.defaults.renderer||new H,i=function(i){var r=e[i];e[i]=function(){for(var n=arguments.length,s=new Array(n),o=0;o<n;o++)s[o]=arguments[o];var a=t.renderer[i].apply(e,s);return!1===a&&(a=r.apply(e,s)),a}};for(var r in t.renderer)i(r);n.renderer=e}(),t.tokenizer&&function(){var e=U.defaults.tokenizer||new B,i=function(i){var r=e[i];e[i]=function(){for(var n=arguments.length,s=new Array(n),o=0;o<n;o++)s[o]=arguments[o];var a=t.tokenizer[i].apply(e,s);return!1===a&&(a=r.apply(e,s)),a}};for(var r in t.tokenizer)i(r);n.tokenizer=e}(),t.walkTokens){var e=U.defaults.walkTokens;n.walkTokens=function(i){var r=[];return r.push(t.walkTokens.call(this,i)),e&&(r=r.concat(e.call(this,i))),r}}r&&(n.extensions=s),U.setOptions(n)}))},U.walkTokens=function(t,e){for(var i,r=[],n=function(){var t=i.value;switch(r=r.concat(e.call(U,t)),t.type){case\"table\":for(var n,o=s(t.header);!(n=o()).done;){var a=n.value;r=r.concat(U.walkTokens(a.tokens,e))}for(var l,h=s(t.rows);!(l=h()).done;)for(var c,u=s(l.value);!(c=u()).done;){var p=c.value;r=r.concat(U.walkTokens(p.tokens,e))}break;case\"list\":r=r.concat(U.walkTokens(t.items,e));break;default:U.defaults.extensions&&U.defaults.extensions.childTokens&&U.defaults.extensions.childTokens[t.type]?U.defaults.extensions.childTokens[t.type].forEach((function(i){r=r.concat(U.walkTokens(t[i],e))})):t.tokens&&(r=r.concat(U.walkTokens(t.tokens,e)))}},o=s(t);!(i=o()).done;)n();return r},U.parseInline=function(t,e){if(null==t)throw new Error(\"marked.parseInline(): input parameter is undefined or null\");if(\"string\"!=typeof t)throw new Error(\"marked.parseInline(): input parameter is of type \"+Object.prototype.toString.call(t)+\", string expected\");F(e=E({},U.defaults,e||{}));try{var i=z.lexInline(t,e);return e.walkTokens&&U.walkTokens(i,e.walkTokens),V.parseInline(i,e)}catch(t){if(t.message+=\"\\nPlease report this to https://github.com/markedjs/marked.\",e.silent)return\"<p>An error occurred:</p><pre>\"+d(t.message+\"\",!0)+\"</pre>\";throw t}},U.Parser=V,U.parser=V.parse,U.Renderer=H,U.TextRenderer=X,U.Lexer=z,U.lexer=z.lex,U.Tokenizer=B,U.Slugger=W,U.parse=U;var Y=U.options,q=U.setOptions,G=U.use,K=U.walkTokens,J=U.parseInline,Z=U,Q=V.parse,tt=z.lex;t.Lexer=z,t.Parser=V,t.Renderer=H,t.Slugger=W,t.TextRenderer=X,t.Tokenizer=B,t.getDefaults=o,t.lexer=tt,t.marked=U,t.options=Y,t.parse=Z,t.parseInline=J,t.parser=Q,t.setOptions=q,t.use=G,t.walkTokens=K,Object.defineProperty(t,\"__esModule\",{value:!0})}(t.exports)})),parcelRequire.register(\"6F9ZT\",(function(t,e){$parcel$export(t.exports,\"extractLinks\",(()=>n)),$parcel$export(t.exports,\"unescape\",(()=>s)),$parcel$export(t.exports,\"fixHandlebarsAttributeQuotes\",(()=>o)),$parcel$export(t.exports,\"uuid\",(()=>a));const i=new RegExp(/\\[\\[([^|\\]]+)\\|?([^\\]]*)\\]\\]/,\"g\"),r=[\"north\",\"south\",\"east\",\"west\"],n=t=>{const e=[],n=[],s=t.replace(i,((t,i,s)=>{const o=s||i,a=s?i:o,l={passageName:o,alias:a};return r.includes(a.toLowerCase())?n.push(l):e.push(l),\"\"}));return{links:e,directionalLinks:n,content:s}},s=t=>([[\"&amp;\",\"&\"],[\"&lt;\",\"<\"],[\"&gt;\",\">\"],[\"&quot;\",'\"'],[\"&#x27;\",\"'\"],[\"&#x60;\",\"`\"]].forEach((([e,i])=>{t=t.replace(new RegExp(e,\"g\"),i)})),t),o=t=>{const e=new RegExp(/\\{\\{.*(&quot;).*\\}\\}/,\"g\");return t.replace(e,(t=>t.replace(new RegExp(\"&quot;\",\"g\"),'\"')))},a=()=>{if(window?.crypto?.randomUUID)return window.crypto.randomUUID();{const t=()=>Math.floor(Math.random()*Math.pow(2,16)).toString(16);return`${t()}-${t()}-${t()}-${t()}`}}})),parcelRequire.register(\"93bu7\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>i));var i=class{constructor(t={}){this.store=t,this.listeners=[]}addListener(t){this.listeners.push(t)}callListeners(){this.listeners.forEach((t=>{t(this.store)}))}get(t){return t.split(\".\").reduce(((e,i)=>{if(Object.prototype.hasOwnProperty.call(e,i))return e[i];throw new Error(`Unable to get variable with key ${t}`)}),this.store)}set(t,e){this.store[t]=e,this.callListeners()}clear(t){t?delete this.store[t]:this.store={},this.callListeners()}}})),parcelRequire.register(\"67nOO\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>r));var i=parcelRequire(\"60LR2\");var r=class{constructor(){const t=document.querySelector(\"canvas#map\");if(!t)throw new Error(\"No canvas found!\");this.canvasElem=t,this.canvas=new i.fabric.Canvas(this.canvasElem,{selection:!1}),this.initialVPT=this.canvas.viewportTransform;const e=this.canvas.getElement().parentElement;if(e&&e.parentElement){const t=e.style.position;e.style.position=\"absolute\",this.canvas.setDimensions({width:Math.min(300,e.parentElement.offsetWidth),height:Math.min(300,e.parentElement.offsetWidth)}),e.style.position=t}this.viewportSize={width:this.canvas.getWidth(),height:this.canvas.getHeight()},this.canvas.on(\"mouse:wheel\",(t=>{const e=t.e.deltaY;let i=this.canvas.getZoom();i*=.999**e,i>20&&(i=20),i<.2&&(i=.2),this.canvas.zoomToPoint({x:t.e.offsetX,y:t.e.offsetY},i),t.e.preventDefault(),t.e.stopPropagation()})),this.canvas.on(\"mouse:down\",(t=>{const e=t.e;!0===e.altKey&&(this.isDragging=!0,this.lastPosX=e.clientX,this.lastPosY=e.clientY)})),this.canvas.on(\"mouse:move\",(t=>{if(this.isDragging){const e=t.e,i=this.canvas.viewportTransform;i&&(i[4]+=e.clientX-this.lastPosX,i[5]+=e.clientY-this.lastPosY,this.canvas.requestRenderAll(),this.lastPosX=e.clientX,this.lastPosY=e.clientY)}})),this.canvas.on(\"mouse:up\",(t=>{this.canvas.viewportTransform&&this.canvas.setViewportTransform(this.canvas.viewportTransform),this.isDragging=!1})),this.defaultMapData={gridCols:20,gridRows:20,blockWidth:25,blockHeight:25,color:\"#ffd700\",highlightColor:\"#fff\",borderColor:\"#333\"},this.maps=[],this.currentMap=null}setDefaultMapData(t){this.defaultMapData={...this.defaultMapData,...t}}addMap(t){this.maps.push(t)}displayMap(t,e){const i=this.maps.find((e=>e.name===t));if(!i)throw new Error(`Unable to find map named ${t}!`);const r={...this.defaultMapData,map:i.map,highlight:e};this.currentMap=i,this.clear(),this.drawMapNodes(r),this.drawGridLines(r);const n=this.canvas.viewportTransform,s=r.blockWidth*r.gridCols/2,o=r.blockHeight*r.gridRows/2;if(n&&(n[4]=-s+this.viewportSize.width/2,n[5]=-o+this.viewportSize.height/2),e){const t=e.x*r.blockWidth+r.blockWidth/2,i=e.y*r.blockHeight+r.blockHeight/2,n=this.canvas.viewportTransform;n&&(n[4]=-t+this.viewportSize.width/2,n[5]=-i+this.viewportSize.height/2)}}clear(){this.currentMap=null,this.canvas.clear()}drawMapNodes(t){t.map.trim().split(\"\\n\").forEach(((e,i)=>{e.trim().split(\"\").forEach(((e,r)=>{this.drawMapNode(t,e,i,r)}))}))}drawGridLines(t){let e=0;for(e=0;e<=t.gridCols;e++){const r=e*t.blockWidth,n=0,s=r,o=t.gridRows*t.blockHeight,a=new i.fabric.Line([r,n,s,o],{stroke:t.borderColor,strokeWidth:1,selectable:!1});this.canvas.add(a)}for(e=0;e<=t.gridRows;e++){const r=0,n=e*t.blockHeight,s=t.gridCols*t.blockWidth,o=n,a=new i.fabric.Line([r,n,s,o],{stroke:t.borderColor,strokeWidth:1,selectable:!1});this.canvas.add(a)}}drawMapNode(t,e,r,n){const s=parseInt(e,16);if(isNaN(s))return;const o=n*t.blockWidth,a=r*t.blockHeight,l=new i.fabric.Rect({left:o,top:a,fill:t.color,width:t.blockWidth,height:t.blockHeight,selectable:!1});this.canvas.add(l),t.highlight&&t.highlight.x===n&&t.highlight.y===r&&this.drawMapNodeHighlight(t,o,a),this.drawMapNodeBorders(t,s,o,a)}drawMapNodeHighlight(t,e,r){const n=new i.fabric.Rect({left:e,top:r,fill:t.highlightColor,width:t.blockWidth,height:t.blockHeight,opacity:0,selectable:!1});this.canvas.add(n);const s=()=>{n.animate(\"opacity\",1,{duration:250,onComplete:o,onChange:this.canvas.renderAll.bind(this.canvas)})},o=()=>{n.animate(\"opacity\",0,{duration:250,onComplete:()=>setTimeout(s,500),onChange:this.canvas.renderAll.bind(this.canvas)})};s()}drawMapNodeBorders(t,e,r,n){const s=[];s.push(8&e),s.push(4&e),s.push(2&e),s.push(1&e),s&&s.forEach((e=>{let s,o,a,l;if(8===e)s=r,o=n,a=r+t.blockWidth,l=o;else if(2===e)s=r,o=n+t.blockHeight,a=r+t.blockWidth,l=o;else if(4===e)s=r+t.blockWidth,o=n,a=s,l=n+t.blockHeight;else{if(1!==e)return;s=r,o=n,a=s,l=n+t.blockHeight}const h=new i.fabric.Line([s,o,a,l],{stroke:t.borderColor,strokeWidth:2,strokeLineJoin:\"round\",selectable:!1});this.canvas.add(h)}))}}})),parcelRequire.register(\"60LR2\",(function(t,e){var i,r,n,s,o,a,l,h,c,u,p,f,d,g,m,v,y=parcelRequire(\"gXZrF\").Buffer,x=x||{version:\"5.2.4\"};if(t.exports.fabric=x,\"undefined\"!=typeof document&&\"undefined\"!=typeof window)document instanceof(\"undefined\"!=typeof HTMLDocument?HTMLDocument:Document)?x.document=document:x.document=document.implementation.createHTMLDocument(\"\"),x.window=window;else{var _=new(parcelRequire(\"gXZrF\").JSDOM)(decodeURIComponent(\"%3C!DOCTYPE%20html%3E%3Chtml%3E%3Chead%3E%3C%2Fhead%3E%3Cbody%3E%3C%2Fbody%3E%3C%2Fhtml%3E\"),{features:{FetchExternalResources:[\"img\"]},resources:\"usable\"}).window;x.document=_.document,x.jsdomImplForWrapper=parcelRequire(\"gXZrF\").implForWrapper,x.nodeCanvas=parcelRequire(\"gXZrF\").Canvas,x.window=_,DOMParser=x.window.DOMParser}function b(t,e){var i=t.canvas,r=e.targetCanvas,n=r.getContext(\"2d\");n.translate(0,r.height),n.scale(1,-1);var s=i.height-r.height;n.drawImage(i,0,s,r.width,r.height,0,0,r.width,r.height)}function C(t,e){var i=e.targetCanvas.getContext(\"2d\"),r=e.destinationWidth,n=e.destinationHeight,s=r*n*4,o=new Uint8Array(this.imageBuffer,0,s),a=new Uint8ClampedArray(this.imageBuffer,0,s);t.readPixels(0,0,r,n,t.RGBA,t.UNSIGNED_BYTE,o);var l=new ImageData(a,r,n);i.putImageData(l,0,0)}x.isTouchSupported=\"ontouchstart\"in x.window||\"ontouchstart\"in x.document||x.window&&x.window.navigator&&x.window.navigator.maxTouchPoints>0,x.isLikelyNode=void 0!==y&&\"undefined\"==typeof window,x.SHARED_ATTRIBUTES=[\"display\",\"transform\",\"fill\",\"fill-opacity\",\"fill-rule\",\"opacity\",\"stroke\",\"stroke-dasharray\",\"stroke-linecap\",\"stroke-dashoffset\",\"stroke-linejoin\",\"stroke-miterlimit\",\"stroke-opacity\",\"stroke-width\",\"id\",\"paint-order\",\"vector-effect\",\"instantiated_by_use\",\"clip-path\"],x.DPI=96,x.reNum=\"(?:[-+]?(?:\\\\d+|\\\\d*\\\\.\\\\d+)(?:[eE][-+]?\\\\d+)?)\",x.commaWsp=\"(?:\\\\s+,?\\\\s*|,\\\\s*)\",x.rePathCommand=/([-+]?((\\d+\\.\\d+)|((\\d+)|(\\.\\d+)))(?:[eE][-+]?\\d+)?)/gi,x.reNonWord=/[ \\n\\.,;!\\?\\-]/,x.fontPaths={},x.iMatrix=[1,0,0,1,0,0],x.svgNS=\"http://www.w3.org/2000/svg\",x.perfLimitSizeTotal=2097152,x.maxCacheSideLimit=4096,x.minCacheSideLimit=256,x.charWidthsCache={},x.textureSize=2048,x.disableStyleCopyPaste=!1,x.enableGLFiltering=!0,x.devicePixelRatio=x.window.devicePixelRatio||x.window.webkitDevicePixelRatio||x.window.mozDevicePixelRatio||1,x.browserShadowBlurConstant=1,x.arcToSegmentsCache={},x.boundsOfCurveCache={},x.cachesBoundsOfCurve=!0,x.forceGLPutImageData=!1,x.initFilterBackend=function(){return x.enableGLFiltering&&x.isWebglSupported&&x.isWebglSupported(x.textureSize)?(console.log(\"max texture size: \"+x.maxTextureSize),new x.WebglFilterBackend({tileSize:x.textureSize})):x.Canvas2dFilterBackend?new x.Canvas2dFilterBackend:void 0},\"undefined\"!=typeof document&&\"undefined\"!=typeof window&&(window.fabric=x),function(){function t(t,e){if(this.__eventListeners[t]){var i=this.__eventListeners[t];e?i[i.indexOf(e)]=!1:x.util.array.fill(i,!1)}}function e(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);this.on(t,i)}x.Observable={fire:function(t,e){if(!this.__eventListeners)return this;var i=this.__eventListeners[t];if(!i)return this;for(var r=0,n=i.length;r<n;r++)i[r]&&i[r].call(this,e||{});return this.__eventListeners[t]=i.filter((function(t){return!1!==t})),this},on:function(t,e){if(this.__eventListeners||(this.__eventListeners={}),1===arguments.length)for(var i in t)this.on(i,t[i]);else this.__eventListeners[t]||(this.__eventListeners[t]=[]),this.__eventListeners[t].push(e);return this},once:function(t,i){if(1===arguments.length)for(var r in t)e.call(this,r,t[r]);else e.call(this,t,i);return this},off:function(e,i){if(!this.__eventListeners)return this;if(0===arguments.length)for(e in this.__eventListeners)t.call(this,e);else if(1===arguments.length&&\"object\"==typeof arguments[0])for(var r in e)t.call(this,r,e[r]);else t.call(this,e,i);return this}}}(),x.Collection={_objects:[],add:function(){if(this._objects.push.apply(this._objects,arguments),this._onObjectAdded)for(var t=0,e=arguments.length;t<e;t++)this._onObjectAdded(arguments[t]);return this.renderOnAddRemove&&this.requestRenderAll(),this},insertAt:function(t,e,i){var r=this._objects;return i?r[e]=t:r.splice(e,0,t),this._onObjectAdded&&this._onObjectAdded(t),this.renderOnAddRemove&&this.requestRenderAll(),this},remove:function(){for(var t,e=this._objects,i=!1,r=0,n=arguments.length;r<n;r++)-1!==(t=e.indexOf(arguments[r]))&&(i=!0,e.splice(t,1),this._onObjectRemoved&&this._onObjectRemoved(arguments[r]));return this.renderOnAddRemove&&i&&this.requestRenderAll(),this},forEachObject:function(t,e){for(var i=this.getObjects(),r=0,n=i.length;r<n;r++)t.call(e,i[r],r,i);return this},getObjects:function(t){return void 0===t?this._objects.concat():this._objects.filter((function(e){return e.type===t}))},item:function(t){return this._objects[t]},isEmpty:function(){return 0===this._objects.length},size:function(){return this._objects.length},contains:function(t,e){return this._objects.indexOf(t)>-1||!!e&&this._objects.some((function(e){return\"function\"==typeof e.contains&&e.contains(t,!0)}))},complexity:function(){return this._objects.reduce((function(t,e){return t+=e.complexity?e.complexity():0}),0)}},x.CommonMethods={_setOptions:function(t){for(var e in t)this.set(e,t[e])},_initGradient:function(t,e){!t||!t.colorStops||t instanceof x.Gradient||this.set(e,new x.Gradient(t))},_initPattern:function(t,e,i){!t||!t.source||t instanceof x.Pattern?i&&i():this.set(e,new x.Pattern(t,i))},_setObject:function(t){for(var e in t)this._set(e,t[e])},set:function(t,e){return\"object\"==typeof t?this._setObject(t):this._set(t,e),this},_set:function(t,e){this[t]=e},toggle:function(t){var e=this.get(t);return\"boolean\"==typeof e&&this.set(t,!e),this},get:function(t){return this[t]}},function(t){var e=Math.sqrt,i=Math.atan2,r=Math.pow,n=Math.PI/180,s=Math.PI/2;x.util={cos:function(t){if(0===t)return 1;switch(t<0&&(t=-t),t/s){case 1:case 3:return 0;case 2:return-1}return Math.cos(t)},sin:function(t){if(0===t)return 0;var e=1;switch(t<0&&(e=-1),t/s){case 1:return e;case 2:return 0;case 3:return-e}return Math.sin(t)},removeFromArray:function(t,e){var i=t.indexOf(e);return-1!==i&&t.splice(i,1),t},getRandomInt:function(t,e){return Math.floor(Math.random()*(e-t+1))+t},degreesToRadians:function(t){return t*n},radiansToDegrees:function(t){return t/n},rotatePoint:function(t,e,i){var r=new x.Point(t.x-e.x,t.y-e.y),n=x.util.rotateVector(r,i);return new x.Point(n.x,n.y).addEquals(e)},rotateVector:function(t,e){var i=x.util.sin(e),r=x.util.cos(e);return{x:t.x*r-t.y*i,y:t.x*i+t.y*r}},createVector:function(t,e){return new x.Point(e.x-t.x,e.y-t.y)},calcAngleBetweenVectors:function(t,e){return Math.acos((t.x*e.x+t.y*e.y)/(Math.hypot(t.x,t.y)*Math.hypot(e.x,e.y)))},getHatVector:function(t){return new x.Point(t.x,t.y).multiply(1/Math.hypot(t.x,t.y))},getBisector:function(t,e,i){var r=x.util.createVector(t,e),n=x.util.createVector(t,i),s=x.util.calcAngleBetweenVectors(r,n),o=s*(0===x.util.calcAngleBetweenVectors(x.util.rotateVector(r,s),n)?1:-1)/2;return{vector:x.util.getHatVector(x.util.rotateVector(r,o)),angle:s}},projectStrokeOnPoints:function(t,e,i){var r=[],n=e.strokeWidth/2,s=e.strokeUniform?new x.Point(1/e.scaleX,1/e.scaleY):new x.Point(1,1),o=function(t){var e=n/Math.hypot(t.x,t.y);return new x.Point(t.x*e*s.x,t.y*e*s.y)};return t.length<=1||t.forEach((function(a,l){var h,c,u=new x.Point(a.x,a.y);0===l?(c=t[l+1],h=i?o(x.util.createVector(c,u)).addEquals(u):t[t.length-1]):l===t.length-1?(h=t[l-1],c=i?o(x.util.createVector(h,u)).addEquals(u):t[0]):(h=t[l-1],c=t[l+1]);var p,f,d=x.util.getBisector(u,h,c),g=d.vector,m=d.angle;if(\"miter\"===e.strokeLineJoin&&(p=-n/Math.sin(m/2),f=new x.Point(g.x*p*s.x,g.y*p*s.y),Math.hypot(f.x,f.y)/n<=e.strokeMiterLimit))return r.push(u.add(f)),void r.push(u.subtract(f));p=-n*Math.SQRT2,f=new x.Point(g.x*p*s.x,g.y*p*s.y),r.push(u.add(f)),r.push(u.subtract(f))})),r},transformPoint:function(t,e,i){return i?new x.Point(e[0]*t.x+e[2]*t.y,e[1]*t.x+e[3]*t.y):new x.Point(e[0]*t.x+e[2]*t.y+e[4],e[1]*t.x+e[3]*t.y+e[5])},makeBoundingBoxFromPoints:function(t,e){if(e)for(var i=0;i<t.length;i++)t[i]=x.util.transformPoint(t[i],e);var r=[t[0].x,t[1].x,t[2].x,t[3].x],n=x.util.array.min(r),s=x.util.array.max(r)-n,o=[t[0].y,t[1].y,t[2].y,t[3].y],a=x.util.array.min(o);return{left:n,top:a,width:s,height:x.util.array.max(o)-a}},invertTransform:function(t){var e=1/(t[0]*t[3]-t[1]*t[2]),i=[e*t[3],-e*t[1],-e*t[2],e*t[0]],r=x.util.transformPoint({x:t[4],y:t[5]},i,!0);return i[4]=-r.x,i[5]=-r.y,i},toFixed:function(t,e){return parseFloat(Number(t).toFixed(e))},parseUnit:function(t,e){var i=/\\D{0,2}$/.exec(t),r=parseFloat(t);switch(e||(e=x.Text.DEFAULT_SVG_FONT_SIZE),i[0]){case\"mm\":return r*x.DPI/25.4;case\"cm\":return r*x.DPI/2.54;case\"in\":return r*x.DPI;case\"pt\":return r*x.DPI/72;case\"pc\":return r*x.DPI/72*12;case\"em\":return r*e;default:return r}},falseFunction:function(){return!1},getKlass:function(t,e){return t=x.util.string.camelize(t.charAt(0).toUpperCase()+t.slice(1)),x.util.resolveNamespace(e)[t]},getSvgAttributes:function(t){var e=[\"instantiated_by_use\",\"style\",\"id\",\"class\"];switch(t){case\"linearGradient\":e=e.concat([\"x1\",\"y1\",\"x2\",\"y2\",\"gradientUnits\",\"gradientTransform\"]);break;case\"radialGradient\":e=e.concat([\"gradientUnits\",\"gradientTransform\",\"cx\",\"cy\",\"r\",\"fx\",\"fy\",\"fr\"]);break;case\"stop\":e=e.concat([\"offset\",\"stop-color\",\"stop-opacity\"])}return e},resolveNamespace:function(e){if(!e)return x;var i,r=e.split(\".\"),n=r.length,s=t||x.window;for(i=0;i<n;++i)s=s[r[i]];return s},loadImage:function(t,e,i,r){if(t){var n=x.util.createImage(),s=function(){e&&e.call(i,n,!1),n=n.onload=n.onerror=null};n.onload=s,n.onerror=function(){x.log(\"Error loading \"+n.src),e&&e.call(i,null,!0),n=n.onload=n.onerror=null},0!==t.indexOf(\"data\")&&null!=r&&(n.crossOrigin=r),\"data:image/svg\"===t.substring(0,14)&&(n.onload=null,x.util.loadImageInDom(n,s)),n.src=t}else e&&e.call(i,t)},loadImageInDom:function(t,e){var i=x.document.createElement(\"div\");i.style.width=i.style.height=\"1px\",i.style.left=i.style.top=\"-100%\",i.style.position=\"absolute\",i.appendChild(t),x.document.querySelector(\"body\").appendChild(i),t.onload=function(){e(),i.parentNode.removeChild(i),i=null}},enlivenObjects:function(t,e,i,r){var n=[],s=0,o=(t=t||[]).length;function a(){++s===o&&e&&e(n.filter((function(t){return t})))}o?t.forEach((function(t,e){t&&t.type?x.util.getKlass(t.type,i).fromObject(t,(function(i,s){s||(n[e]=i),r&&r(t,i,s),a()})):a()})):e&&e(n)},enlivenObjectEnlivables:function(t,e,i){var r=x.Object.ENLIVEN_PROPS.filter((function(e){return!!t[e]}));x.util.enlivenObjects(r.map((function(e){return t[e]})),(function(t){var n={};r.forEach((function(i,r){n[i]=t[r],e&&(e[i]=t[r])})),i&&i(n)}))},enlivenPatterns:function(t,e){function i(){++n===s&&e&&e(r)}var r=[],n=0,s=(t=t||[]).length;s?t.forEach((function(t,e){t&&t.source?new x.Pattern(t,(function(t){r[e]=t,i()})):(r[e]=t,i())})):e&&e(r)},groupSVGElements:function(t,e,i){var r;return t&&1===t.length?(void 0!==i&&(t[0].sourcePath=i),t[0]):(e&&(e.width&&e.height?e.centerPoint={x:e.width/2,y:e.height/2}:(delete e.width,delete e.height)),r=new x.Group(t,e),void 0!==i&&(r.sourcePath=i),r)},populateWithProperties:function(t,e,i){if(i&&Array.isArray(i))for(var r=0,n=i.length;r<n;r++)i[r]in t&&(e[i[r]]=t[i[r]])},createCanvasElement:function(){return x.document.createElement(\"canvas\")},copyCanvasElement:function(t){var e=x.util.createCanvasElement();return e.width=t.width,e.height=t.height,e.getContext(\"2d\").drawImage(t,0,0),e},toDataURL:function(t,e,i){return t.toDataURL(\"image/\"+e,i)},createImage:function(){return x.document.createElement(\"img\")},multiplyTransformMatrices:function(t,e,i){return[t[0]*e[0]+t[2]*e[1],t[1]*e[0]+t[3]*e[1],t[0]*e[2]+t[2]*e[3],t[1]*e[2]+t[3]*e[3],i?0:t[0]*e[4]+t[2]*e[5]+t[4],i?0:t[1]*e[4]+t[3]*e[5]+t[5]]},qrDecompose:function(t){var s=i(t[1],t[0]),o=r(t[0],2)+r(t[1],2),a=e(o),l=(t[0]*t[3]-t[2]*t[1])/a,h=i(t[0]*t[2]+t[1]*t[3],o);return{angle:s/n,scaleX:a,scaleY:l,skewX:h/n,skewY:0,translateX:t[4],translateY:t[5]}},calcRotateMatrix:function(t){if(!t.angle)return x.iMatrix.concat();var e=x.util.degreesToRadians(t.angle),i=x.util.cos(e),r=x.util.sin(e);return[i,r,-r,i,0,0]},calcDimensionsMatrix:function(t){var e=void 0===t.scaleX?1:t.scaleX,i=void 0===t.scaleY?1:t.scaleY,r=[t.flipX?-e:e,0,0,t.flipY?-i:i,0,0],n=x.util.multiplyTransformMatrices,s=x.util.degreesToRadians;return t.skewX&&(r=n(r,[1,0,Math.tan(s(t.skewX)),1],!0)),t.skewY&&(r=n(r,[1,Math.tan(s(t.skewY)),0,1],!0)),r},composeMatrix:function(t){var e=[1,0,0,1,t.translateX||0,t.translateY||0],i=x.util.multiplyTransformMatrices;return t.angle&&(e=i(e,x.util.calcRotateMatrix(t))),(1!==t.scaleX||1!==t.scaleY||t.skewX||t.skewY||t.flipX||t.flipY)&&(e=i(e,x.util.calcDimensionsMatrix(t))),e},resetObjectTransform:function(t){t.scaleX=1,t.scaleY=1,t.skewX=0,t.skewY=0,t.flipX=!1,t.flipY=!1,t.rotate(0)},saveObjectTransform:function(t){return{scaleX:t.scaleX,scaleY:t.scaleY,skewX:t.skewX,skewY:t.skewY,angle:t.angle,left:t.left,flipX:t.flipX,flipY:t.flipY,top:t.top}},isTransparent:function(t,e,i,r){r>0&&(e>r?e-=r:e=0,i>r?i-=r:i=0);var n,s=!0,o=t.getImageData(e,i,2*r||1,2*r||1),a=o.data.length;for(n=3;n<a&&!1!==(s=o.data[n]<=0);n+=4);return o=null,s},parsePreserveAspectRatioAttribute:function(t){var e,i=\"meet\",r=t.split(\" \");return r&&r.length&&(\"meet\"!==(i=r.pop())&&\"slice\"!==i?(e=i,i=\"meet\"):r.length&&(e=r.pop())),{meetOrSlice:i,alignX:\"none\"!==e?e.slice(1,4):\"none\",alignY:\"none\"!==e?e.slice(5,8):\"none\"}},clearFabricFontCache:function(t){(t=(t||\"\").toLowerCase())?x.charWidthsCache[t]&&delete x.charWidthsCache[t]:x.charWidthsCache={}},limitDimsByArea:function(t,e){var i=Math.sqrt(e*t),r=Math.floor(e/i);return{x:Math.floor(i),y:r}},capValue:function(t,e,i){return Math.max(t,Math.min(e,i))},findScaleToFit:function(t,e){return Math.min(e.width/t.width,e.height/t.height)},findScaleToCover:function(t,e){return Math.max(e.width/t.width,e.height/t.height)},matrixToSVG:function(t){return\"matrix(\"+t.map((function(t){return x.util.toFixed(t,x.Object.NUM_FRACTION_DIGITS)})).join(\" \")+\")\"},removeTransformFromObject:function(t,e){var i=x.util.invertTransform(e),r=x.util.multiplyTransformMatrices(i,t.calcOwnMatrix());x.util.applyTransformToObject(t,r)},addTransformToObject:function(t,e){x.util.applyTransformToObject(t,x.util.multiplyTransformMatrices(e,t.calcOwnMatrix()))},applyTransformToObject:function(t,e){var i=x.util.qrDecompose(e),r=new x.Point(i.translateX,i.translateY);t.flipX=!1,t.flipY=!1,t.set(\"scaleX\",i.scaleX),t.set(\"scaleY\",i.scaleY),t.skewX=i.skewX,t.skewY=i.skewY,t.angle=i.angle,t.setPositionByOrigin(r,\"center\",\"center\")},sizeAfterTransform:function(t,e,i){var r=t/2,n=e/2,s=[{x:-r,y:-n},{x:r,y:-n},{x:-r,y:n},{x:r,y:n}],o=x.util.calcDimensionsMatrix(i),a=x.util.makeBoundingBoxFromPoints(s,o);return{x:a.width,y:a.height}},mergeClipPaths:function(t,e){var i=t,r=e;i.inverted&&!r.inverted&&(i=e,r=t),x.util.applyTransformToObject(r,x.util.multiplyTransformMatrices(x.util.invertTransform(i.calcTransformMatrix()),r.calcTransformMatrix()));var n=i.inverted&&r.inverted;return n&&(i.inverted=r.inverted=!1),new x.Group([i],{clipPath:r,inverted:n})},hasStyleChanged:function(t,e,i){return i=i||!1,t.fill!==e.fill||t.stroke!==e.stroke||t.strokeWidth!==e.strokeWidth||t.fontSize!==e.fontSize||t.fontFamily!==e.fontFamily||t.fontWeight!==e.fontWeight||t.fontStyle!==e.fontStyle||t.deltaY!==e.deltaY||i&&(t.overline!==e.overline||t.underline!==e.underline||t.linethrough!==e.linethrough)},stylesToArray:function(t,e){t=x.util.object.clone(t,!0);for(var i=e.split(\"\\n\"),r=-1,n={},s=[],o=0;o<i.length;o++)if(t[o])for(var a=0;a<i[o].length;a++){r++;var l=t[o][a];if(l)x.util.hasStyleChanged(n,l,!0)?s.push({start:r,end:r+1,style:l}):s[s.length-1].end++;n=l||{}}else r+=i[o].length;return s},stylesFromArray:function(t,e){if(!Array.isArray(t))return t;for(var i=e.split(\"\\n\"),r=-1,n=0,s={},o=0;o<i.length;o++)for(var a=0;a<i[o].length;a++)r++,t[n]&&t[n].start<=r&&r<t[n].end&&(s[o]=s[o]||{},s[o][a]=Object.assign({},t[n].style),r===t[n].end-1&&n++);return s}}}(t.exports),function(){var t=Array.prototype.join,e={m:2,l:2,h:1,v:1,c:6,s:4,q:4,t:2,a:7},i={m:\"l\",M:\"L\"};function r(t,e,i,r,n,s,o,a,l,h,c){var u=x.util.cos(t),p=x.util.sin(t),f=x.util.cos(e),d=x.util.sin(e),g=i*n*f-r*s*d+o,m=r*n*f+i*s*d+a;return[\"C\",h+l*(-i*n*p-r*s*u),c+l*(-r*n*p+i*s*u),g+l*(i*n*d+r*s*f),m+l*(r*n*d-i*s*f),g,m]}function n(t,e,i,r){var n=Math.atan2(e,t),s=Math.atan2(r,i);return s>=n?s-n:2*Math.PI-(n-s)}function s(t,e,i){for(var s=i[1],o=i[2],a=i[3],l=i[4],h=i[5],c=function(t,e,i,s,o,a,l){var h=Math.PI,c=l*h/180,u=x.util.sin(c),p=x.util.cos(c),f=0,d=0,g=-p*t*.5-u*e*.5,m=-p*e*.5+u*t*.5,v=(i=Math.abs(i))*i,y=(s=Math.abs(s))*s,_=m*m,b=g*g,C=v*y-v*_-y*b,S=0;if(C<0){var w=Math.sqrt(1-C/(v*y));i*=w,s*=w}else S=(o===a?-1:1)*Math.sqrt(C/(v*_+y*b));var D=S*i*m/s,k=-S*s*g/i,T=p*D-u*k+.5*t,E=u*D+p*k+.5*e,A=n(1,0,(g-D)/i,(m-k)/s),O=n((g-D)/i,(m-k)/s,(-g-D)/i,(-m-k)/s);0===a&&O>0?O-=2*h:1===a&&O<0&&(O+=2*h);for(var P=Math.ceil(Math.abs(O/h*2)),F=[],M=O/P,L=8/3*Math.sin(M/4)*Math.sin(M/4)/Math.sin(M/2),R=A+M,B=0;B<P;B++)F[B]=r(A,R,p,u,i,s,T,E,L,f,d),f=F[B][5],d=F[B][6],A=R,R+=M;return F}(i[6]-t,i[7]-e,s,o,l,h,a),u=0,p=c.length;u<p;u++)c[u][1]+=t,c[u][2]+=e,c[u][3]+=t,c[u][4]+=e,c[u][5]+=t,c[u][6]+=e;return c}function o(t,e,i,r){return Math.sqrt((i-t)*(i-t)+(r-e)*(r-e))}function a(t,e,i,r,n,s,o,a){return function(l){var h,c=(h=l)*h*h,u=function(t){return 3*t*t*(1-t)}(l),p=function(t){return 3*t*(1-t)*(1-t)}(l),f=function(t){return(1-t)*(1-t)*(1-t)}(l);return{x:o*c+n*u+i*p+t*f,y:a*c+s*u+r*p+e*f}}}function l(t,e,i,r,n,s,o,a){return function(l){var h=1-l,c=3*h*h*(i-t)+6*h*l*(n-i)+3*l*l*(o-n),u=3*h*h*(r-e)+6*h*l*(s-r)+3*l*l*(a-s);return Math.atan2(u,c)}}function h(t,e,i,r,n,s){return function(o){var a,l=(a=o)*a,h=function(t){return 2*t*(1-t)}(o),c=function(t){return(1-t)*(1-t)}(o);return{x:n*l+i*h+t*c,y:s*l+r*h+e*c}}}function c(t,e,i,r,n,s){return function(o){var a=1-o,l=2*a*(i-t)+2*o*(n-i),h=2*a*(r-e)+2*o*(s-r);return Math.atan2(h,l)}}function u(t,e,i){var r,n,s={x:e,y:i},a=0;for(n=1;n<=100;n+=1)r=t(n/100),a+=o(s.x,s.y,r.x,r.y),s=r;return a}function p(t,e){for(var i,r,n,s=0,a=0,l=t.iterator,h={x:t.x,y:t.y},c=.01,u=t.angleFinder;a<e&&c>1e-4;)i=l(s),n=s,(r=o(h.x,h.y,i.x,i.y))+a>e?(s-=c,c/=2):(h=i,s+=c,a+=r);return i.angle=u(n),i}function f(t){for(var e,i,r,n,s=0,p=t.length,f=0,d=0,g=0,m=0,v=[],y=0;y<p;y++){switch(r={x:f,y:d,command:(e=t[y])[0]},e[0]){case\"M\":r.length=0,g=f=e[1],m=d=e[2];break;case\"L\":r.length=o(f,d,e[1],e[2]),f=e[1],d=e[2];break;case\"C\":i=a(f,d,e[1],e[2],e[3],e[4],e[5],e[6]),n=l(f,d,e[1],e[2],e[3],e[4],e[5],e[6]),r.iterator=i,r.angleFinder=n,r.length=u(i,f,d),f=e[5],d=e[6];break;case\"Q\":i=h(f,d,e[1],e[2],e[3],e[4]),n=c(f,d,e[1],e[2],e[3],e[4]),r.iterator=i,r.angleFinder=n,r.length=u(i,f,d),f=e[3],d=e[4];break;case\"Z\":case\"z\":r.destX=g,r.destY=m,r.length=o(f,d,g,m),f=g,d=m}s+=r.length,v.push(r)}return v.push({length:s,x:f,y:d}),v}x.util.joinPath=function(t){return t.map((function(t){return t.join(\" \")})).join(\" \")},x.util.parsePath=function(t){var r,n,s,o,a,l=[],h=[],c=x.rePathCommand,u=\"[-+]?(?:\\\\d*\\\\.\\\\d+|\\\\d+\\\\.?)(?:[eE][-+]?\\\\d+)?\\\\s*\",p=\"(\"+u+\")\"+x.commaWsp,f=\"([01])\"+x.commaWsp+\"?\",d=new RegExp(p+\"?\"+p+\"?\"+p+f+f+p+\"?(\"+u+\")\",\"g\");if(!t||!t.match)return l;for(var g,m=0,v=(a=t.match(/[mzlhvcsqta][^mzlhvcsqta]*/gi)).length;m<v;m++){o=(r=a[m]).slice(1).trim(),h.length=0;var y=r.charAt(0);if(g=[y],\"a\"===y.toLowerCase())for(var _;_=d.exec(o);)for(var b=1;b<_.length;b++)h.push(_[b]);else for(;s=c.exec(o);)h.push(s[0]);b=0;for(var C=h.length;b<C;b++)n=parseFloat(h[b]),isNaN(n)||g.push(n);var S=e[y.toLowerCase()],w=i[y]||y;if(g.length-1>S)for(var D=1,k=g.length;D<k;D+=S)l.push([y].concat(g.slice(D,D+S))),y=w;else l.push(g)}return l},x.util.makePathSimpler=function(t){var e,i,r,n,o,a,l=0,h=0,c=t.length,u=0,p=0,f=[];for(i=0;i<c;++i){switch(r=!1,(e=t[i].slice(0))[0]){case\"l\":e[0]=\"L\",e[1]+=l,e[2]+=h;case\"L\":l=e[1],h=e[2];break;case\"h\":e[1]+=l;case\"H\":e[0]=\"L\",e[2]=h,l=e[1];break;case\"v\":e[1]+=h;case\"V\":e[0]=\"L\",h=e[1],e[1]=l,e[2]=h;break;case\"m\":e[0]=\"M\",e[1]+=l,e[2]+=h;case\"M\":l=e[1],h=e[2],u=e[1],p=e[2];break;case\"c\":e[0]=\"C\",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h,e[5]+=l,e[6]+=h;case\"C\":o=e[3],a=e[4],l=e[5],h=e[6];break;case\"s\":e[0]=\"S\",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h;case\"S\":\"C\"===n?(o=2*l-o,a=2*h-a):(o=l,a=h),l=e[3],h=e[4],e[0]=\"C\",e[5]=e[3],e[6]=e[4],e[3]=e[1],e[4]=e[2],e[1]=o,e[2]=a,o=e[3],a=e[4];break;case\"q\":e[0]=\"Q\",e[1]+=l,e[2]+=h,e[3]+=l,e[4]+=h;case\"Q\":o=e[1],a=e[2],l=e[3],h=e[4];break;case\"t\":e[0]=\"T\",e[1]+=l,e[2]+=h;case\"T\":\"Q\"===n?(o=2*l-o,a=2*h-a):(o=l,a=h),e[0]=\"Q\",l=e[1],h=e[2],e[1]=o,e[2]=a,e[3]=l,e[4]=h;break;case\"a\":e[0]=\"A\",e[6]+=l,e[7]+=h;case\"A\":r=!0,f=f.concat(s(l,h,e)),l=e[6],h=e[7];break;case\"z\":case\"Z\":l=u,h=p}r||f.push(e),n=e[0]}return f},x.util.getSmoothPathFromPoints=function(t,e){var i,r=[],n=new x.Point(t[0].x,t[0].y),s=new x.Point(t[1].x,t[1].y),o=t.length,a=1,l=0,h=o>2;for(e=e||0,h&&(a=t[2].x<s.x?-1:t[2].x===s.x?0:1,l=t[2].y<s.y?-1:t[2].y===s.y?0:1),r.push([\"M\",n.x-a*e,n.y-l*e]),i=1;i<o;i++){if(!n.eq(s)){var c=n.midPointFrom(s);r.push([\"Q\",n.x,n.y,c.x,c.y])}n=t[i],i+1<t.length&&(s=t[i+1])}return h&&(a=n.x>t[i-2].x?1:n.x===t[i-2].x?0:-1,l=n.y>t[i-2].y?1:n.y===t[i-2].y?0:-1),r.push([\"L\",n.x+a*e,n.y+l*e]),r},x.util.getPathSegmentsInfo=f,x.util.getBoundsOfCurve=function(e,i,r,n,s,o,a,l){var h;if(x.cachesBoundsOfCurve&&(h=t.call(arguments),x.boundsOfCurveCache[h]))return x.boundsOfCurveCache[h];var c,u,p,f,d,g,m,v,y=Math.sqrt,_=Math.min,b=Math.max,C=Math.abs,S=[],w=[[],[]];u=6*e-12*r+6*s,c=-3*e+9*r-9*s+3*a,p=3*r-3*e;for(var D=0;D<2;++D)if(D>0&&(u=6*i-12*n+6*o,c=-3*i+9*n-9*o+3*l,p=3*n-3*i),C(c)<1e-12){if(C(u)<1e-12)continue;0<(f=-p/u)&&f<1&&S.push(f)}else(m=u*u-4*p*c)<0||(0<(d=(-u+(v=y(m)))/(2*c))&&d<1&&S.push(d),0<(g=(-u-v)/(2*c))&&g<1&&S.push(g));for(var k,T,E,A=S.length,O=A;A--;)k=(E=1-(f=S[A]))*E*E*e+3*E*E*f*r+3*E*f*f*s+f*f*f*a,w[0][A]=k,T=E*E*E*i+3*E*E*f*n+3*E*f*f*o+f*f*f*l,w[1][A]=T;w[0][O]=e,w[1][O]=i,w[0][O+1]=a,w[1][O+1]=l;var P=[{x:_.apply(null,w[0]),y:_.apply(null,w[1])},{x:b.apply(null,w[0]),y:b.apply(null,w[1])}];return x.cachesBoundsOfCurve&&(x.boundsOfCurveCache[h]=P),P},x.util.getPointOnPath=function(t,e,i){i||(i=f(t));for(var r=0;e-i[r].length>0&&r<i.length-2;)e-=i[r].length,r++;var n,s=i[r],o=e/s.length,a=s.command,l=t[r];switch(a){case\"M\":return{x:s.x,y:s.y,angle:0};case\"Z\":case\"z\":return(n=new x.Point(s.x,s.y).lerp(new x.Point(s.destX,s.destY),o)).angle=Math.atan2(s.destY-s.y,s.destX-s.x),n;case\"L\":return(n=new x.Point(s.x,s.y).lerp(new x.Point(l[1],l[2]),o)).angle=Math.atan2(l[2]-s.y,l[1]-s.x),n;case\"C\":case\"Q\":return p(s,e)}},x.util.transformPath=function(t,e,i){return i&&(e=x.util.multiplyTransformMatrices(e,[1,0,0,1,-i.x,-i.y])),t.map((function(t){for(var i=t.slice(0),r={},n=1;n<t.length-1;n+=2)r.x=t[n],r.y=t[n+1],r=x.util.transformPoint(r,e),i[n]=r.x,i[n+1]=r.y;return i}))}}(),function(){var t=Array.prototype.slice;function e(t,e,i){if(t&&0!==t.length){var r=t.length-1,n=e?t[r][e]:t[r];if(e)for(;r--;)i(t[r][e],n)&&(n=t[r][e]);else for(;r--;)i(t[r],n)&&(n=t[r]);return n}}x.util.array={fill:function(t,e){for(var i=t.length;i--;)t[i]=e;return t},invoke:function(e,i){for(var r=t.call(arguments,2),n=[],s=0,o=e.length;s<o;s++)n[s]=r.length?e[s][i].apply(e[s],r):e[s][i].call(e[s]);return n},min:function(t,i){return e(t,i,(function(t,e){return t<e}))},max:function(t,i){return e(t,i,(function(t,e){return t>=e}))}}}(),function(){function t(e,i,r){if(r)if(!x.isLikelyNode&&i instanceof Element)e=i;else if(i instanceof Array){e=[];for(var n=0,s=i.length;n<s;n++)e[n]=t({},i[n],r)}else if(i&&\"object\"==typeof i)for(var o in i)\"canvas\"===o||\"group\"===o?e[o]=null:i.hasOwnProperty(o)&&(e[o]=t({},i[o],r));else e=i;else for(var o in i)e[o]=i[o];return e}x.util.object={extend:t,clone:function(e,i){return t({},e,i)}},x.util.object.extend(x.util,x.Observable)}(),function(){function t(t,e){var i=t.charCodeAt(e);if(isNaN(i))return\"\";if(i<55296||i>57343)return t.charAt(e);if(55296<=i&&i<=56319){if(t.length<=e+1)throw\"High surrogate without following low surrogate\";var r=t.charCodeAt(e+1);if(56320>r||r>57343)throw\"High surrogate without following low surrogate\";return t.charAt(e)+t.charAt(e+1)}if(0===e)throw\"Low surrogate without preceding high surrogate\";var n=t.charCodeAt(e-1);if(55296>n||n>56319)throw\"Low surrogate without preceding high surrogate\";return!1}x.util.string={camelize:function(t){return t.replace(/-+(.)?/g,(function(t,e){return e?e.toUpperCase():\"\"}))},capitalize:function(t,e){return t.charAt(0).toUpperCase()+(e?t.slice(1):t.slice(1).toLowerCase())},escapeXml:function(t){return t.replace(/&/g,\"&amp;\").replace(/\"/g,\"&quot;\").replace(/'/g,\"&apos;\").replace(/</g,\"&lt;\").replace(/>/g,\"&gt;\")},graphemeSplit:function(e){var i,r=0,n=[];for(r=0;r<e.length;r++)!1!==(i=t(e,r))&&n.push(i);return n}}}(),function(){var t=Array.prototype.slice,e=function(){},i=function(){for(var t in{toString:1})if(\"toString\"===t)return!1;return!0}(),r=function(t,e,r){for(var n in e)n in t.prototype&&\"function\"==typeof t.prototype[n]&&(e[n]+\"\").indexOf(\"callSuper\")>-1?t.prototype[n]=function(t){return function(){var i=this.constructor.superclass;this.constructor.superclass=r;var n=e[t].apply(this,arguments);if(this.constructor.superclass=i,\"initialize\"!==t)return n}}(n):t.prototype[n]=e[n],i&&(e.toString!==Object.prototype.toString&&(t.prototype.toString=e.toString),e.valueOf!==Object.prototype.valueOf&&(t.prototype.valueOf=e.valueOf))};function n(){}function s(e){for(var i=null,r=this;r.constructor.superclass;){var n=r.constructor.superclass.prototype[e];if(r[e]!==n){i=n;break}r=r.constructor.superclass.prototype}return i?arguments.length>1?i.apply(this,t.call(arguments,1)):i.call(this):console.log(\"tried to callSuper \"+e+\", method not found in prototype chain\",this)}x.util.createClass=function(){var i=null,o=t.call(arguments,0);function a(){this.initialize.apply(this,arguments)}\"function\"==typeof o[0]&&(i=o.shift()),a.superclass=i,a.subclasses=[],i&&(n.prototype=i.prototype,a.prototype=new n,i.subclasses.push(a));for(var l=0,h=o.length;l<h;l++)r(a,o[l],i);return a.prototype.initialize||(a.prototype.initialize=e),a.prototype.constructor=a,a.prototype.callSuper=s,a}}(),i=!!x.document.createElement(\"div\").attachEvent,r=[\"touchstart\",\"touchmove\",\"touchend\"],x.util.addListener=function(t,e,r,n){t&&t.addEventListener(e,r,!i&&n)},x.util.removeListener=function(t,e,r,n){t&&t.removeEventListener(e,r,!i&&n)},x.util.getPointer=function(t){var e=t.target,i=x.util.getScrollLeftTop(e),r=function(t){var e=t.changedTouches;return e&&e[0]?e[0]:t}(t);return{x:r.clientX+i.left,y:r.clientY+i.top}},x.util.isTouchEvent=function(t){return r.indexOf(t.type)>-1||\"touch\"===t.pointerType},n=x.document.createElement(\"div\"),s=\"string\"==typeof n.style.opacity,o=\"string\"==typeof n.style.filter,a=/alpha\\s*\\(\\s*opacity\\s*=\\s*([^\\)]+)\\)/,l=function(t){return t},s?l=function(t,e){return t.style.opacity=e,t}:o&&(l=function(t,e){var i=t.style;return t.currentStyle&&!t.currentStyle.hasLayout&&(i.zoom=1),a.test(i.filter)?(e=e>=.9999?\"\":\"alpha(opacity=\"+100*e+\")\",i.filter=i.filter.replace(a,e)):i.filter+=\" alpha(opacity=\"+100*e+\")\",t}),x.util.setStyle=function(t,e){var i=t.style;if(!i)return t;if(\"string\"==typeof e)return t.style.cssText+=\";\"+e,e.indexOf(\"opacity\")>-1?l(t,e.match(/opacity:\\s*(\\d?\\.?\\d*)/)[1]):t;for(var r in e)if(\"opacity\"===r)l(t,e[r]);else{var n=\"float\"===r||\"cssFloat\"===r?void 0===i.styleFloat?\"cssFloat\":\"styleFloat\":r;i.setProperty(n,e[r])}return t},function(){var t=Array.prototype.slice;var e,i,r,n,s=function(e){return t.call(e,0)};try{e=s(x.document.childNodes)instanceof Array}catch(t){}function o(t,e){var i=x.document.createElement(t);for(var r in e)\"class\"===r?i.className=e[r]:\"for\"===r?i.htmlFor=e[r]:i.setAttribute(r,e[r]);return i}function a(t){for(var e=0,i=0,r=x.document.documentElement,n=x.document.body||{scrollLeft:0,scrollTop:0};t&&(t.parentNode||t.host)&&((t=t.parentNode||t.host)===x.document?(e=n.scrollLeft||r.scrollLeft||0,i=n.scrollTop||r.scrollTop||0):(e+=t.scrollLeft||0,i+=t.scrollTop||0),1!==t.nodeType||\"fixed\"!==t.style.position););return{left:e,top:i}}e||(s=function(t){for(var e=new Array(t.length),i=t.length;i--;)e[i]=t[i];return e}),i=x.document.defaultView&&x.document.defaultView.getComputedStyle?function(t,e){var i=x.document.defaultView.getComputedStyle(t,null);return i?i[e]:void 0}:function(t,e){var i=t.style[e];return!i&&t.currentStyle&&(i=t.currentStyle[e]),i},r=x.document.documentElement.style,n=\"userSelect\"in r?\"userSelect\":\"MozUserSelect\"in r?\"MozUserSelect\":\"WebkitUserSelect\"in r?\"WebkitUserSelect\":\"KhtmlUserSelect\"in r?\"KhtmlUserSelect\":\"\",x.util.makeElementUnselectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=x.util.falseFunction),n?t.style[n]=\"none\":\"string\"==typeof t.unselectable&&(t.unselectable=\"on\"),t},x.util.makeElementSelectable=function(t){return void 0!==t.onselectstart&&(t.onselectstart=null),n?t.style[n]=\"\":\"string\"==typeof t.unselectable&&(t.unselectable=\"\"),t},x.util.setImageSmoothing=function(t,e){t.imageSmoothingEnabled=t.imageSmoothingEnabled||t.webkitImageSmoothingEnabled||t.mozImageSmoothingEnabled||t.msImageSmoothingEnabled||t.oImageSmoothingEnabled,t.imageSmoothingEnabled=e},x.util.getById=function(t){return\"string\"==typeof t?x.document.getElementById(t):t},x.util.toArray=s,x.util.addClass=function(t,e){t&&-1===(\" \"+t.className+\" \").indexOf(\" \"+e+\" \")&&(t.className+=(t.className?\" \":\"\")+e)},x.util.makeElement=o,x.util.wrapElement=function(t,e,i){return\"string\"==typeof e&&(e=o(e,i)),t.parentNode&&t.parentNode.replaceChild(e,t),e.appendChild(t),e},x.util.getScrollLeftTop=a,x.util.getElementOffset=function(t){var e,r,n=t&&t.ownerDocument,s={left:0,top:0},o={left:0,top:0},l={borderLeftWidth:\"left\",borderTopWidth:\"top\",paddingLeft:\"left\",paddingTop:\"top\"};if(!n)return o;for(var h in l)o[l[h]]+=parseInt(i(t,h),10)||0;return e=n.documentElement,void 0!==t.getBoundingClientRect&&(s=t.getBoundingClientRect()),r=a(t),{left:s.left+r.left-(e.clientLeft||0)+o.left,top:s.top+r.top-(e.clientTop||0)+o.top}},x.util.getNodeCanvas=function(t){var e=x.jsdomImplForWrapper(t);return e._canvas||e._image},x.util.cleanUpJsdomNode=function(t){if(x.isLikelyNode){var e=x.jsdomImplForWrapper(t);e&&(e._image=null,e._canvas=null,e._currentSrc=null,e._attributes=null,e._classList=null)}}}(),function(){function t(){}x.util.request=function(e,i){i||(i={});var r=i.method?i.method.toUpperCase():\"GET\",n=i.onComplete||function(){},s=new x.window.XMLHttpRequest,o=i.body||i.parameters;return s.onreadystatechange=function(){4===s.readyState&&(n(s),s.onreadystatechange=t)},\"GET\"===r&&(o=null,\"string\"==typeof i.parameters&&(e=function(t,e){return t+(/\\?/.test(t)?\"&\":\"?\")+e}(e,i.parameters))),s.open(r,e,!0),\"POST\"!==r&&\"PUT\"!==r||s.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\"),s.send(o),s}}(),x.log=console.log,x.warn=console.warn,function(){var t=x.util.object.extend,e=x.util.object.clone,i=[];function r(){return!1}function n(t,e,i,r){return-i*Math.cos(t/r*(Math.PI/2))+i+e}x.util.object.extend(i,{cancelAll:function(){var t=this.splice(0);return t.forEach((function(t){t.cancel()})),t},cancelByCanvas:function(t){if(!t)return[];var e=this.filter((function(e){return\"object\"==typeof e.target&&e.target.canvas===t}));return e.forEach((function(t){t.cancel()})),e},cancelByTarget:function(t){var e=this.findAnimationsByTarget(t);return e.forEach((function(t){t.cancel()})),e},findAnimationIndex:function(t){return this.indexOf(this.findAnimation(t))},findAnimation:function(t){return this.find((function(e){return e.cancel===t}))},findAnimationsByTarget:function(t){return t?this.filter((function(e){return e.target===t})):[]}});var s=x.window.requestAnimationFrame||x.window.webkitRequestAnimationFrame||x.window.mozRequestAnimationFrame||x.window.oRequestAnimationFrame||x.window.msRequestAnimationFrame||function(t){return x.window.setTimeout(t,1e3/60)},o=x.window.cancelAnimationFrame||x.window.clearTimeout;function a(){return s.apply(x.window,arguments)}x.util.animate=function(i){i||(i={});var s,o=!1,l=function(){var t=x.runningAnimations.indexOf(s);return t>-1&&x.runningAnimations.splice(t,1)[0]};return s=t(e(i),{cancel:function(){return o=!0,l()},currentValue:\"startValue\"in i?i.startValue:0,completionRate:0,durationRate:0}),x.runningAnimations.push(s),a((function(t){var e,h=t||+new Date,c=i.duration||500,u=h+c,p=i.onChange||r,f=i.abort||r,d=i.onComplete||r,g=i.easing||n,m=\"startValue\"in i&&i.startValue.length>0,v=\"startValue\"in i?i.startValue:0,y=\"endValue\"in i?i.endValue:100,x=i.byValue||(m?v.map((function(t,e){return y[e]-v[e]})):y-v);i.onStart&&i.onStart(),function t(i){var r=(e=i||+new Date)>u?c:e-h,n=r/c,_=m?v.map((function(t,e){return g(r,v[e],x[e],c)})):g(r,v,x,c),b=m?Math.abs((_[0]-v[0])/x[0]):Math.abs((_-v)/x);if(s.currentValue=m?_.slice():_,s.completionRate=b,s.durationRate=n,!o){if(!f(_,b,n))return e>u?(s.currentValue=m?y.slice():y,s.completionRate=1,s.durationRate=1,p(m?y.slice():y,1,1),d(y,1,1),void l()):(p(_,b,n),void a(t));l()}}(h)})),s.cancel},x.util.requestAnimFrame=a,x.util.cancelAnimFrame=function(){return o.apply(x.window,arguments)},x.runningAnimations=i}(),function(){function t(t,e,i){var r=\"rgba(\"+parseInt(t[0]+i*(e[0]-t[0]),10)+\",\"+parseInt(t[1]+i*(e[1]-t[1]),10)+\",\"+parseInt(t[2]+i*(e[2]-t[2]),10);return r+=\",\"+(t&&e?parseFloat(t[3]+i*(e[3]-t[3])):1),r+=\")\"}x.util.animateColor=function(e,i,r,n){var s=new x.Color(e).getSource(),o=new x.Color(i).getSource(),a=n.onComplete,l=n.onChange;return n=n||{},x.util.animate(x.util.object.extend(n,{duration:r||500,startValue:s,endValue:o,byValue:o,easing:function(e,i,r,s){return t(i,r,n.colorEasing?n.colorEasing(e,s):1-Math.cos(e/s*(Math.PI/2)))},onComplete:function(e,i,r){if(a)return a(t(o,o,0),i,r)},onChange:function(e,i,r){if(l){if(Array.isArray(e))return l(t(e,e,0),i,r);l(e,i,r)}}}))}}(),function(){function t(t,e,i,r){return t<Math.abs(e)?(t=e,r=i/4):r=0===e&&0===t?i/(2*Math.PI)*Math.asin(1):i/(2*Math.PI)*Math.asin(e/t),{a:t,c:e,p:i,s:r}}function e(t,e,i){return t.a*Math.pow(2,10*(e-=1))*Math.sin((e*i-t.s)*(2*Math.PI)/t.p)}function i(t,e,i,n){return i-r(n-t,0,i,n)+e}function r(t,e,i,r){return(t/=r)<1/2.75?i*(7.5625*t*t)+e:t<2/2.75?i*(7.5625*(t-=1.5/2.75)*t+.75)+e:t<2.5/2.75?i*(7.5625*(t-=2.25/2.75)*t+.9375)+e:i*(7.5625*(t-=2.625/2.75)*t+.984375)+e}x.util.ease={easeInQuad:function(t,e,i,r){return i*(t/=r)*t+e},easeOutQuad:function(t,e,i,r){return-i*(t/=r)*(t-2)+e},easeInOutQuad:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t+e:-i/2*(--t*(t-2)-1)+e},easeInCubic:function(t,e,i,r){return i*(t/=r)*t*t+e},easeOutCubic:function(t,e,i,r){return i*((t=t/r-1)*t*t+1)+e},easeInOutCubic:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t+e:i/2*((t-=2)*t*t+2)+e},easeInQuart:function(t,e,i,r){return i*(t/=r)*t*t*t+e},easeOutQuart:function(t,e,i,r){return-i*((t=t/r-1)*t*t*t-1)+e},easeInOutQuart:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t*t+e:-i/2*((t-=2)*t*t*t-2)+e},easeInQuint:function(t,e,i,r){return i*(t/=r)*t*t*t*t+e},easeOutQuint:function(t,e,i,r){return i*((t=t/r-1)*t*t*t*t+1)+e},easeInOutQuint:function(t,e,i,r){return(t/=r/2)<1?i/2*t*t*t*t*t+e:i/2*((t-=2)*t*t*t*t+2)+e},easeInSine:function(t,e,i,r){return-i*Math.cos(t/r*(Math.PI/2))+i+e},easeOutSine:function(t,e,i,r){return i*Math.sin(t/r*(Math.PI/2))+e},easeInOutSine:function(t,e,i,r){return-i/2*(Math.cos(Math.PI*t/r)-1)+e},easeInExpo:function(t,e,i,r){return 0===t?e:i*Math.pow(2,10*(t/r-1))+e},easeOutExpo:function(t,e,i,r){return t===r?e+i:i*(1-Math.pow(2,-10*t/r))+e},easeInOutExpo:function(t,e,i,r){return 0===t?e:t===r?e+i:(t/=r/2)<1?i/2*Math.pow(2,10*(t-1))+e:i/2*(2-Math.pow(2,-10*--t))+e},easeInCirc:function(t,e,i,r){return-i*(Math.sqrt(1-(t/=r)*t)-1)+e},easeOutCirc:function(t,e,i,r){return i*Math.sqrt(1-(t=t/r-1)*t)+e},easeInOutCirc:function(t,e,i,r){return(t/=r/2)<1?-i/2*(Math.sqrt(1-t*t)-1)+e:i/2*(Math.sqrt(1-(t-=2)*t)+1)+e},easeInElastic:function(i,r,n,s){var o=0;return 0===i?r:1===(i/=s)?r+n:(o||(o=.3*s),-e(t(n,n,o,1.70158),i,s)+r)},easeOutElastic:function(e,i,r,n){var s=0;if(0===e)return i;if(1===(e/=n))return i+r;s||(s=.3*n);var o=t(r,r,s,1.70158);return o.a*Math.pow(2,-10*e)*Math.sin((e*n-o.s)*(2*Math.PI)/o.p)+o.c+i},easeInOutElastic:function(i,r,n,s){var o=0;if(0===i)return r;if(2===(i/=s/2))return r+n;o||(o=s*(.3*1.5));var a=t(n,n,o,1.70158);return i<1?-.5*e(a,i,s)+r:a.a*Math.pow(2,-10*(i-=1))*Math.sin((i*s-a.s)*(2*Math.PI)/a.p)*.5+a.c+r},easeInBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),i*(t/=r)*t*((n+1)*t-n)+e},easeOutBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),i*((t=t/r-1)*t*((n+1)*t+n)+1)+e},easeInOutBack:function(t,e,i,r,n){return void 0===n&&(n=1.70158),(t/=r/2)<1?i/2*(t*t*((1+(n*=1.525))*t-n))+e:i/2*((t-=2)*t*((1+(n*=1.525))*t+n)+2)+e},easeInBounce:i,easeOutBounce:r,easeInOutBounce:function(t,e,n,s){return t<s/2?.5*i(2*t,0,n,s)+e:.5*r(2*t-s,0,n,s)+.5*n+e}}}(),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n=e.util.toFixed,s=e.util.parseUnit,o=e.util.multiplyTransformMatrices,a={cx:\"left\",x:\"left\",r:\"radius\",cy:\"top\",y:\"top\",display:\"visible\",visibility:\"visible\",transform:\"transformMatrix\",\"fill-opacity\":\"fillOpacity\",\"fill-rule\":\"fillRule\",\"font-family\":\"fontFamily\",\"font-size\":\"fontSize\",\"font-style\":\"fontStyle\",\"font-weight\":\"fontWeight\",\"letter-spacing\":\"charSpacing\",\"paint-order\":\"paintFirst\",\"stroke-dasharray\":\"strokeDashArray\",\"stroke-dashoffset\":\"strokeDashOffset\",\"stroke-linecap\":\"strokeLineCap\",\"stroke-linejoin\":\"strokeLineJoin\",\"stroke-miterlimit\":\"strokeMiterLimit\",\"stroke-opacity\":\"strokeOpacity\",\"stroke-width\":\"strokeWidth\",\"text-decoration\":\"textDecoration\",\"text-anchor\":\"textAnchor\",opacity:\"opacity\",\"clip-path\":\"clipPath\",\"clip-rule\":\"clipRule\",\"vector-effect\":\"strokeUniform\",\"image-rendering\":\"imageSmoothing\"},l={stroke:\"strokeOpacity\",fill:\"fillOpacity\"},h=\"font-size\",c=\"clip-path\";function u(t){return t in a?a[t]:t}function p(t,i,r,n){var a,l=Array.isArray(i);if(\"fill\"!==t&&\"stroke\"!==t||\"none\"!==i){if(\"strokeUniform\"===t)return\"non-scaling-stroke\"===i;if(\"strokeDashArray\"===t)i=\"none\"===i?null:i.replace(/,/g,\" \").split(/\\s+/).map(parseFloat);else if(\"transformMatrix\"===t)i=r&&r.transformMatrix?o(r.transformMatrix,e.parseTransformAttribute(i)):e.parseTransformAttribute(i);else if(\"visible\"===t)i=\"none\"!==i&&\"hidden\"!==i,r&&!1===r.visible&&(i=!1);else if(\"opacity\"===t)i=parseFloat(i),r&&void 0!==r.opacity&&(i*=r.opacity);else if(\"textAnchor\"===t)i=\"start\"===i?\"left\":\"end\"===i?\"right\":\"center\";else if(\"charSpacing\"===t)a=s(i,n)/n*1e3;else if(\"paintFirst\"===t){var h=i.indexOf(\"fill\"),c=i.indexOf(\"stroke\");i=\"fill\";(h>-1&&c>-1&&c<h||-1===h&&c>-1)&&(i=\"stroke\")}else{if(\"href\"===t||\"xlink:href\"===t||\"font\"===t)return i;if(\"imageSmoothing\"===t)return\"optimizeQuality\"===i;a=l?i.map(s):s(i,n)}}else i=\"\";return!l&&isNaN(a)?i:a}function f(t){return new RegExp(\"^(\"+t.join(\"|\")+\")\\\\b\",\"i\")}function d(t,e){var i,r,n,s,o=[];for(n=0,s=e.length;n<s;n++)i=e[n],r=t.getElementsByTagName(i),o=o.concat(Array.prototype.slice.call(r));return o}function g(t,e){var i,r=!0;return(i=m(t,e.pop()))&&e.length&&(r=function(t,e){var i,r=!0;for(;t.parentNode&&1===t.parentNode.nodeType&&e.length;)r&&(i=e.pop()),r=m(t=t.parentNode,i);return 0===e.length}(t,e)),i&&r&&0===e.length}function m(t,e){var i,r,n=t.nodeName,s=t.getAttribute(\"class\"),o=t.getAttribute(\"id\");if(i=new RegExp(\"^\"+n,\"i\"),e=e.replace(i,\"\"),o&&e.length&&(i=new RegExp(\"#\"+o+\"(?![a-zA-Z\\\\-]+)\",\"i\"),e=e.replace(i,\"\")),s&&e.length)for(r=(s=s.split(\" \")).length;r--;)i=new RegExp(\"\\\\.\"+s[r]+\"(?![a-zA-Z\\\\-]+)\",\"i\"),e=e.replace(i,\"\");return 0===e.length}function v(t,e){var i;if(t.getElementById&&(i=t.getElementById(e)),i)return i;var r,n,s,o=t.getElementsByTagName(\"*\");for(n=0,s=o.length;n<s;n++)if(e===(r=o[n]).getAttribute(\"id\"))return r}e.svgValidTagNamesRegEx=f([\"path\",\"circle\",\"polygon\",\"polyline\",\"ellipse\",\"rect\",\"line\",\"image\",\"text\"]),e.svgViewBoxElementsRegEx=f([\"symbol\",\"image\",\"marker\",\"pattern\",\"view\",\"svg\"]),e.svgInvalidAncestorsRegEx=f([\"pattern\",\"defs\",\"symbol\",\"metadata\",\"clipPath\",\"mask\",\"desc\"]),e.svgValidParentsRegEx=f([\"symbol\",\"g\",\"a\",\"svg\",\"clipPath\",\"defs\"]),e.cssRules={},e.gradientDefs={},e.clipPaths={},e.parseTransformAttribute=function(){function t(t,i,r){t[r]=Math.tan(e.util.degreesToRadians(i[0]))}var i=e.iMatrix,r=e.reNum,n=e.commaWsp,s=\"(?:\"+(\"(?:(matrix)\\\\s*\\\\(\\\\s*(\"+r+\")\"+n+\"(\"+r+\")\"+n+\"(\"+r+\")\"+n+\"(\"+r+\")\"+n+\"(\"+r+\")\"+n+\"(\"+r+\")\\\\s*\\\\))\")+\"|\"+(\"(?:(translate)\\\\s*\\\\(\\\\s*(\"+r+\")(?:\"+n+\"(\"+r+\"))?\\\\s*\\\\))\")+\"|\"+(\"(?:(scale)\\\\s*\\\\(\\\\s*(\"+r+\")(?:\"+n+\"(\"+r+\"))?\\\\s*\\\\))\")+\"|\"+(\"(?:(rotate)\\\\s*\\\\(\\\\s*(\"+r+\")(?:\"+n+\"(\"+r+\")\"+n+\"(\"+r+\"))?\\\\s*\\\\))\")+\"|\"+(\"(?:(skewX)\\\\s*\\\\(\\\\s*(\"+r+\")\\\\s*\\\\))\")+\"|\"+(\"(?:(skewY)\\\\s*\\\\(\\\\s*(\"+r+\")\\\\s*\\\\))\")+\")\",o=new RegExp(\"^\\\\s*(?:\"+(\"(?:\"+s+\"(?:\"+n+\"*\"+s+\")*)\")+\"?)\\\\s*$\"),a=new RegExp(s,\"g\");return function(r){var n=i.concat(),l=[];if(!r||r&&!o.test(r))return n;r.replace(a,(function(r){var o=new RegExp(s).exec(r).filter((function(t){return!!t})),a=o[1],h=o.slice(2).map(parseFloat);switch(a){case\"translate\":!function(t,e){t[4]=e[0],2===e.length&&(t[5]=e[1])}(n,h);break;case\"rotate\":h[0]=e.util.degreesToRadians(h[0]),function(t,i){var r=e.util.cos(i[0]),n=e.util.sin(i[0]),s=0,o=0;3===i.length&&(s=i[1],o=i[2]),t[0]=r,t[1]=n,t[2]=-n,t[3]=r,t[4]=s-(r*s-n*o),t[5]=o-(n*s+r*o)}(n,h);break;case\"scale\":!function(t,e){var i=e[0],r=2===e.length?e[1]:e[0];t[0]=i,t[3]=r}(n,h);break;case\"skewX\":t(n,h,2);break;case\"skewY\":t(n,h,1);break;case\"matrix\":n=h}l.push(n.concat()),n=i.concat()}));for(var h=l[0];l.length>1;)l.shift(),h=e.util.multiplyTransformMatrices(h,l[0]);return h}}();var y=new RegExp(\"^\\\\s*(\"+e.reNum+\"+)\\\\s*,?\\\\s*(\"+e.reNum+\"+)\\\\s*,?\\\\s*(\"+e.reNum+\"+)\\\\s*,?\\\\s*(\"+e.reNum+\"+)\\\\s*$\");function x(t){if(!e.svgViewBoxElementsRegEx.test(t.nodeName))return{};var i,r,n,o,a,l,h=t.getAttribute(\"viewBox\"),c=1,u=1,p=t.getAttribute(\"width\"),f=t.getAttribute(\"height\"),d=t.getAttribute(\"x\")||0,g=t.getAttribute(\"y\")||0,m=t.getAttribute(\"preserveAspectRatio\")||\"\",v=!h||!(h=h.match(y)),x=!p||!f||\"100%\"===p||\"100%\"===f,_=v&&x,b={},C=\"\",S=0,w=0;if(b.width=0,b.height=0,b.toBeParsed=_,v&&(d||g)&&t.parentNode&&\"#document\"!==t.parentNode.nodeName&&(C=\" translate(\"+s(d)+\" \"+s(g)+\") \",a=(t.getAttribute(\"transform\")||\"\")+C,t.setAttribute(\"transform\",a),t.removeAttribute(\"x\"),t.removeAttribute(\"y\")),_)return b;if(v)return b.width=s(p),b.height=s(f),b;if(i=-parseFloat(h[1]),r=-parseFloat(h[2]),n=parseFloat(h[3]),o=parseFloat(h[4]),b.minX=i,b.minY=r,b.viewBoxWidth=n,b.viewBoxHeight=o,x?(b.width=n,b.height=o):(b.width=s(p),b.height=s(f),c=b.width/n,u=b.height/o),\"none\"!==(m=e.util.parsePreserveAspectRatioAttribute(m)).alignX&&(\"meet\"===m.meetOrSlice&&(u=c=c>u?u:c),\"slice\"===m.meetOrSlice&&(u=c=c>u?c:u),S=b.width-n*c,w=b.height-o*c,\"Mid\"===m.alignX&&(S/=2),\"Mid\"===m.alignY&&(w/=2),\"Min\"===m.alignX&&(S=0),\"Min\"===m.alignY&&(w=0)),1===c&&1===u&&0===i&&0===r&&0===d&&0===g)return b;if((d||g)&&\"#document\"!==t.parentNode.nodeName&&(C=\" translate(\"+s(d)+\" \"+s(g)+\") \"),a=C+\" matrix(\"+c+\" 0 0 \"+u+\" \"+(i*c+S)+\" \"+(r*u+w)+\") \",\"svg\"===t.nodeName){for(l=t.ownerDocument.createElementNS(e.svgNS,\"g\");t.firstChild;)l.appendChild(t.firstChild);t.appendChild(l)}else(l=t).removeAttribute(\"x\"),l.removeAttribute(\"y\"),a=l.getAttribute(\"transform\")+a;return l.setAttribute(\"transform\",a),b}function _(t,e){var i=\"xlink:href\",r=v(t,e.getAttribute(i).slice(1));if(r&&r.getAttribute(i)&&_(t,r),[\"gradientTransform\",\"x1\",\"x2\",\"y1\",\"y2\",\"gradientUnits\",\"cx\",\"cy\",\"r\",\"fx\",\"fy\"].forEach((function(t){r&&!e.hasAttribute(t)&&r.hasAttribute(t)&&e.setAttribute(t,r.getAttribute(t))})),!e.children.length)for(var n=r.cloneNode(!0);n.firstChild;)e.appendChild(n.firstChild);e.removeAttribute(i)}e.parseSVGDocument=function(t,i,n,s){if(t){!function(t){for(var i=d(t,[\"use\",\"svg:use\"]),r=0;i.length&&r<i.length;){var n=i[r],s=n.getAttribute(\"xlink:href\")||n.getAttribute(\"href\");if(null===s)return;var o,a,l,h,c=s.slice(1),u=n.getAttribute(\"x\")||0,p=n.getAttribute(\"y\")||0,f=v(t,c).cloneNode(!0),g=(f.getAttribute(\"transform\")||\"\")+\" translate(\"+u+\", \"+p+\")\",m=i.length,y=e.svgNS;if(x(f),/^svg$/i.test(f.nodeName)){var _=f.ownerDocument.createElementNS(y,\"g\");for(a=0,h=(l=f.attributes).length;a<h;a++)o=l.item(a),_.setAttributeNS(y,o.nodeName,o.nodeValue);for(;f.firstChild;)_.appendChild(f.firstChild);f=_}for(a=0,h=(l=n.attributes).length;a<h;a++)\"x\"!==(o=l.item(a)).nodeName&&\"y\"!==o.nodeName&&\"xlink:href\"!==o.nodeName&&\"href\"!==o.nodeName&&(\"transform\"===o.nodeName?g=o.nodeValue+\" \"+g:f.setAttribute(o.nodeName,o.nodeValue));f.setAttribute(\"transform\",g),f.setAttribute(\"instantiated_by_use\",\"1\"),f.removeAttribute(\"id\"),n.parentNode.replaceChild(f,n),i.length===m&&r++}}(t);var o,a,l=e.Object.__uid++,h=x(t),c=e.util.toArray(t.getElementsByTagName(\"*\"));if(h.crossOrigin=s&&s.crossOrigin,h.svgUid=l,0===c.length&&e.isLikelyNode){var u=[];for(o=0,a=(c=t.selectNodes('//*[name(.)!=\"svg\"]')).length;o<a;o++)u[o]=c[o];c=u}var p=c.filter((function(t){return x(t),e.svgValidTagNamesRegEx.test(t.nodeName.replace(\"svg:\",\"\"))&&!function(t,e){for(;t&&(t=t.parentNode);)if(t.nodeName&&e.test(t.nodeName.replace(\"svg:\",\"\"))&&!t.getAttribute(\"instantiated_by_use\"))return!0;return!1}(t,e.svgInvalidAncestorsRegEx)}));if(!p||p&&!p.length)i&&i([],{});else{var f={};c.filter((function(t){return\"clipPath\"===t.nodeName.replace(\"svg:\",\"\")})).forEach((function(t){var i=t.getAttribute(\"id\");f[i]=e.util.toArray(t.getElementsByTagName(\"*\")).filter((function(t){return e.svgValidTagNamesRegEx.test(t.nodeName.replace(\"svg:\",\"\"))}))})),e.gradientDefs[l]=e.getGradientDefs(t),e.cssRules[l]=e.getCSSRules(t),e.clipPaths[l]=f,e.parseElements(p,(function(t,r){i&&(i(t,h,r,c),delete e.gradientDefs[l],delete e.cssRules[l],delete e.clipPaths[l])}),r(h),n,s)}}};var b=new RegExp(\"(normal|italic)?\\\\s*(normal|small-caps)?\\\\s*(normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900)?\\\\s*(\"+e.reNum+\"(?:px|cm|mm|em|pt|pc|in)*)(?:\\\\/(normal|\"+e.reNum+\"))?\\\\s+(.*)\");i(e,{parseFontDeclaration:function(t,e){var i=t.match(b);if(i){var r=i[1],n=i[3],o=i[4],a=i[5],l=i[6];r&&(e.fontStyle=r),n&&(e.fontWeight=isNaN(parseFloat(n))?n:parseFloat(n)),o&&(e.fontSize=s(o)),l&&(e.fontFamily=l),a&&(e.lineHeight=\"normal\"===a?1:a)}},getGradientDefs:function(t){var e,i=d(t,[\"linearGradient\",\"radialGradient\",\"svg:linearGradient\",\"svg:radialGradient\"]),r=0,n={};for(r=i.length;r--;)(e=i[r]).getAttribute(\"xlink:href\")&&_(t,e),n[e.getAttribute(\"id\")]=e;return n},parseAttributes:function(t,r,o){if(t){var a,f,d,m={};void 0===o&&(o=t.getAttribute(\"svgUid\")),t.parentNode&&e.svgValidParentsRegEx.test(t.parentNode.nodeName)&&(m=e.parseAttributes(t.parentNode,r,o));var v=r.reduce((function(e,i){return(a=t.getAttribute(i))&&(e[i]=a),e}),{}),y=i(function(t,i){var r={};for(var n in e.cssRules[i])if(g(t,n.split(\" \")))for(var s in e.cssRules[i][n])r[s]=e.cssRules[i][n][s];return r}(t,o),e.parseStyleAttribute(t));v=i(v,y),y[c]&&t.setAttribute(c,y[c]),f=d=m.fontSize||e.Text.DEFAULT_SVG_FONT_SIZE,v[h]&&(v[h]=f=s(v[h],d));var x,_,b={};for(var C in v)_=p(x=u(C),v[C],m,f),b[x]=_;b&&b.font&&e.parseFontDeclaration(b.font,b);var S=i(m,b);return e.svgValidParentsRegEx.test(t.nodeName)?S:function(t){for(var i in l)if(void 0!==t[l[i]]&&\"\"!==t[i]){if(void 0===t[i]){if(!e.Object.prototype[i])continue;t[i]=e.Object.prototype[i]}if(0!==t[i].indexOf(\"url(\")){var r=new e.Color(t[i]);t[i]=r.setAlpha(n(r.getAlpha()*t[l[i]],2)).toRgba()}}return t}(S)}},parseElements:function(t,i,r,n,s){new e.ElementsParser(t,i,r,n,s).parse()},parseStyleAttribute:function(t){var e={},i=t.getAttribute(\"style\");return i?(\"string\"==typeof i?function(t,e){var i,r;t.replace(/;\\s*$/,\"\").split(\";\").forEach((function(t){var n=t.split(\":\");i=n[0].trim().toLowerCase(),r=n[1].trim(),e[i]=r}))}(i,e):function(t,e){var i,r;for(var n in t)void 0!==t[n]&&(i=n.toLowerCase(),r=t[n],e[i]=r)}(i,e),e):e},parsePointsAttribute:function(t){if(!t)return null;var e,i,r=[];for(e=0,i=(t=(t=t.replace(/,/g,\" \").trim()).split(/\\s+/)).length;e<i;e+=2)r.push({x:parseFloat(t[e]),y:parseFloat(t[e+1])});return r},getCSSRules:function(t){var i,r,n=t.getElementsByTagName(\"style\"),s={};for(i=0,r=n.length;i<r;i++){var o=n[i].textContent;\"\"!==(o=o.replace(/\\/\\*[\\s\\S]*?\\*\\//g,\"\")).trim()&&o.split(\"}\").filter((function(t){return t.trim()})).forEach((function(t){var n=t.split(\"{\"),o={},a=n[1].trim().split(\";\").filter((function(t){return t.trim()}));for(i=0,r=a.length;i<r;i++){var l=a[i].split(\":\"),h=l[0].trim(),c=l[1].trim();o[h]=c}(t=n[0].trim()).split(\",\").forEach((function(t){\"\"!==(t=t.replace(/^svg/i,\"\").trim())&&(s[t]?e.util.object.extend(s[t],o):s[t]=e.util.object.clone(o))}))}))}return s},loadSVGFromURL:function(t,i,r,n){t=t.replace(/^\\n\\s*/,\"\").trim(),new e.util.request(t,{method:\"get\",onComplete:function(t){var s=t.responseXML;if(!s||!s.documentElement)return i&&i(null),!1;e.parseSVGDocument(s.documentElement,(function(t,e,r,n){i&&i(t,e,r,n)}),r,n)}})},loadSVGFromString:function(t,i,r,n){var s=(new e.window.DOMParser).parseFromString(t.trim(),\"text/xml\");e.parseSVGDocument(s.documentElement,(function(t,e,r,n){i(t,e,r,n)}),r,n)}})}(t.exports),x.ElementsParser=function(t,e,i,r,n,s){this.elements=t,this.callback=e,this.options=i,this.reviver=r,this.svgUid=i&&i.svgUid||0,this.parsingOptions=n,this.regexUrl=/^url\\(['\"]?#([^'\"]+)['\"]?\\)/g,this.doc=s},(h=x.ElementsParser.prototype).parse=function(){this.instances=new Array(this.elements.length),this.numElements=this.elements.length,this.createObjects()},h.createObjects=function(){var t=this;this.elements.forEach((function(e,i){e.setAttribute(\"svgUid\",t.svgUid),t.createObject(e,i)}))},h.findTag=function(t){return x[x.util.string.capitalize(t.tagName.replace(\"svg:\",\"\"))]},h.createObject=function(t,e){var i=this.findTag(t);if(i&&i.fromElement)try{i.fromElement(t,this.createCallback(e,t),this.options)}catch(t){x.log(t)}else this.checkIfDone()},h.createCallback=function(t,e){var i=this;return function(r){var n;i.resolveGradient(r,e,\"fill\"),i.resolveGradient(r,e,\"stroke\"),r instanceof x.Image&&r._originalElement&&(n=r.parsePreserveAspectRatioAttribute(e)),r._removeTransformMatrix(n),i.resolveClipPath(r,e),i.reviver&&i.reviver(e,r),i.instances[t]=r,i.checkIfDone()}},h.extractPropertyDefinition=function(t,e,i){var r=t[e],n=this.regexUrl;if(n.test(r)){n.lastIndex=0;var s=n.exec(r)[1];return n.lastIndex=0,x[i][this.svgUid][s]}},h.resolveGradient=function(t,e,i){var r=this.extractPropertyDefinition(t,i,\"gradientDefs\");if(r){var n=e.getAttribute(i+\"-opacity\"),s=x.Gradient.fromElement(r,t,n,this.options);t.set(i,s)}},h.createClipPathCallback=function(t,e){return function(t){t._removeTransformMatrix(),t.fillRule=t.clipRule,e.push(t)}},h.resolveClipPath=function(t,e){var i,r,n,s,o=this.extractPropertyDefinition(t,\"clipPath\",\"clipPaths\");if(o){n=[],r=x.util.invertTransform(t.calcTransformMatrix());for(var a=o[0].parentNode,l=e;l.parentNode&&l.getAttribute(\"clip-path\")!==t.clipPath;)l=l.parentNode;l.parentNode.appendChild(a);for(var h=0;h<o.length;h++)i=o[h],this.findTag(i).fromElement(i,this.createClipPathCallback(t,n),this.options);o=1===n.length?n[0]:new x.Group(n),s=x.util.multiplyTransformMatrices(r,o.calcTransformMatrix()),o.clipPath&&this.resolveClipPath(o,l);var c=x.util.qrDecompose(s);o.flipX=!1,o.flipY=!1,o.set(\"scaleX\",c.scaleX),o.set(\"scaleY\",c.scaleY),o.angle=c.angle,o.skewX=c.skewX,o.skewY=0,o.setPositionByOrigin({x:c.translateX,y:c.translateY},\"center\",\"center\"),t.clipPath=o}else delete t.clipPath},h.checkIfDone=function(){0==--this.numElements&&(this.instances=this.instances.filter((function(t){return null!=t})),this.callback(this.instances,this.elements))},function(t){\"use strict\";var e=t.fabric||(t.fabric={});function i(t,e){this.x=t,this.y=e}e.Point?e.warn(\"fabric.Point is already defined\"):(e.Point=i,i.prototype={type:\"point\",constructor:i,add:function(t){return new i(this.x+t.x,this.y+t.y)},addEquals:function(t){return this.x+=t.x,this.y+=t.y,this},scalarAdd:function(t){return new i(this.x+t,this.y+t)},scalarAddEquals:function(t){return this.x+=t,this.y+=t,this},subtract:function(t){return new i(this.x-t.x,this.y-t.y)},subtractEquals:function(t){return this.x-=t.x,this.y-=t.y,this},scalarSubtract:function(t){return new i(this.x-t,this.y-t)},scalarSubtractEquals:function(t){return this.x-=t,this.y-=t,this},multiply:function(t){return new i(this.x*t,this.y*t)},multiplyEquals:function(t){return this.x*=t,this.y*=t,this},divide:function(t){return new i(this.x/t,this.y/t)},divideEquals:function(t){return this.x/=t,this.y/=t,this},eq:function(t){return this.x===t.x&&this.y===t.y},lt:function(t){return this.x<t.x&&this.y<t.y},lte:function(t){return this.x<=t.x&&this.y<=t.y},gt:function(t){return this.x>t.x&&this.y>t.y},gte:function(t){return this.x>=t.x&&this.y>=t.y},lerp:function(t,e){return void 0===e&&(e=.5),e=Math.max(Math.min(1,e),0),new i(this.x+(t.x-this.x)*e,this.y+(t.y-this.y)*e)},distanceFrom:function(t){var e=this.x-t.x,i=this.y-t.y;return Math.sqrt(e*e+i*i)},midPointFrom:function(t){return this.lerp(t)},min:function(t){return new i(Math.min(this.x,t.x),Math.min(this.y,t.y))},max:function(t){return new i(Math.max(this.x,t.x),Math.max(this.y,t.y))},toString:function(){return this.x+\",\"+this.y},setXY:function(t,e){return this.x=t,this.y=e,this},setX:function(t){return this.x=t,this},setY:function(t){return this.y=t,this},setFromPoint:function(t){return this.x=t.x,this.y=t.y,this},swap:function(t){var e=this.x,i=this.y;this.x=t.x,this.y=t.y,t.x=e,t.y=i},clone:function(){return new i(this.x,this.y)}})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={});function i(t){this.status=t,this.points=[]}e.Intersection?e.warn(\"fabric.Intersection is already defined\"):(e.Intersection=i,e.Intersection.prototype={constructor:i,appendPoint:function(t){return this.points.push(t),this},appendPoints:function(t){return this.points=this.points.concat(t),this}},e.Intersection.intersectLineLine=function(t,r,n,s){var o,a=(s.x-n.x)*(t.y-n.y)-(s.y-n.y)*(t.x-n.x),l=(r.x-t.x)*(t.y-n.y)-(r.y-t.y)*(t.x-n.x),h=(s.y-n.y)*(r.x-t.x)-(s.x-n.x)*(r.y-t.y);if(0!==h){var c=a/h,u=l/h;0<=c&&c<=1&&0<=u&&u<=1?(o=new i(\"Intersection\")).appendPoint(new e.Point(t.x+c*(r.x-t.x),t.y+c*(r.y-t.y))):o=new i}else o=new i(0===a||0===l?\"Coincident\":\"Parallel\");return o},e.Intersection.intersectLinePolygon=function(t,e,r){var n,s,o,a,l=new i,h=r.length;for(a=0;a<h;a++)n=r[a],s=r[(a+1)%h],o=i.intersectLineLine(t,e,n,s),l.appendPoints(o.points);return l.points.length>0&&(l.status=\"Intersection\"),l},e.Intersection.intersectPolygonPolygon=function(t,e){var r,n=new i,s=t.length;for(r=0;r<s;r++){var o=t[r],a=t[(r+1)%s],l=i.intersectLinePolygon(o,a,e);n.appendPoints(l.points)}return n.points.length>0&&(n.status=\"Intersection\"),n},e.Intersection.intersectPolygonRectangle=function(t,r,n){var s=r.min(n),o=r.max(n),a=new e.Point(o.x,s.y),l=new e.Point(s.x,o.y),h=i.intersectLinePolygon(s,a,t),c=i.intersectLinePolygon(a,o,t),u=i.intersectLinePolygon(o,l,t),p=i.intersectLinePolygon(l,s,t),f=new i;return f.appendPoints(h.points),f.appendPoints(c.points),f.appendPoints(u.points),f.appendPoints(p.points),f.points.length>0&&(f.status=\"Intersection\"),f})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={});function i(t){t?this._tryParsingColor(t):this.setSource([0,0,0,1])}function r(t,e,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?t+6*(e-t)*i:i<.5?e:i<2/3?t+(e-t)*(2/3-i)*6:t}e.Color?e.warn(\"fabric.Color is already defined.\"):(e.Color=i,e.Color.prototype={_tryParsingColor:function(t){var e;t in i.colorNameMap&&(t=i.colorNameMap[t]),\"transparent\"===t&&(e=[255,255,255,0]),e||(e=i.sourceFromHex(t)),e||(e=i.sourceFromRgb(t)),e||(e=i.sourceFromHsl(t)),e||(e=[0,0,0,1]),e&&this.setSource(e)},_rgbToHsl:function(t,i,r){t/=255,i/=255,r/=255;var n,s,o,a=e.util.array.max([t,i,r]),l=e.util.array.min([t,i,r]);if(o=(a+l)/2,a===l)n=s=0;else{var h=a-l;switch(s=o>.5?h/(2-a-l):h/(a+l),a){case t:n=(i-r)/h+(i<r?6:0);break;case i:n=(r-t)/h+2;break;case r:n=(t-i)/h+4}n/=6}return[Math.round(360*n),Math.round(100*s),Math.round(100*o)]},getSource:function(){return this._source},setSource:function(t){this._source=t},toRgb:function(){var t=this.getSource();return\"rgb(\"+t[0]+\",\"+t[1]+\",\"+t[2]+\")\"},toRgba:function(){var t=this.getSource();return\"rgba(\"+t[0]+\",\"+t[1]+\",\"+t[2]+\",\"+t[3]+\")\"},toHsl:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return\"hsl(\"+e[0]+\",\"+e[1]+\"%,\"+e[2]+\"%)\"},toHsla:function(){var t=this.getSource(),e=this._rgbToHsl(t[0],t[1],t[2]);return\"hsla(\"+e[0]+\",\"+e[1]+\"%,\"+e[2]+\"%,\"+t[3]+\")\"},toHex:function(){var t,e,i,r=this.getSource();return t=1===(t=r[0].toString(16)).length?\"0\"+t:t,e=1===(e=r[1].toString(16)).length?\"0\"+e:e,i=1===(i=r[2].toString(16)).length?\"0\"+i:i,t.toUpperCase()+e.toUpperCase()+i.toUpperCase()},toHexa:function(){var t,e=this.getSource();return t=1===(t=(t=Math.round(255*e[3])).toString(16)).length?\"0\"+t:t,this.toHex()+t.toUpperCase()},getAlpha:function(){return this.getSource()[3]},setAlpha:function(t){var e=this.getSource();return e[3]=t,this.setSource(e),this},toGrayscale:function(){var t=this.getSource(),e=parseInt((.3*t[0]+.59*t[1]+.11*t[2]).toFixed(0),10),i=t[3];return this.setSource([e,e,e,i]),this},toBlackWhite:function(t){var e=this.getSource(),i=(.3*e[0]+.59*e[1]+.11*e[2]).toFixed(0),r=e[3];return t=t||127,i=Number(i)<Number(t)?0:255,this.setSource([i,i,i,r]),this},overlayWith:function(t){t instanceof i||(t=new i(t));var e,r=[],n=this.getAlpha(),s=this.getSource(),o=t.getSource();for(e=0;e<3;e++)r.push(Math.round(.5*s[e]+.5*o[e]));return r[3]=n,this.setSource(r),this}},e.Color.reRGBa=/^rgba?\\(\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*,\\s*(\\d{1,3}(?:\\.\\d+)?\\%?)\\s*(?:\\s*,\\s*((?:\\d*\\.?\\d+)?)\\s*)?\\)$/i,e.Color.reHSLa=/^hsla?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3}\\%)\\s*,\\s*(\\d{1,3}\\%)\\s*(?:\\s*,\\s*(\\d+(?:\\.\\d+)?)\\s*)?\\)$/i,e.Color.reHex=/^#?([0-9a-f]{8}|[0-9a-f]{6}|[0-9a-f]{4}|[0-9a-f]{3})$/i,e.Color.colorNameMap={aliceblue:\"#F0F8FF\",antiquewhite:\"#FAEBD7\",aqua:\"#00FFFF\",aquamarine:\"#7FFFD4\",azure:\"#F0FFFF\",beige:\"#F5F5DC\",bisque:\"#FFE4C4\",black:\"#000000\",blanchedalmond:\"#FFEBCD\",blue:\"#0000FF\",blueviolet:\"#8A2BE2\",brown:\"#A52A2A\",burlywood:\"#DEB887\",cadetblue:\"#5F9EA0\",chartreuse:\"#7FFF00\",chocolate:\"#D2691E\",coral:\"#FF7F50\",cornflowerblue:\"#6495ED\",cornsilk:\"#FFF8DC\",crimson:\"#DC143C\",cyan:\"#00FFFF\",darkblue:\"#00008B\",darkcyan:\"#008B8B\",darkgoldenrod:\"#B8860B\",darkgray:\"#A9A9A9\",darkgrey:\"#A9A9A9\",darkgreen:\"#006400\",darkkhaki:\"#BDB76B\",darkmagenta:\"#8B008B\",darkolivegreen:\"#556B2F\",darkorange:\"#FF8C00\",darkorchid:\"#9932CC\",darkred:\"#8B0000\",darksalmon:\"#E9967A\",darkseagreen:\"#8FBC8F\",darkslateblue:\"#483D8B\",darkslategray:\"#2F4F4F\",darkslategrey:\"#2F4F4F\",darkturquoise:\"#00CED1\",darkviolet:\"#9400D3\",deeppink:\"#FF1493\",deepskyblue:\"#00BFFF\",dimgray:\"#696969\",dimgrey:\"#696969\",dodgerblue:\"#1E90FF\",firebrick:\"#B22222\",floralwhite:\"#FFFAF0\",forestgreen:\"#228B22\",fuchsia:\"#FF00FF\",gainsboro:\"#DCDCDC\",ghostwhite:\"#F8F8FF\",gold:\"#FFD700\",goldenrod:\"#DAA520\",gray:\"#808080\",grey:\"#808080\",green:\"#008000\",greenyellow:\"#ADFF2F\",honeydew:\"#F0FFF0\",hotpink:\"#FF69B4\",indianred:\"#CD5C5C\",indigo:\"#4B0082\",ivory:\"#FFFFF0\",khaki:\"#F0E68C\",lavender:\"#E6E6FA\",lavenderblush:\"#FFF0F5\",lawngreen:\"#7CFC00\",lemonchiffon:\"#FFFACD\",lightblue:\"#ADD8E6\",lightcoral:\"#F08080\",lightcyan:\"#E0FFFF\",lightgoldenrodyellow:\"#FAFAD2\",lightgray:\"#D3D3D3\",lightgrey:\"#D3D3D3\",lightgreen:\"#90EE90\",lightpink:\"#FFB6C1\",lightsalmon:\"#FFA07A\",lightseagreen:\"#20B2AA\",lightskyblue:\"#87CEFA\",lightslategray:\"#778899\",lightslategrey:\"#778899\",lightsteelblue:\"#B0C4DE\",lightyellow:\"#FFFFE0\",lime:\"#00FF00\",limegreen:\"#32CD32\",linen:\"#FAF0E6\",magenta:\"#FF00FF\",maroon:\"#800000\",mediumaquamarine:\"#66CDAA\",mediumblue:\"#0000CD\",mediumorchid:\"#BA55D3\",mediumpurple:\"#9370DB\",mediumseagreen:\"#3CB371\",mediumslateblue:\"#7B68EE\",mediumspringgreen:\"#00FA9A\",mediumturquoise:\"#48D1CC\",mediumvioletred:\"#C71585\",midnightblue:\"#191970\",mintcream:\"#F5FFFA\",mistyrose:\"#FFE4E1\",moccasin:\"#FFE4B5\",navajowhite:\"#FFDEAD\",navy:\"#000080\",oldlace:\"#FDF5E6\",olive:\"#808000\",olivedrab:\"#6B8E23\",orange:\"#FFA500\",orangered:\"#FF4500\",orchid:\"#DA70D6\",palegoldenrod:\"#EEE8AA\",palegreen:\"#98FB98\",paleturquoise:\"#AFEEEE\",palevioletred:\"#DB7093\",papayawhip:\"#FFEFD5\",peachpuff:\"#FFDAB9\",peru:\"#CD853F\",pink:\"#FFC0CB\",plum:\"#DDA0DD\",powderblue:\"#B0E0E6\",purple:\"#800080\",rebeccapurple:\"#663399\",red:\"#FF0000\",rosybrown:\"#BC8F8F\",royalblue:\"#4169E1\",saddlebrown:\"#8B4513\",salmon:\"#FA8072\",sandybrown:\"#F4A460\",seagreen:\"#2E8B57\",seashell:\"#FFF5EE\",sienna:\"#A0522D\",silver:\"#C0C0C0\",skyblue:\"#87CEEB\",slateblue:\"#6A5ACD\",slategray:\"#708090\",slategrey:\"#708090\",snow:\"#FFFAFA\",springgreen:\"#00FF7F\",steelblue:\"#4682B4\",tan:\"#D2B48C\",teal:\"#008080\",thistle:\"#D8BFD8\",tomato:\"#FF6347\",turquoise:\"#40E0D0\",violet:\"#EE82EE\",wheat:\"#F5DEB3\",white:\"#FFFFFF\",whitesmoke:\"#F5F5F5\",yellow:\"#FFFF00\",yellowgreen:\"#9ACD32\"},e.Color.fromRgb=function(t){return i.fromSource(i.sourceFromRgb(t))},e.Color.sourceFromRgb=function(t){var e=t.match(i.reRGBa);if(e){var r=parseInt(e[1],10)/(/%$/.test(e[1])?100:1)*(/%$/.test(e[1])?255:1),n=parseInt(e[2],10)/(/%$/.test(e[2])?100:1)*(/%$/.test(e[2])?255:1),s=parseInt(e[3],10)/(/%$/.test(e[3])?100:1)*(/%$/.test(e[3])?255:1);return[parseInt(r,10),parseInt(n,10),parseInt(s,10),e[4]?parseFloat(e[4]):1]}},e.Color.fromRgba=i.fromRgb,e.Color.fromHsl=function(t){return i.fromSource(i.sourceFromHsl(t))},e.Color.sourceFromHsl=function(t){var e=t.match(i.reHSLa);if(e){var n,s,o,a=(parseFloat(e[1])%360+360)%360/360,l=parseFloat(e[2])/(/%$/.test(e[2])?100:1),h=parseFloat(e[3])/(/%$/.test(e[3])?100:1);if(0===l)n=s=o=h;else{var c=h<=.5?h*(l+1):h+l-h*l,u=2*h-c;n=r(u,c,a+1/3),s=r(u,c,a),o=r(u,c,a-1/3)}return[Math.round(255*n),Math.round(255*s),Math.round(255*o),e[4]?parseFloat(e[4]):1]}},e.Color.fromHsla=i.fromHsl,e.Color.fromHex=function(t){return i.fromSource(i.sourceFromHex(t))},e.Color.sourceFromHex=function(t){if(t.match(i.reHex)){var e=t.slice(t.indexOf(\"#\")+1),r=3===e.length||4===e.length,n=8===e.length||4===e.length,s=r?e.charAt(0)+e.charAt(0):e.substring(0,2),o=r?e.charAt(1)+e.charAt(1):e.substring(2,4),a=r?e.charAt(2)+e.charAt(2):e.substring(4,6),l=n?r?e.charAt(3)+e.charAt(3):e.substring(6,8):\"FF\";return[parseInt(s,16),parseInt(o,16),parseInt(a,16),parseFloat((parseInt(l,16)/255).toFixed(2))]}},e.Color.fromSource=function(t){var e=new i;return e.setSource(t),e})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=[\"e\",\"se\",\"s\",\"sw\",\"w\",\"nw\",\"n\",\"ne\",\"e\"],r=[\"ns\",\"nesw\",\"ew\",\"nwse\"],n={},s=\"left\",o=\"top\",a=\"right\",l=\"bottom\",h=\"center\",c={top:l,bottom:o,left:a,right:s,center:h},u=e.util.radiansToDegrees,p=Math.sign||function(t){return(t>0)-(t<0)||+t};function f(t,e){var i=t.angle+u(Math.atan2(e.y,e.x))+360;return Math.round(i%360/45)}function d(t,i){var r=i.transform.target,n=r.canvas,s=e.util.object.clone(i);s.target=r,n&&n.fire(\"object:\"+t,s),r.fire(t,i)}function g(t,e){var i=e.canvas,r=t[i.uniScaleKey];return i.uniformScaling&&!r||!i.uniformScaling&&r}function m(t){return t.originX===h&&t.originY===h}function v(t,e,i){var r=t.lockScalingX,n=t.lockScalingY;return!(!r||!n)||(!(e||!r&&!n||!i)||(!(!r||\"x\"!==e)||!(!n||\"y\"!==e)))}function y(t,e,i,r){return{e:t,transform:e,pointer:{x:i,y:r}}}function x(t){return function(e,i,r,n){var s=i.target,o=s.getCenterPoint(),a=s.translateToOriginPoint(o,i.originX,i.originY),l=t(e,i,r,n);return s.setPositionByOrigin(a,i.originX,i.originY),l}}function _(t,e){return function(i,r,n,s){var o=e(i,r,n,s);return o&&d(t,y(i,r,n,s)),o}}function b(t,i,r,n,s){var o=t.target,a=o.controls[t.corner],l=o.canvas.getZoom(),h=o.padding/l,c=o.toLocalPoint(new e.Point(n,s),i,r);return c.x>=h&&(c.x-=h),c.x<=-h&&(c.x+=h),c.y>=h&&(c.y-=h),c.y<=h&&(c.y+=h),c.x-=a.offsetX,c.y-=a.offsetY,c}function C(t){return t.flipX!==t.flipY}function S(t,e,i,r,n){if(0!==t[e]){var s=n/t._getTransformedDimensions()[r]*t[i];t.set(i,s)}}function w(t,e,i,r){var n,h=e.target,c=h._getTransformedDimensions(0,h.skewY),p=b(e,e.originX,e.originY,i,r),f=Math.abs(2*p.x)-c.x,d=h.skewX;f<2?n=0:(n=u(Math.atan2(f/h.scaleX,c.y/h.scaleY)),e.originX===s&&e.originY===l&&(n=-n),e.originX===a&&e.originY===o&&(n=-n),C(h)&&(n=-n));var g=d!==n;if(g){var m=h._getTransformedDimensions().y;h.set(\"skewX\",n),S(h,\"skewY\",\"scaleY\",\"y\",m)}return g}function D(t,e,i,r){var n,h=e.target,c=h._getTransformedDimensions(h.skewX,0),p=b(e,e.originX,e.originY,i,r),f=Math.abs(2*p.y)-c.y,d=h.skewY;f<2?n=0:(n=u(Math.atan2(f/h.scaleY,c.x/h.scaleX)),e.originX===s&&e.originY===l&&(n=-n),e.originX===a&&e.originY===o&&(n=-n),C(h)&&(n=-n));var g=d!==n;if(g){var m=h._getTransformedDimensions().x;h.set(\"skewY\",n),S(h,\"skewX\",\"scaleX\",\"x\",m)}return g}function k(t,e,i,r,n){n=n||{};var s,o,a,l,h,u,f=e.target,d=f.lockScalingX,y=f.lockScalingY,x=n.by,_=g(t,f),C=v(f,x,_),S=e.gestureScale;if(C)return!1;if(S)o=e.scaleX*S,a=e.scaleY*S;else{if(s=b(e,e.originX,e.originY,i,r),h=\"y\"!==x?p(s.x):1,u=\"x\"!==x?p(s.y):1,e.signX||(e.signX=h),e.signY||(e.signY=u),f.lockScalingFlip&&(e.signX!==h||e.signY!==u))return!1;if(l=f._getTransformedDimensions(),_&&!x){var w=Math.abs(s.x)+Math.abs(s.y),D=e.original,k=w/(Math.abs(l.x*D.scaleX/f.scaleX)+Math.abs(l.y*D.scaleY/f.scaleY));o=D.scaleX*k,a=D.scaleY*k}else o=Math.abs(s.x*f.scaleX/l.x),a=Math.abs(s.y*f.scaleY/l.y);m(e)&&(o*=2,a*=2),e.signX!==h&&\"y\"!==x&&(e.originX=c[e.originX],o*=-1,e.signX=h),e.signY!==u&&\"x\"!==x&&(e.originY=c[e.originY],a*=-1,e.signY=u)}var T=f.scaleX,E=f.scaleY;return x?(\"x\"===x&&f.set(\"scaleX\",o),\"y\"===x&&f.set(\"scaleY\",a)):(!d&&f.set(\"scaleX\",o),!y&&f.set(\"scaleY\",a)),T!==f.scaleX||E!==f.scaleY}n.scaleCursorStyleHandler=function(t,e,r){var n=g(t,r),s=\"\";if(0!==e.x&&0===e.y?s=\"x\":0===e.x&&0!==e.y&&(s=\"y\"),v(r,s,n))return\"not-allowed\";var o=f(r,e);return i[o]+\"-resize\"},n.skewCursorStyleHandler=function(t,e,i){var n=\"not-allowed\";if(0!==e.x&&i.lockSkewingY)return n;if(0!==e.y&&i.lockSkewingX)return n;var s=f(i,e)%4;return r[s]+\"-resize\"},n.scaleSkewCursorStyleHandler=function(t,e,i){return t[i.canvas.altActionKey]?n.skewCursorStyleHandler(t,e,i):n.scaleCursorStyleHandler(t,e,i)},n.rotationWithSnapping=_(\"rotating\",x((function(t,e,i,r){var n=e,s=n.target,o=s.translateToOriginPoint(s.getCenterPoint(),n.originX,n.originY);if(s.lockRotation)return!1;var a,l=Math.atan2(n.ey-o.y,n.ex-o.x),h=Math.atan2(r-o.y,i-o.x),c=u(h-l+n.theta);if(s.snapAngle>0){var p=s.snapAngle,f=s.snapThreshold||p,d=Math.ceil(c/p)*p,g=Math.floor(c/p)*p;Math.abs(c-g)<f?c=g:Math.abs(c-d)<f&&(c=d)}return c<0&&(c=360+c),c%=360,a=s.angle!==c,s.angle=c,a}))),n.scalingEqually=_(\"scaling\",x((function(t,e,i,r){return k(t,e,i,r)}))),n.scalingX=_(\"scaling\",x((function(t,e,i,r){return k(t,e,i,r,{by:\"x\"})}))),n.scalingY=_(\"scaling\",x((function(t,e,i,r){return k(t,e,i,r,{by:\"y\"})}))),n.scalingYOrSkewingX=function(t,e,i,r){return t[e.target.canvas.altActionKey]?n.skewHandlerX(t,e,i,r):n.scalingY(t,e,i,r)},n.scalingXOrSkewingY=function(t,e,i,r){return t[e.target.canvas.altActionKey]?n.skewHandlerY(t,e,i,r):n.scalingX(t,e,i,r)},n.changeWidth=_(\"resizing\",x((function(t,e,i,r){var n=e.target,s=b(e,e.originX,e.originY,i,r),o=n.strokeWidth/(n.strokeUniform?n.scaleX:1),a=m(e)?2:1,l=n.width,h=Math.abs(s.x*a/n.scaleX)-o;return n.set(\"width\",Math.max(h,0)),l!==h}))),n.skewHandlerX=function(t,e,i,r){var n,l=e.target,c=l.skewX,u=e.originY;return!l.lockSkewingX&&(0===c?n=b(e,h,h,i,r).x>0?s:a:(c>0&&(n=u===o?s:a),c<0&&(n=u===o?a:s),C(l)&&(n=n===s?a:s)),e.originX=n,_(\"skewing\",x(w))(t,e,i,r))},n.skewHandlerY=function(t,e,i,r){var n,a=e.target,c=a.skewY,u=e.originX;return!a.lockSkewingY&&(0===c?n=b(e,h,h,i,r).y>0?o:l:(c>0&&(n=u===s?o:l),c<0&&(n=u===s?l:o),C(a)&&(n=n===o?l:o)),e.originY=n,_(\"skewing\",x(D))(t,e,i,r))},n.dragHandler=function(t,e,i,r){var n=e.target,s=i-e.offsetX,o=r-e.offsetY,a=!n.get(\"lockMovementX\")&&n.left!==s,l=!n.get(\"lockMovementY\")&&n.top!==o;return a&&n.set(\"left\",s),l&&n.set(\"top\",o),(a||l)&&d(\"moving\",y(t,e,i,r)),a||l},n.scaleOrSkewActionName=function(t,e,i){var r=t[i.canvas.altActionKey];return 0===e.x?r?\"skewX\":\"scaleY\":0===e.y?r?\"skewY\":\"scaleX\":void 0},n.rotationStyleHandler=function(t,e,i){return i.lockRotation?\"not-allowed\":e.cursorStyle},n.fireEvent=d,n.wrapWithFixedAnchor=x,n.wrapWithFireEvent=_,n.getLocalPoint=b,e.controlsUtils=n}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians,r=e.controlsUtils;r.renderCircleControl=function(t,e,i,r,n){r=r||{};var s,o=this.sizeX||r.cornerSize||n.cornerSize,a=this.sizeY||r.cornerSize||n.cornerSize,l=void 0!==r.transparentCorners?r.transparentCorners:n.transparentCorners,h=l?\"stroke\":\"fill\",c=!l&&(r.cornerStrokeColor||n.cornerStrokeColor),u=e,p=i;t.save(),t.fillStyle=r.cornerColor||n.cornerColor,t.strokeStyle=r.cornerStrokeColor||n.cornerStrokeColor,o>a?(s=o,t.scale(1,a/o),p=i*o/a):a>o?(s=a,t.scale(o/a,1),u=e*a/o):s=o,t.lineWidth=1,t.beginPath(),t.arc(u,p,s/2,0,2*Math.PI,!1),t[h](),c&&t.stroke(),t.restore()},r.renderSquareControl=function(t,e,r,n,s){n=n||{};var o=this.sizeX||n.cornerSize||s.cornerSize,a=this.sizeY||n.cornerSize||s.cornerSize,l=void 0!==n.transparentCorners?n.transparentCorners:s.transparentCorners,h=l?\"stroke\":\"fill\",c=!l&&(n.cornerStrokeColor||s.cornerStrokeColor),u=o/2,p=a/2;t.save(),t.fillStyle=n.cornerColor||s.cornerColor,t.strokeStyle=n.cornerStrokeColor||s.cornerStrokeColor,t.lineWidth=1,t.translate(e,r),t.rotate(i(s.angle)),t[h+\"Rect\"](-u,-p,o,a),c&&t.strokeRect(-u,-p,o,a),t.restore()}}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={});e.Control=function(t){for(var e in t)this[e]=t[e]},e.Control.prototype={visible:!0,actionName:\"scale\",angle:0,x:0,y:0,offsetX:0,offsetY:0,sizeX:null,sizeY:null,touchSizeX:null,touchSizeY:null,cursorStyle:\"crosshair\",withConnection:!1,actionHandler:function(){},mouseDownHandler:function(){},mouseUpHandler:function(){},getActionHandler:function(){return this.actionHandler},getMouseDownHandler:function(){return this.mouseDownHandler},getMouseUpHandler:function(){return this.mouseUpHandler},cursorStyleHandler:function(t,e){return e.cursorStyle},getActionName:function(t,e){return e.actionName},getVisibility:function(t,e){var i=t._controlsVisibility;return i&&void 0!==i[e]?i[e]:this.visible},setVisibility:function(t){this.visible=t},positionHandler:function(t,i){return e.util.transformPoint({x:this.x*t.x+this.offsetX,y:this.y*t.y+this.offsetY},i)},calcCornerCoords:function(t,i,r,n,s){var o,a,l,h,c=s?this.touchSizeX:this.sizeX,u=s?this.touchSizeY:this.sizeY;if(c&&u&&c!==u){var p=Math.atan2(u,c),f=Math.sqrt(c*c+u*u)/2,d=p-e.util.degreesToRadians(t),g=Math.PI/2-p-e.util.degreesToRadians(t);o=f*e.util.cos(d),a=f*e.util.sin(d),l=f*e.util.cos(g),h=f*e.util.sin(g)}else{f=.7071067812*(c&&u?c:i);d=e.util.degreesToRadians(45-t);o=l=f*e.util.cos(d),a=h=f*e.util.sin(d)}return{tl:{x:r-h,y:n-l},tr:{x:r+o,y:n-a},bl:{x:r-o,y:n+a},br:{x:r+h,y:n+l}}},render:function(t,i,r,n,s){if(\"circle\"===((n=n||{}).cornerStyle||s.cornerStyle))e.controlsUtils.renderCircleControl.call(this,t,i,r,n,s);else e.controlsUtils.renderSquareControl.call(this,t,i,r,n,s)}}}(t.exports),function(){function t(t,e){var i,r,n,s,o=t.getAttribute(\"style\"),a=t.getAttribute(\"offset\")||0;if(a=(a=parseFloat(a)/(/%$/.test(a)?100:1))<0?0:a>1?1:a,o){var l=o.split(/\\s*;\\s*/);for(\"\"===l[l.length-1]&&l.pop(),s=l.length;s--;){var h=l[s].split(/\\s*:\\s*/),c=h[0].trim(),u=h[1].trim();\"stop-color\"===c?i=u:\"stop-opacity\"===c&&(n=u)}}return i||(i=t.getAttribute(\"stop-color\")||\"rgb(0,0,0)\"),n||(n=t.getAttribute(\"stop-opacity\")),r=(i=new x.Color(i)).getAlpha(),n=isNaN(parseFloat(n))?1:parseFloat(n),n*=r*e,{offset:a,color:i.toRgb(),opacity:n}}var e=x.util.object.clone;x.Gradient=x.util.createClass({offsetX:0,offsetY:0,gradientTransform:null,gradientUnits:\"pixels\",type:\"linear\",initialize:function(t){t||(t={}),t.coords||(t.coords={});var e,i=this;Object.keys(t).forEach((function(e){i[e]=t[e]})),this.id?this.id+=\"_\"+x.Object.__uid++:this.id=x.Object.__uid++,e={x1:t.coords.x1||0,y1:t.coords.y1||0,x2:t.coords.x2||0,y2:t.coords.y2||0},\"radial\"===this.type&&(e.r1=t.coords.r1||0,e.r2=t.coords.r2||0),this.coords=e,this.colorStops=t.colorStops.slice()},addColorStop:function(t){for(var e in t){var i=new x.Color(t[e]);this.colorStops.push({offset:parseFloat(e),color:i.toRgb(),opacity:i.getAlpha()})}return this},toObject:function(t){var e={type:this.type,coords:this.coords,colorStops:this.colorStops,offsetX:this.offsetX,offsetY:this.offsetY,gradientUnits:this.gradientUnits,gradientTransform:this.gradientTransform?this.gradientTransform.concat():this.gradientTransform};return x.util.populateWithProperties(this,e,t),e},toSVG:function(t,i){var r,n,s,o,a=e(this.coords,!0),l=(i=i||{},e(this.colorStops,!0)),h=a.r1>a.r2,c=this.gradientTransform?this.gradientTransform.concat():x.iMatrix.concat(),u=-this.offsetX,p=-this.offsetY,f=!!i.additionalTransform,d=\"pixels\"===this.gradientUnits?\"userSpaceOnUse\":\"objectBoundingBox\";if(l.sort((function(t,e){return t.offset-e.offset})),\"objectBoundingBox\"===d?(u/=t.width,p/=t.height):(u+=t.width/2,p+=t.height/2),\"path\"===t.type&&\"percentage\"!==this.gradientUnits&&(u-=t.pathOffset.x,p-=t.pathOffset.y),c[4]-=u,c[5]-=p,o='id=\"SVGID_'+this.id+'\" gradientUnits=\"'+d+'\"',o+=' gradientTransform=\"'+(f?i.additionalTransform+\" \":\"\")+x.util.matrixToSVG(c)+'\" ',\"linear\"===this.type?s=[\"<linearGradient \",o,' x1=\"',a.x1,'\" y1=\"',a.y1,'\" x2=\"',a.x2,'\" y2=\"',a.y2,'\">\\n']:\"radial\"===this.type&&(s=[\"<radialGradient \",o,' cx=\"',h?a.x1:a.x2,'\" cy=\"',h?a.y1:a.y2,'\" r=\"',h?a.r1:a.r2,'\" fx=\"',h?a.x2:a.x1,'\" fy=\"',h?a.y2:a.y1,'\">\\n']),\"radial\"===this.type){if(h)for((l=l.concat()).reverse(),r=0,n=l.length;r<n;r++)l[r].offset=1-l[r].offset;var g=Math.min(a.r1,a.r2);if(g>0){var m=g/Math.max(a.r1,a.r2);for(r=0,n=l.length;r<n;r++)l[r].offset+=m*(1-l[r].offset)}}for(r=0,n=l.length;r<n;r++){var v=l[r];s.push(\"<stop \",'offset=\"',100*v.offset+\"%\",'\" style=\"stop-color:',v.color,void 0!==v.opacity?\";stop-opacity: \"+v.opacity:\";\",'\"/>\\n')}return s.push(\"linear\"===this.type?\"</linearGradient>\\n\":\"</radialGradient>\\n\"),s.join(\"\")},toLive:function(t){var e,i,r,n=x.util.object.clone(this.coords);if(this.type){for(\"linear\"===this.type?e=t.createLinearGradient(n.x1,n.y1,n.x2,n.y2):\"radial\"===this.type&&(e=t.createRadialGradient(n.x1,n.y1,n.r1,n.x2,n.y2,n.r2)),i=0,r=this.colorStops.length;i<r;i++){var s=this.colorStops[i].color,o=this.colorStops[i].opacity,a=this.colorStops[i].offset;void 0!==o&&(s=new x.Color(s).setAlpha(o).toRgba()),e.addColorStop(a,s)}return e}}}),x.util.object.extend(x.Gradient,{fromElement:function(e,i,r,n){var s=parseFloat(r)/(/%$/.test(r)?100:1);s=s<0?0:s>1?1:s,isNaN(s)&&(s=1);var o,a,l,h,c=e.getElementsByTagName(\"stop\"),u=\"userSpaceOnUse\"===e.getAttribute(\"gradientUnits\")?\"pixels\":\"percentage\",p=e.getAttribute(\"gradientTransform\")||\"\",f=[],d=0,g=0;for(\"linearGradient\"===e.nodeName||\"LINEARGRADIENT\"===e.nodeName?(o=\"linear\",a=function(t){return{x1:t.getAttribute(\"x1\")||0,y1:t.getAttribute(\"y1\")||0,x2:t.getAttribute(\"x2\")||\"100%\",y2:t.getAttribute(\"y2\")||0}}(e)):(o=\"radial\",a=function(t){return{x1:t.getAttribute(\"fx\")||t.getAttribute(\"cx\")||\"50%\",y1:t.getAttribute(\"fy\")||t.getAttribute(\"cy\")||\"50%\",r1:0,x2:t.getAttribute(\"cx\")||\"50%\",y2:t.getAttribute(\"cy\")||\"50%\",r2:t.getAttribute(\"r\")||\"50%\"}}(e)),l=c.length;l--;)f.push(t(c[l],s));return h=x.parseTransformAttribute(p),function(t,e,i,r){var n,s;Object.keys(e).forEach((function(t){\"Infinity\"===(n=e[t])?s=1:\"-Infinity\"===n?s=0:(s=parseFloat(e[t],10),\"string\"==typeof n&&/^(\\d+\\.\\d+)%|(\\d+)%$/.test(n)&&(s*=.01,\"pixels\"===r&&(\"x1\"!==t&&\"x2\"!==t&&\"r2\"!==t||(s*=i.viewBoxWidth||i.width),\"y1\"!==t&&\"y2\"!==t||(s*=i.viewBoxHeight||i.height)))),e[t]=s}))}(0,a,n,u),\"pixels\"===u&&(d=-i.left,g=-i.top),new x.Gradient({id:e.getAttribute(\"id\"),type:o,coords:a,colorStops:f,gradientUnits:u,gradientTransform:h,offsetX:d,offsetY:g})}})}(),function(){\"use strict\";var t=x.util.toFixed;x.Pattern=x.util.createClass({repeat:\"repeat\",offsetX:0,offsetY:0,crossOrigin:\"\",patternTransform:null,initialize:function(t,e){if(t||(t={}),this.id=x.Object.__uid++,this.setOptions(t),!t.source||t.source&&\"string\"!=typeof t.source)e&&e(this);else{var i=this;this.source=x.util.createImage(),x.util.loadImage(t.source,(function(t,r){i.source=t,e&&e(i,r)}),null,this.crossOrigin)}},toObject:function(e){var i,r,n=x.Object.NUM_FRACTION_DIGITS;return\"string\"==typeof this.source.src?i=this.source.src:\"object\"==typeof this.source&&this.source.toDataURL&&(i=this.source.toDataURL()),r={type:\"pattern\",source:i,repeat:this.repeat,crossOrigin:this.crossOrigin,offsetX:t(this.offsetX,n),offsetY:t(this.offsetY,n),patternTransform:this.patternTransform?this.patternTransform.concat():null},x.util.populateWithProperties(this,r,e),r},toSVG:function(t){var e=\"function\"==typeof this.source?this.source():this.source,i=e.width/t.width,r=e.height/t.height,n=this.offsetX/t.width,s=this.offsetY/t.height,o=\"\";return\"repeat-x\"!==this.repeat&&\"no-repeat\"!==this.repeat||(r=1,s&&(r+=Math.abs(s))),\"repeat-y\"!==this.repeat&&\"no-repeat\"!==this.repeat||(i=1,n&&(i+=Math.abs(n))),e.src?o=e.src:e.toDataURL&&(o=e.toDataURL()),'<pattern id=\"SVGID_'+this.id+'\" x=\"'+n+'\" y=\"'+s+'\" width=\"'+i+'\" height=\"'+r+'\">\\n<image x=\"0\" y=\"0\" width=\"'+e.width+'\" height=\"'+e.height+'\" xlink:href=\"'+o+'\"></image>\\n</pattern>\\n'},setOptions:function(t){for(var e in t)this[e]=t[e]},toLive:function(t){var e=this.source;if(!e)return\"\";if(void 0!==e.src){if(!e.complete)return\"\";if(0===e.naturalWidth||0===e.naturalHeight)return\"\"}return t.createPattern(e,this.repeat)}})}(),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.toFixed;e.Shadow?e.warn(\"fabric.Shadow is already defined.\"):(e.Shadow=e.util.createClass({color:\"rgb(0,0,0)\",blur:0,offsetX:0,offsetY:0,affectStroke:!1,includeDefaultValues:!0,nonScaling:!1,initialize:function(t){for(var i in\"string\"==typeof t&&(t=this._parseShadow(t)),t)this[i]=t[i];this.id=e.Object.__uid++},_parseShadow:function(t){var i=t.trim(),r=e.Shadow.reOffsetsAndBlur.exec(i)||[];return{color:(i.replace(e.Shadow.reOffsetsAndBlur,\"\")||\"rgb(0,0,0)\").trim(),offsetX:parseFloat(r[1],10)||0,offsetY:parseFloat(r[2],10)||0,blur:parseFloat(r[3],10)||0}},toString:function(){return[this.offsetX,this.offsetY,this.blur,this.color].join(\"px \")},toSVG:function(t){var r=40,n=40,s=e.Object.NUM_FRACTION_DIGITS,o=e.util.rotateVector({x:this.offsetX,y:this.offsetY},e.util.degreesToRadians(-t.angle)),a=new e.Color(this.color);return t.width&&t.height&&(r=100*i((Math.abs(o.x)+this.blur)/t.width,s)+20,n=100*i((Math.abs(o.y)+this.blur)/t.height,s)+20),t.flipX&&(o.x*=-1),t.flipY&&(o.y*=-1),'<filter id=\"SVGID_'+this.id+'\" y=\"-'+n+'%\" height=\"'+(100+2*n)+'%\" x=\"-'+r+'%\" width=\"'+(100+2*r)+'%\" >\\n\\t<feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"'+i(this.blur?this.blur/2:0,s)+'\"></feGaussianBlur>\\n\\t<feOffset dx=\"'+i(o.x,s)+'\" dy=\"'+i(o.y,s)+'\" result=\"oBlur\" ></feOffset>\\n\\t<feFlood flood-color=\"'+a.toRgb()+'\" flood-opacity=\"'+a.getAlpha()+'\"/>\\n\\t<feComposite in2=\"oBlur\" operator=\"in\" />\\n\\t<feMerge>\\n\\t\\t<feMergeNode></feMergeNode>\\n\\t\\t<feMergeNode in=\"SourceGraphic\"></feMergeNode>\\n\\t</feMerge>\\n</filter>\\n'},toObject:function(){if(this.includeDefaultValues)return{color:this.color,blur:this.blur,offsetX:this.offsetX,offsetY:this.offsetY,affectStroke:this.affectStroke,nonScaling:this.nonScaling};var t={},i=e.Shadow.prototype;return[\"color\",\"blur\",\"offsetX\",\"offsetY\",\"affectStroke\",\"nonScaling\"].forEach((function(e){this[e]!==i[e]&&(t[e]=this[e])}),this),t}}),e.Shadow.reOffsetsAndBlur=/(?:\\s|^)(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?(-?\\d+(?:\\.\\d*)?(?:px)?(?:\\s?|$))?(\\d+(?:\\.\\d*)?(?:px)?)?(?:\\s?|$)(?:$|\\s)/)}(t.exports),function(){\"use strict\";if(x.StaticCanvas)x.warn(\"fabric.StaticCanvas is already defined.\");else{var t=x.util.object.extend,e=x.util.getElementOffset,i=x.util.removeFromArray,r=x.util.toFixed,n=x.util.transformPoint,s=x.util.invertTransform,o=x.util.getNodeCanvas,a=x.util.createCanvasElement,l=new Error(\"Could not initialize `canvas` element\");x.StaticCanvas=x.util.createClass(x.CommonMethods,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e)},backgroundColor:\"\",backgroundImage:null,overlayColor:\"\",overlayImage:null,includeDefaultValues:!0,stateful:!1,renderOnAddRemove:!0,controlsAboveOverlay:!1,allowTouchScrolling:!1,imageSmoothingEnabled:!0,viewportTransform:x.iMatrix.concat(),backgroundVpt:!0,overlayVpt:!0,enableRetinaScaling:!0,vptCoords:{},skipOffscreen:!0,clipPath:void 0,_initStatic:function(t,e){var i=this.requestRenderAllBound;this._objects=[],this._createLowerCanvas(t),this._initOptions(e),this.interactive||this._initRetinaScaling(),e.overlayImage&&this.setOverlayImage(e.overlayImage,i),e.backgroundImage&&this.setBackgroundImage(e.backgroundImage,i),e.backgroundColor&&this.setBackgroundColor(e.backgroundColor,i),e.overlayColor&&this.setOverlayColor(e.overlayColor,i),this.calcOffset()},_isRetinaScaling:function(){return x.devicePixelRatio>1&&this.enableRetinaScaling},getRetinaScaling:function(){return this._isRetinaScaling()?Math.max(1,x.devicePixelRatio):1},_initRetinaScaling:function(){if(this._isRetinaScaling()){var t=x.devicePixelRatio;this.__initRetinaScaling(t,this.lowerCanvasEl,this.contextContainer),this.upperCanvasEl&&this.__initRetinaScaling(t,this.upperCanvasEl,this.contextTop)}},__initRetinaScaling:function(t,e,i){e.setAttribute(\"width\",this.width*t),e.setAttribute(\"height\",this.height*t),i.scale(t,t)},calcOffset:function(){return this._offset=e(this.lowerCanvasEl),this},setOverlayImage:function(t,e,i){return this.__setBgOverlayImage(\"overlayImage\",t,e,i)},setBackgroundImage:function(t,e,i){return this.__setBgOverlayImage(\"backgroundImage\",t,e,i)},setOverlayColor:function(t,e){return this.__setBgOverlayColor(\"overlayColor\",t,e)},setBackgroundColor:function(t,e){return this.__setBgOverlayColor(\"backgroundColor\",t,e)},__setBgOverlayImage:function(t,e,i,r){return\"string\"==typeof e?x.util.loadImage(e,(function(e,n){if(e){var s=new x.Image(e,r);this[t]=s,s.canvas=this}i&&i(e,n)}),this,r&&r.crossOrigin):(r&&e.setOptions(r),this[t]=e,e&&(e.canvas=this),i&&i(e,!1)),this},__setBgOverlayColor:function(t,e,i){return this[t]=e,this._initGradient(e,t),this._initPattern(e,t,i),this},_createCanvasElement:function(){var t=a();if(!t)throw l;if(t.style||(t.style={}),void 0===t.getContext)throw l;return t},_initOptions:function(t){var e=this.lowerCanvasEl;this._setOptions(t),this.width=this.width||parseInt(e.width,10)||0,this.height=this.height||parseInt(e.height,10)||0,this.lowerCanvasEl.style&&(e.width=this.width,e.height=this.height,e.style.width=this.width+\"px\",e.style.height=this.height+\"px\",this.viewportTransform=this.viewportTransform.slice())},_createLowerCanvas:function(t){t&&t.getContext?this.lowerCanvasEl=t:this.lowerCanvasEl=x.util.getById(t)||this._createCanvasElement(),x.util.addClass(this.lowerCanvasEl,\"lower-canvas\"),this._originalCanvasStyle=this.lowerCanvasEl.style,this.interactive&&this._applyCanvasStyle(this.lowerCanvasEl),this.contextContainer=this.lowerCanvasEl.getContext(\"2d\")},getWidth:function(){return this.width},getHeight:function(){return this.height},setWidth:function(t,e){return this.setDimensions({width:t},e)},setHeight:function(t,e){return this.setDimensions({height:t},e)},setDimensions:function(t,e){var i;for(var r in e=e||{},t)i=t[r],e.cssOnly||(this._setBackstoreDimension(r,t[r]),i+=\"px\",this.hasLostContext=!0),e.backstoreOnly||this._setCssDimension(r,i);return this._isCurrentlyDrawing&&this.freeDrawingBrush&&this.freeDrawingBrush._setBrushStyles(this.contextTop),this._initRetinaScaling(),this.calcOffset(),e.cssOnly||this.requestRenderAll(),this},_setBackstoreDimension:function(t,e){return this.lowerCanvasEl[t]=e,this.upperCanvasEl&&(this.upperCanvasEl[t]=e),this.cacheCanvasEl&&(this.cacheCanvasEl[t]=e),this[t]=e,this},_setCssDimension:function(t,e){return this.lowerCanvasEl.style[t]=e,this.upperCanvasEl&&(this.upperCanvasEl.style[t]=e),this.wrapperEl&&(this.wrapperEl.style[t]=e),this},getZoom:function(){return this.viewportTransform[0]},setViewportTransform:function(t){var e,i,r,n=this._activeObject,s=this.backgroundImage,o=this.overlayImage;for(this.viewportTransform=t,i=0,r=this._objects.length;i<r;i++)(e=this._objects[i]).group||e.setCoords(!0);return n&&n.setCoords(),s&&s.setCoords(!0),o&&o.setCoords(!0),this.calcViewportBoundaries(),this.renderOnAddRemove&&this.requestRenderAll(),this},zoomToPoint:function(t,e){var i=t,r=this.viewportTransform.slice(0);t=n(t,s(this.viewportTransform)),r[0]=e,r[3]=e;var o=n(t,r);return r[4]+=i.x-o.x,r[5]+=i.y-o.y,this.setViewportTransform(r)},setZoom:function(t){return this.zoomToPoint(new x.Point(0,0),t),this},absolutePan:function(t){var e=this.viewportTransform.slice(0);return e[4]=-t.x,e[5]=-t.y,this.setViewportTransform(e)},relativePan:function(t){return this.absolutePan(new x.Point(-t.x-this.viewportTransform[4],-t.y-this.viewportTransform[5]))},getElement:function(){return this.lowerCanvasEl},_onObjectAdded:function(t){this.stateful&&t.setupState(),t._set(\"canvas\",this),t.setCoords(),this.fire(\"object:added\",{target:t}),t.fire(\"added\")},_onObjectRemoved:function(t){this.fire(\"object:removed\",{target:t}),t.fire(\"removed\"),delete t.canvas},clearContext:function(t){return t.clearRect(0,0,this.width,this.height),this},getContext:function(){return this.contextContainer},clear:function(){return this.remove.apply(this,this.getObjects()),this.backgroundImage=null,this.overlayImage=null,this.backgroundColor=\"\",this.overlayColor=\"\",this._hasITextHandlers&&(this.off(\"mouse:up\",this._mouseUpITextHandler),this._iTextInstances=null,this._hasITextHandlers=!1),this.clearContext(this.contextContainer),this.fire(\"canvas:cleared\"),this.renderOnAddRemove&&this.requestRenderAll(),this},renderAll:function(){var t=this.contextContainer;return this.renderCanvas(t,this._objects),this},renderAndReset:function(){this.isRendering=0,this.renderAll()},requestRenderAll:function(){return this.isRendering||(this.isRendering=x.util.requestAnimFrame(this.renderAndResetBound)),this},calcViewportBoundaries:function(){var t={},e=this.width,i=this.height,r=s(this.viewportTransform);return t.tl=n({x:0,y:0},r),t.br=n({x:e,y:i},r),t.tr=new x.Point(t.br.x,t.tl.y),t.bl=new x.Point(t.tl.x,t.br.y),this.vptCoords=t,t},cancelRequestedRender:function(){this.isRendering&&(x.util.cancelAnimFrame(this.isRendering),this.isRendering=0)},renderCanvas:function(t,e){var i=this.viewportTransform,r=this.clipPath;this.cancelRequestedRender(),this.calcViewportBoundaries(),this.clearContext(t),x.util.setImageSmoothing(t,this.imageSmoothingEnabled),this.fire(\"before:render\",{ctx:t}),this._renderBackground(t),t.save(),t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this._renderObjects(t,e),t.restore(),!this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),r&&(r.canvas=this,r.shouldCache(),r._transformDone=!0,r.renderCache({forClipping:!0}),this.drawClipPathOnCanvas(t)),this._renderOverlay(t),this.controlsAboveOverlay&&this.interactive&&this.drawControls(t),this.fire(\"after:render\",{ctx:t})},drawClipPathOnCanvas:function(t){var e=this.viewportTransform,i=this.clipPath;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5]),t.globalCompositeOperation=\"destination-in\",i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},_renderObjects:function(t,e){var i,r;for(i=0,r=e.length;i<r;++i)e[i]&&e[i].render(t)},_renderBackgroundOrOverlay:function(t,e){var i=this[e+\"Color\"],r=this[e+\"Image\"],n=this.viewportTransform,s=this[e+\"Vpt\"];if(i||r){if(i){t.save(),t.beginPath(),t.moveTo(0,0),t.lineTo(this.width,0),t.lineTo(this.width,this.height),t.lineTo(0,this.height),t.closePath(),t.fillStyle=i.toLive?i.toLive(t,this):i,s&&t.transform(n[0],n[1],n[2],n[3],n[4],n[5]),t.transform(1,0,0,1,i.offsetX||0,i.offsetY||0);var o=i.gradientTransform||i.patternTransform;o&&t.transform(o[0],o[1],o[2],o[3],o[4],o[5]),t.fill(),t.restore()}r&&(t.save(),s&&t.transform(n[0],n[1],n[2],n[3],n[4],n[5]),r.render(t),t.restore())}},_renderBackground:function(t){this._renderBackgroundOrOverlay(t,\"background\")},_renderOverlay:function(t){this._renderBackgroundOrOverlay(t,\"overlay\")},getCenter:function(){return{top:this.height/2,left:this.width/2}},getCenterPoint:function(){return new x.Point(this.width/2,this.height/2)},centerObjectH:function(t){return this._centerObject(t,new x.Point(this.getCenterPoint().x,t.getCenterPoint().y))},centerObjectV:function(t){return this._centerObject(t,new x.Point(t.getCenterPoint().x,this.getCenterPoint().y))},centerObject:function(t){var e=this.getCenterPoint();return this._centerObject(t,e)},viewportCenterObject:function(t){var e=this.getVpCenter();return this._centerObject(t,e)},viewportCenterObjectH:function(t){var e=this.getVpCenter();return this._centerObject(t,new x.Point(e.x,t.getCenterPoint().y)),this},viewportCenterObjectV:function(t){var e=this.getVpCenter();return this._centerObject(t,new x.Point(t.getCenterPoint().x,e.y))},getVpCenter:function(){var t=this.getCenterPoint(),e=s(this.viewportTransform);return n(t,e)},_centerObject:function(t,e){return t.setPositionByOrigin(e,\"center\",\"center\"),t.setCoords(),this.renderOnAddRemove&&this.requestRenderAll(),this},toDatalessJSON:function(t){return this.toDatalessObject(t)},toObject:function(t){return this._toObjectMethod(\"toObject\",t)},toDatalessObject:function(t){return this._toObjectMethod(\"toDatalessObject\",t)},_toObjectMethod:function(e,i){var r=this.clipPath,n={version:x.version,objects:this._toObjects(e,i)};return r&&!r.excludeFromExport&&(n.clipPath=this._toObject(this.clipPath,e,i)),t(n,this.__serializeBgOverlay(e,i)),x.util.populateWithProperties(this,n,i),n},_toObjects:function(t,e){return this._objects.filter((function(t){return!t.excludeFromExport})).map((function(i){return this._toObject(i,t,e)}),this)},_toObject:function(t,e,i){var r;this.includeDefaultValues||(r=t.includeDefaultValues,t.includeDefaultValues=!1);var n=t[e](i);return this.includeDefaultValues||(t.includeDefaultValues=r),n},__serializeBgOverlay:function(t,e){var i={},r=this.backgroundImage,n=this.overlayImage,s=this.backgroundColor,o=this.overlayColor;return s&&s.toObject?s.excludeFromExport||(i.background=s.toObject(e)):s&&(i.background=s),o&&o.toObject?o.excludeFromExport||(i.overlay=o.toObject(e)):o&&(i.overlay=o),r&&!r.excludeFromExport&&(i.backgroundImage=this._toObject(r,t,e)),n&&!n.excludeFromExport&&(i.overlayImage=this._toObject(n,t,e)),i},svgViewportTransformation:!0,toSVG:function(t,e){t||(t={}),t.reviver=e;var i=[];return this._setSVGPreamble(i,t),this._setSVGHeader(i,t),this.clipPath&&i.push('<g clip-path=\"url(#'+this.clipPath.clipPathId+')\" >\\n'),this._setSVGBgOverlayColor(i,\"background\"),this._setSVGBgOverlayImage(i,\"backgroundImage\",e),this._setSVGObjects(i,e),this.clipPath&&i.push(\"</g>\\n\"),this._setSVGBgOverlayColor(i,\"overlay\"),this._setSVGBgOverlayImage(i,\"overlayImage\",e),i.push(\"</svg>\"),i.join(\"\")},_setSVGPreamble:function(t,e){e.suppressPreamble||t.push('<?xml version=\"1.0\" encoding=\"',e.encoding||\"UTF-8\",'\" standalone=\"no\" ?>\\n','<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" ','\"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\\n')},_setSVGHeader:function(t,e){var i,n=e.width||this.width,s=e.height||this.height,o='viewBox=\"0 0 '+this.width+\" \"+this.height+'\" ',a=x.Object.NUM_FRACTION_DIGITS;e.viewBox?o='viewBox=\"'+e.viewBox.x+\" \"+e.viewBox.y+\" \"+e.viewBox.width+\" \"+e.viewBox.height+'\" ':this.svgViewportTransformation&&(i=this.viewportTransform,o='viewBox=\"'+r(-i[4]/i[0],a)+\" \"+r(-i[5]/i[3],a)+\" \"+r(this.width/i[0],a)+\" \"+r(this.height/i[3],a)+'\" '),t.push(\"<svg \",'xmlns=\"http://www.w3.org/2000/svg\" ','xmlns:xlink=\"http://www.w3.org/1999/xlink\" ','version=\"1.1\" ','width=\"',n,'\" ','height=\"',s,'\" ',o,'xml:space=\"preserve\">\\n',\"<desc>Created with Fabric.js \",x.version,\"</desc>\\n\",\"<defs>\\n\",this.createSVGFontFacesMarkup(),this.createSVGRefElementsMarkup(),this.createSVGClipPathMarkup(e),\"</defs>\\n\")},createSVGClipPathMarkup:function(t){var e=this.clipPath;return e?(e.clipPathId=\"CLIPPATH_\"+x.Object.__uid++,'<clipPath id=\"'+e.clipPathId+'\" >\\n'+this.clipPath.toClipPathSVG(t.reviver)+\"</clipPath>\\n\"):\"\"},createSVGRefElementsMarkup:function(){var t=this;return[\"background\",\"overlay\"].map((function(e){var i=t[e+\"Color\"];if(i&&i.toLive){var r=t[e+\"Vpt\"],n=t.viewportTransform,s={width:t.width/(r?n[0]:1),height:t.height/(r?n[3]:1)};return i.toSVG(s,{additionalTransform:r?x.util.matrixToSVG(n):\"\"})}})).join(\"\")},createSVGFontFacesMarkup:function(){var t,e,i,r,n,s,o,a,l=\"\",h={},c=x.fontPaths,u=[];for(this._objects.forEach((function t(e){u.push(e),e._objects&&e._objects.forEach(t)})),o=0,a=u.length;o<a;o++)if(e=(t=u[o]).fontFamily,-1!==t.type.indexOf(\"text\")&&!h[e]&&c[e]&&(h[e]=!0,t.styles))for(n in i=t.styles)for(s in r=i[n])!h[e=r[s].fontFamily]&&c[e]&&(h[e]=!0);for(var p in h)l+=[\"\\t\\t@font-face {\\n\",\"\\t\\t\\tfont-family: '\",p,\"';\\n\",\"\\t\\t\\tsrc: url('\",c[p],\"');\\n\",\"\\t\\t}\\n\"].join(\"\");return l&&(l=['\\t<style type=\"text/css\">',\"<![CDATA[\\n\",l,\"]]>\",\"</style>\\n\"].join(\"\")),l},_setSVGObjects:function(t,e){var i,r,n,s=this._objects;for(r=0,n=s.length;r<n;r++)(i=s[r]).excludeFromExport||this._setSVGObject(t,i,e)},_setSVGObject:function(t,e,i){t.push(e.toSVG(i))},_setSVGBgOverlayImage:function(t,e,i){this[e]&&!this[e].excludeFromExport&&this[e].toSVG&&t.push(this[e].toSVG(i))},_setSVGBgOverlayColor:function(t,e){var i=this[e+\"Color\"],r=this.viewportTransform,n=this.width,s=this.height;if(i)if(i.toLive){var o=i.repeat,a=x.util.invertTransform(r),l=this[e+\"Vpt\"]?x.util.matrixToSVG(a):\"\";t.push('<rect transform=\"'+l+\" translate(\",n/2,\",\",s/2,')\"',' x=\"',i.offsetX-n/2,'\" y=\"',i.offsetY-s/2,'\" ','width=\"',\"repeat-y\"===o||\"no-repeat\"===o?i.source.width:n,'\" height=\"',\"repeat-x\"===o||\"no-repeat\"===o?i.source.height:s,'\" fill=\"url(#SVGID_'+i.id+')\"',\"></rect>\\n\")}else t.push('<rect x=\"0\" y=\"0\" width=\"100%\" height=\"100%\" ','fill=\"',i,'\"',\"></rect>\\n\")},sendToBack:function(t){if(!t)return this;var e,r,n,s=this._activeObject;if(t===s&&\"activeSelection\"===t.type)for(e=(n=s._objects).length;e--;)r=n[e],i(this._objects,r),this._objects.unshift(r);else i(this._objects,t),this._objects.unshift(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},bringToFront:function(t){if(!t)return this;var e,r,n,s=this._activeObject;if(t===s&&\"activeSelection\"===t.type)for(n=s._objects,e=0;e<n.length;e++)r=n[e],i(this._objects,r),this._objects.push(r);else i(this._objects,t),this._objects.push(t);return this.renderOnAddRemove&&this.requestRenderAll(),this},sendBackwards:function(t,e){if(!t)return this;var r,n,s,o,a,l=this._activeObject,h=0;if(t===l&&\"activeSelection\"===t.type)for(a=l._objects,r=0;r<a.length;r++)n=a[r],(s=this._objects.indexOf(n))>0+h&&(o=s-1,i(this._objects,n),this._objects.splice(o,0,n)),h++;else 0!==(s=this._objects.indexOf(t))&&(o=this._findNewLowerIndex(t,s,e),i(this._objects,t),this._objects.splice(o,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewLowerIndex:function(t,e,i){var r,n;if(i)for(r=e,n=e-1;n>=0;--n){if(t.intersectsWithObject(this._objects[n])||t.isContainedWithinObject(this._objects[n])||this._objects[n].isContainedWithinObject(t)){r=n;break}}else r=e-1;return r},bringForward:function(t,e){if(!t)return this;var r,n,s,o,a,l=this._activeObject,h=0;if(t===l&&\"activeSelection\"===t.type)for(r=(a=l._objects).length;r--;)n=a[r],(s=this._objects.indexOf(n))<this._objects.length-1-h&&(o=s+1,i(this._objects,n),this._objects.splice(o,0,n)),h++;else(s=this._objects.indexOf(t))!==this._objects.length-1&&(o=this._findNewUpperIndex(t,s,e),i(this._objects,t),this._objects.splice(o,0,t));return this.renderOnAddRemove&&this.requestRenderAll(),this},_findNewUpperIndex:function(t,e,i){var r,n,s;if(i)for(r=e,n=e+1,s=this._objects.length;n<s;++n){if(t.intersectsWithObject(this._objects[n])||t.isContainedWithinObject(this._objects[n])||this._objects[n].isContainedWithinObject(t)){r=n;break}}else r=e+1;return r},moveTo:function(t,e){return i(this._objects,t),this._objects.splice(e,0,t),this.renderOnAddRemove&&this.requestRenderAll()},dispose:function(){return this.isRendering&&(x.util.cancelAnimFrame(this.isRendering),this.isRendering=0),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[],this.backgroundImage&&this.backgroundImage.dispose&&this.backgroundImage.dispose(),this.backgroundImage=null,this.overlayImage&&this.overlayImage.dispose&&this.overlayImage.dispose(),this.overlayImage=null,this._iTextInstances=null,this.contextContainer=null,this.lowerCanvasEl.classList.remove(\"lower-canvas\"),x.util.setStyle(this.lowerCanvasEl,this._originalCanvasStyle),delete this._originalCanvasStyle,this.lowerCanvasEl.setAttribute(\"width\",this.width),this.lowerCanvasEl.setAttribute(\"height\",this.height),x.util.cleanUpJsdomNode(this.lowerCanvasEl),this.lowerCanvasEl=void 0,this},toString:function(){return\"#<fabric.Canvas (\"+this.complexity()+\"): { objects: \"+this._objects.length+\" }>\"}}),t(x.StaticCanvas.prototype,x.Observable),t(x.StaticCanvas.prototype,x.Collection),t(x.StaticCanvas.prototype,x.DataURLExporter),t(x.StaticCanvas,{EMPTY_JSON:'{\"objects\": [], \"background\": \"white\"}',supports:function(t){var e=a();if(!e||!e.getContext)return null;var i=e.getContext(\"2d\");return i&&\"setLineDash\"===t?void 0!==i.setLineDash:null}}),x.StaticCanvas.prototype.toJSON=x.StaticCanvas.prototype.toObject,x.isLikelyNode&&(x.StaticCanvas.prototype.createPNGStream=function(){var t=o(this.lowerCanvasEl);return t&&t.createPNGStream()},x.StaticCanvas.prototype.createJPEGStream=function(t){var e=o(this.lowerCanvasEl);return e&&e.createJPEGStream(t)})}}(),x.BaseBrush=x.util.createClass({color:\"rgb(0, 0, 0)\",width:1,shadow:null,strokeLineCap:\"round\",strokeLineJoin:\"round\",strokeMiterLimit:10,strokeDashArray:null,limitedToCanvasSize:!1,_setBrushStyles:function(t){t.strokeStyle=this.color,t.lineWidth=this.width,t.lineCap=this.strokeLineCap,t.miterLimit=this.strokeMiterLimit,t.lineJoin=this.strokeLineJoin,t.setLineDash(this.strokeDashArray||[])},_saveAndTransform:function(t){var e=this.canvas.viewportTransform;t.save(),t.transform(e[0],e[1],e[2],e[3],e[4],e[5])},_setShadow:function(){if(this.shadow){var t=this.canvas,e=this.shadow,i=t.contextTop,r=t.getZoom();t&&t._isRetinaScaling()&&(r*=x.devicePixelRatio),i.shadowColor=e.color,i.shadowBlur=e.blur*r,i.shadowOffsetX=e.offsetX*r,i.shadowOffsetY=e.offsetY*r}},needsFullRender:function(){return new x.Color(this.color).getAlpha()<1||!!this.shadow},_resetShadow:function(){var t=this.canvas.contextTop;t.shadowColor=\"\",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0},_isOutSideCanvas:function(t){return t.x<0||t.x>this.canvas.getWidth()||t.y<0||t.y>this.canvas.getHeight()}}),x.PencilBrush=x.util.createClass(x.BaseBrush,{decimate:.4,drawStraightLine:!1,straightLineKey:\"shiftKey\",initialize:function(t){this.canvas=t,this._points=[]},needsFullRender:function(){return this.callSuper(\"needsFullRender\")||this._hasStraightLine},_drawSegment:function(t,e,i){var r=e.midPointFrom(i);return t.quadraticCurveTo(e.x,e.y,r.x,r.y),r},onMouseDown:function(t,e){this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],this._prepareForDrawing(t),this._captureDrawingPath(t),this._render())},onMouseMove:function(t,e){if(this.canvas._isMainEvent(e.e)&&(this.drawStraightLine=e.e[this.straightLineKey],(!0!==this.limitedToCanvasSize||!this._isOutSideCanvas(t))&&this._captureDrawingPath(t)&&this._points.length>1))if(this.needsFullRender())this.canvas.clearContext(this.canvas.contextTop),this._render();else{var i=this._points,r=i.length,n=this.canvas.contextTop;this._saveAndTransform(n),this.oldEnd&&(n.beginPath(),n.moveTo(this.oldEnd.x,this.oldEnd.y)),this.oldEnd=this._drawSegment(n,i[r-2],i[r-1],!0),n.stroke(),n.restore()}},onMouseUp:function(t){return!this.canvas._isMainEvent(t.e)||(this.drawStraightLine=!1,this.oldEnd=void 0,this._finalizeAndAddPath(),!1)},_prepareForDrawing:function(t){var e=new x.Point(t.x,t.y);this._reset(),this._addPoint(e),this.canvas.contextTop.moveTo(e.x,e.y)},_addPoint:function(t){return!(this._points.length>1&&t.eq(this._points[this._points.length-1])||(this.drawStraightLine&&this._points.length>1&&(this._hasStraightLine=!0,this._points.pop()),this._points.push(t),0))},_reset:function(){this._points=[],this._setBrushStyles(this.canvas.contextTop),this._setShadow(),this._hasStraightLine=!1},_captureDrawingPath:function(t){var e=new x.Point(t.x,t.y);return this._addPoint(e)},_render:function(t){var e,i,r=this._points[0],n=this._points[1];if(t=t||this.canvas.contextTop,this._saveAndTransform(t),t.beginPath(),2===this._points.length&&r.x===n.x&&r.y===n.y){var s=this.width/1e3;r=new x.Point(r.x,r.y),n=new x.Point(n.x,n.y),r.x-=s,n.x+=s}for(t.moveTo(r.x,r.y),e=1,i=this._points.length;e<i;e++)this._drawSegment(t,r,n),r=this._points[e],n=this._points[e+1];t.lineTo(r.x,r.y),t.stroke(),t.restore()},convertPointsToSVGPath:function(t){var e=this.width/1e3;return x.util.getSmoothPathFromPoints(t,e)},_isEmptySVGPath:function(t){return\"M 0 0 Q 0 0 0 0 L 0 0\"===x.util.joinPath(t)},createPath:function(t){var e=new x.Path(t,{fill:null,stroke:this.color,strokeWidth:this.width,strokeLineCap:this.strokeLineCap,strokeMiterLimit:this.strokeMiterLimit,strokeLineJoin:this.strokeLineJoin,strokeDashArray:this.strokeDashArray});return this.shadow&&(this.shadow.affectStroke=!0,e.shadow=new x.Shadow(this.shadow)),e},decimatePoints:function(t,e){if(t.length<=2)return t;var i,r=this.canvas.getZoom(),n=Math.pow(e/r,2),s=t.length-1,o=t[0],a=[o];for(i=1;i<s-1;i++)Math.pow(o.x-t[i].x,2)+Math.pow(o.y-t[i].y,2)>=n&&(o=t[i],a.push(o));return a.push(t[s]),a},_finalizeAndAddPath:function(){this.canvas.contextTop.closePath(),this.decimate&&(this._points=this.decimatePoints(this._points,this.decimate));var t=this.convertPointsToSVGPath(this._points);if(this._isEmptySVGPath(t))this.canvas.requestRenderAll();else{var e=this.createPath(t);this.canvas.clearContext(this.canvas.contextTop),this.canvas.fire(\"before:path:created\",{path:e}),this.canvas.add(e),this.canvas.requestRenderAll(),e.setCoords(),this._resetShadow(),this.canvas.fire(\"path:created\",{path:e})}}}),x.CircleBrush=x.util.createClass(x.BaseBrush,{width:10,initialize:function(t){this.canvas=t,this.points=[]},drawDot:function(t){var e=this.addPoint(t),i=this.canvas.contextTop;this._saveAndTransform(i),this.dot(i,e),i.restore()},dot:function(t,e){t.fillStyle=e.fill,t.beginPath(),t.arc(e.x,e.y,e.radius,0,2*Math.PI,!1),t.closePath(),t.fill()},onMouseDown:function(t){this.points.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.drawDot(t)},_render:function(){var t,e,i=this.canvas.contextTop,r=this.points;for(this._saveAndTransform(i),t=0,e=r.length;t<e;t++)this.dot(i,r[t]);i.restore()},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.needsFullRender()?(this.canvas.clearContext(this.canvas.contextTop),this.addPoint(t),this._render()):this.drawDot(t))},onMouseUp:function(){var t,e,i=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;var r=[];for(t=0,e=this.points.length;t<e;t++){var n=this.points[t],s=new x.Circle({radius:n.radius,left:n.x,top:n.y,originX:\"center\",originY:\"center\",fill:n.fill});this.shadow&&(s.shadow=new x.Shadow(this.shadow)),r.push(s)}var o=new x.Group(r);o.canvas=this.canvas,this.canvas.fire(\"before:path:created\",{path:o}),this.canvas.add(o),this.canvas.fire(\"path:created\",{path:o}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=i,this.canvas.requestRenderAll()},addPoint:function(t){var e=new x.Point(t.x,t.y),i=x.util.getRandomInt(Math.max(0,this.width-20),this.width+20)/2,r=new x.Color(this.color).setAlpha(x.util.getRandomInt(0,100)/100).toRgba();return e.radius=i,e.fill=r,this.points.push(e),e}}),x.SprayBrush=x.util.createClass(x.BaseBrush,{width:10,density:20,dotWidth:1,dotWidthVariance:1,randomOpacity:!1,optimizeOverlapping:!0,initialize:function(t){this.canvas=t,this.sprayChunks=[]},onMouseDown:function(t){this.sprayChunks.length=0,this.canvas.clearContext(this.canvas.contextTop),this._setShadow(),this.addSprayChunk(t),this.render(this.sprayChunkPoints)},onMouseMove:function(t){!0===this.limitedToCanvasSize&&this._isOutSideCanvas(t)||(this.addSprayChunk(t),this.render(this.sprayChunkPoints))},onMouseUp:function(){var t=this.canvas.renderOnAddRemove;this.canvas.renderOnAddRemove=!1;for(var e=[],i=0,r=this.sprayChunks.length;i<r;i++)for(var n=this.sprayChunks[i],s=0,o=n.length;s<o;s++){var a=new x.Rect({width:n[s].width,height:n[s].width,left:n[s].x+1,top:n[s].y+1,originX:\"center\",originY:\"center\",fill:this.color});e.push(a)}this.optimizeOverlapping&&(e=this._getOptimizedRects(e));var l=new x.Group(e);this.shadow&&l.set(\"shadow\",new x.Shadow(this.shadow)),this.canvas.fire(\"before:path:created\",{path:l}),this.canvas.add(l),this.canvas.fire(\"path:created\",{path:l}),this.canvas.clearContext(this.canvas.contextTop),this._resetShadow(),this.canvas.renderOnAddRemove=t,this.canvas.requestRenderAll()},_getOptimizedRects:function(t){var e,i,r,n={};for(i=0,r=t.length;i<r;i++)n[e=t[i].left+\"\"+t[i].top]||(n[e]=t[i]);var s=[];for(e in n)s.push(n[e]);return s},render:function(t){var e,i,r=this.canvas.contextTop;for(r.fillStyle=this.color,this._saveAndTransform(r),e=0,i=t.length;e<i;e++){var n=t[e];void 0!==n.opacity&&(r.globalAlpha=n.opacity),r.fillRect(n.x,n.y,n.width,n.width)}r.restore()},_render:function(){var t,e,i=this.canvas.contextTop;for(i.fillStyle=this.color,this._saveAndTransform(i),t=0,e=this.sprayChunks.length;t<e;t++)this.render(this.sprayChunks[t]);i.restore()},addSprayChunk:function(t){this.sprayChunkPoints=[];var e,i,r,n,s=this.width/2;for(n=0;n<this.density;n++){e=x.util.getRandomInt(t.x-s,t.x+s),i=x.util.getRandomInt(t.y-s,t.y+s),r=this.dotWidthVariance?x.util.getRandomInt(Math.max(1,this.dotWidth-this.dotWidthVariance),this.dotWidth+this.dotWidthVariance):this.dotWidth;var o=new x.Point(e,i);o.width=r,this.randomOpacity&&(o.opacity=x.util.getRandomInt(0,100)/100),this.sprayChunkPoints.push(o)}this.sprayChunks.push(this.sprayChunkPoints)}}),x.PatternBrush=x.util.createClass(x.PencilBrush,{getPatternSrc:function(){var t=x.util.createCanvasElement(),e=t.getContext(\"2d\");return t.width=t.height=25,e.fillStyle=this.color,e.beginPath(),e.arc(10,10,10,0,2*Math.PI,!1),e.closePath(),e.fill(),t},getPatternSrcFunction:function(){return String(this.getPatternSrc).replace(\"this.color\",'\"'+this.color+'\"')},getPattern:function(t){return t.createPattern(this.source||this.getPatternSrc(),\"repeat\")},_setBrushStyles:function(t){this.callSuper(\"_setBrushStyles\",t),t.strokeStyle=this.getPattern(t)},createPath:function(t){var e=this.callSuper(\"createPath\",t),i=e._getLeftTopCoords().scalarAdd(e.strokeWidth/2);return e.stroke=new x.Pattern({source:this.source||this.getPatternSrcFunction(),offsetX:-i.x,offsetY:-i.y}),e}}),function(){var t=x.util.getPointer,e=x.util.degreesToRadians,i=x.util.isTouchEvent;for(var r in x.Canvas=x.util.createClass(x.StaticCanvas,{initialize:function(t,e){e||(e={}),this.renderAndResetBound=this.renderAndReset.bind(this),this.requestRenderAllBound=this.requestRenderAll.bind(this),this._initStatic(t,e),this._initInteractive(),this._createCacheCanvas()},uniformScaling:!0,uniScaleKey:\"shiftKey\",centeredScaling:!1,centeredRotation:!1,centeredKey:\"altKey\",altActionKey:\"shiftKey\",interactive:!0,selection:!0,selectionKey:\"shiftKey\",altSelectionKey:null,selectionColor:\"rgba(100, 100, 255, 0.3)\",selectionDashArray:[],selectionBorderColor:\"rgba(255, 255, 255, 0.3)\",selectionLineWidth:1,selectionFullyContained:!1,hoverCursor:\"move\",moveCursor:\"move\",defaultCursor:\"default\",freeDrawingCursor:\"crosshair\",notAllowedCursor:\"not-allowed\",containerClass:\"canvas-container\",perPixelTargetFind:!1,targetFindTolerance:0,skipTargetFind:!1,isDrawingMode:!1,preserveObjectStacking:!1,snapAngle:0,snapThreshold:null,stopContextMenu:!1,fireRightClick:!1,fireMiddleClick:!1,targets:[],enablePointerEvents:!1,_hoveredTarget:null,_hoveredTargets:[],_initInteractive:function(){this._currentTransform=null,this._groupSelector=null,this._initWrapperElement(),this._createUpperCanvas(),this._initEventListeners(),this._initRetinaScaling(),this.freeDrawingBrush=x.PencilBrush&&new x.PencilBrush(this),this.calcOffset()},_chooseObjectsToRender:function(){var t,e,i,r=this.getActiveObjects();if(r.length>0&&!this.preserveObjectStacking){e=[],i=[];for(var n=0,s=this._objects.length;n<s;n++)t=this._objects[n],-1===r.indexOf(t)?e.push(t):i.push(t);r.length>1&&(this._activeObject._objects=i),e.push.apply(e,i)}else e=this._objects;return e},renderAll:function(){!this.contextTopDirty||this._groupSelector||this.isDrawingMode||(this.clearContext(this.contextTop),this.contextTopDirty=!1),this.hasLostContext&&(this.renderTopLayer(this.contextTop),this.hasLostContext=!1);var t=this.contextContainer;return this.renderCanvas(t,this._chooseObjectsToRender()),this},renderTopLayer:function(t){t.save(),this.isDrawingMode&&this._isCurrentlyDrawing&&(this.freeDrawingBrush&&this.freeDrawingBrush._render(),this.contextTopDirty=!0),this.selection&&this._groupSelector&&(this._drawSelection(t),this.contextTopDirty=!0),t.restore()},renderTop:function(){var t=this.contextTop;return this.clearContext(t),this.renderTopLayer(t),this.fire(\"after:render\"),this},_normalizePointer:function(t,e){var i=t.calcTransformMatrix(),r=x.util.invertTransform(i),n=this.restorePointerVpt(e);return x.util.transformPoint(n,r)},isTargetTransparent:function(t,e,i){if(t.shouldCache()&&t._cacheCanvas&&t!==this._activeObject){var r=this._normalizePointer(t,{x:e,y:i}),n=Math.max(t.cacheTranslationX+r.x*t.zoomX,0),s=Math.max(t.cacheTranslationY+r.y*t.zoomY,0);return x.util.isTransparent(t._cacheContext,Math.round(n),Math.round(s),this.targetFindTolerance)}var o=this.contextCache,a=t.selectionBackgroundColor,l=this.viewportTransform;return t.selectionBackgroundColor=\"\",this.clearContext(o),o.save(),o.transform(l[0],l[1],l[2],l[3],l[4],l[5]),t.render(o),o.restore(),t.selectionBackgroundColor=a,x.util.isTransparent(o,e,i,this.targetFindTolerance)},_isSelectionKeyPressed:function(t){return Array.isArray(this.selectionKey)?!!this.selectionKey.find((function(e){return!0===t[e]})):t[this.selectionKey]},_shouldClearSelection:function(t,e){var i=this.getActiveObjects(),r=this._activeObject;return!e||e&&r&&i.length>1&&-1===i.indexOf(e)&&r!==e&&!this._isSelectionKeyPressed(t)||e&&!e.evented||e&&!e.selectable&&r&&r!==e},_shouldCenterTransform:function(t,e,i){var r;if(t)return\"scale\"===e||\"scaleX\"===e||\"scaleY\"===e||\"resizing\"===e?r=this.centeredScaling||t.centeredScaling:\"rotate\"===e&&(r=this.centeredRotation||t.centeredRotation),r?!i:i},_getOriginFromCorner:function(t,e){var i={x:t.originX,y:t.originY};return\"ml\"===e||\"tl\"===e||\"bl\"===e?i.x=\"right\":\"mr\"!==e&&\"tr\"!==e&&\"br\"!==e||(i.x=\"left\"),\"tl\"===e||\"mt\"===e||\"tr\"===e?i.y=\"bottom\":\"bl\"!==e&&\"mb\"!==e&&\"br\"!==e||(i.y=\"top\"),i},_getActionFromCorner:function(t,e,i,r){if(!e||!t)return\"drag\";var n=r.controls[e];return n.getActionName(i,n,r)},_setupCurrentTransform:function(t,i,r){if(i){var n=this.getPointer(t),s=i.__corner,o=i.controls[s],a=r&&s?o.getActionHandler(t,i,o):x.controlsUtils.dragHandler,l=this._getActionFromCorner(r,s,t,i),h=this._getOriginFromCorner(i,s),c=t[this.centeredKey],u={target:i,action:l,actionHandler:a,corner:s,scaleX:i.scaleX,scaleY:i.scaleY,skewX:i.skewX,skewY:i.skewY,offsetX:n.x-i.left,offsetY:n.y-i.top,originX:h.x,originY:h.y,ex:n.x,ey:n.y,lastX:n.x,lastY:n.y,theta:e(i.angle),width:i.width*i.scaleX,shiftKey:t.shiftKey,altKey:c,original:x.util.saveObjectTransform(i)};this._shouldCenterTransform(i,l,c)&&(u.originX=\"center\",u.originY=\"center\"),u.original.originX=h.x,u.original.originY=h.y,this._currentTransform=u,this._beforeTransform(t)}},setCursor:function(t){this.upperCanvasEl.style.cursor=t},_drawSelection:function(t){var e=this._groupSelector,i=new x.Point(e.ex,e.ey),r=x.util.transformPoint(i,this.viewportTransform),n=new x.Point(e.ex+e.left,e.ey+e.top),s=x.util.transformPoint(n,this.viewportTransform),o=Math.min(r.x,s.x),a=Math.min(r.y,s.y),l=Math.max(r.x,s.x),h=Math.max(r.y,s.y),c=this.selectionLineWidth/2;this.selectionColor&&(t.fillStyle=this.selectionColor,t.fillRect(o,a,l-o,h-a)),this.selectionLineWidth&&this.selectionBorderColor&&(t.lineWidth=this.selectionLineWidth,t.strokeStyle=this.selectionBorderColor,o+=c,a+=c,l-=c,h-=c,x.Object.prototype._setLineDash.call(this,t,this.selectionDashArray),t.strokeRect(o,a,l-o,h-a))},findTarget:function(t,e){if(!this.skipTargetFind){var r,n,s=this.getPointer(t,!0),o=this._activeObject,a=this.getActiveObjects(),l=i(t),h=a.length>1&&!e||1===a.length;if(this.targets=[],h&&o._findTargetCorner(s,l))return o;if(a.length>1&&!e&&o===this._searchPossibleTargets([o],s))return o;if(1===a.length&&o===this._searchPossibleTargets([o],s)){if(!this.preserveObjectStacking)return o;r=o,n=this.targets,this.targets=[]}var c=this._searchPossibleTargets(this._objects,s);return t[this.altSelectionKey]&&c&&r&&c!==r&&(c=r,this.targets=n),c}},_checkTarget:function(t,e,i){if(e&&e.visible&&e.evented&&e.containsPoint(t)){if(!this.perPixelTargetFind&&!e.perPixelTargetFind||e.isEditing)return!0;if(!this.isTargetTransparent(e,i.x,i.y))return!0}},_searchPossibleTargets:function(t,e){for(var i,r,n=t.length;n--;){var s=t[n],o=s.group?this._normalizePointer(s.group,e):e;if(this._checkTarget(o,s,e)){(i=t[n]).subTargetCheck&&i instanceof x.Group&&(r=this._searchPossibleTargets(i._objects,e))&&this.targets.push(r);break}}return i},restorePointerVpt:function(t){return x.util.transformPoint(t,x.util.invertTransform(this.viewportTransform))},getPointer:function(e,i){if(this._absolutePointer&&!i)return this._absolutePointer;if(this._pointer&&i)return this._pointer;var r,n=t(e),s=this.upperCanvasEl,o=s.getBoundingClientRect(),a=o.width||0,l=o.height||0;a&&l||(\"top\"in o&&\"bottom\"in o&&(l=Math.abs(o.top-o.bottom)),\"right\"in o&&\"left\"in o&&(a=Math.abs(o.right-o.left))),this.calcOffset(),n.x=n.x-this._offset.left,n.y=n.y-this._offset.top,i||(n=this.restorePointerVpt(n));var h=this.getRetinaScaling();return 1!==h&&(n.x/=h,n.y/=h),r=0===a||0===l?{width:1,height:1}:{width:s.width/a,height:s.height/l},{x:n.x*r.width,y:n.y*r.height}},_createUpperCanvas:function(){var t=this.lowerCanvasEl.className.replace(/\\s*lower-canvas\\s*/,\"\"),e=this.lowerCanvasEl,i=this.upperCanvasEl;i?i.className=\"\":(i=this._createCanvasElement(),this.upperCanvasEl=i),x.util.addClass(i,\"upper-canvas \"+t),this.wrapperEl.appendChild(i),this._copyCanvasStyle(e,i),this._applyCanvasStyle(i),this.contextTop=i.getContext(\"2d\")},getTopContext:function(){return this.contextTop},_createCacheCanvas:function(){this.cacheCanvasEl=this._createCanvasElement(),this.cacheCanvasEl.setAttribute(\"width\",this.width),this.cacheCanvasEl.setAttribute(\"height\",this.height),this.contextCache=this.cacheCanvasEl.getContext(\"2d\")},_initWrapperElement:function(){this.wrapperEl=x.util.wrapElement(this.lowerCanvasEl,\"div\",{class:this.containerClass}),x.util.setStyle(this.wrapperEl,{width:this.width+\"px\",height:this.height+\"px\",position:\"relative\"}),x.util.makeElementUnselectable(this.wrapperEl)},_applyCanvasStyle:function(t){var e=this.width||t.width,i=this.height||t.height;x.util.setStyle(t,{position:\"absolute\",width:e+\"px\",height:i+\"px\",left:0,top:0,\"touch-action\":this.allowTouchScrolling?\"manipulation\":\"none\",\"-ms-touch-action\":this.allowTouchScrolling?\"manipulation\":\"none\"}),t.width=e,t.height=i,x.util.makeElementUnselectable(t)},_copyCanvasStyle:function(t,e){e.style.cssText=t.style.cssText},getSelectionContext:function(){return this.contextTop},getSelectionElement:function(){return this.upperCanvasEl},getActiveObject:function(){return this._activeObject},getActiveObjects:function(){var t=this._activeObject;return t?\"activeSelection\"===t.type&&t._objects?t._objects.slice(0):[t]:[]},_onObjectRemoved:function(t){t===this._activeObject&&(this.fire(\"before:selection:cleared\",{target:t}),this._discardActiveObject(),this.fire(\"selection:cleared\",{target:t}),t.fire(\"deselected\")),t===this._hoveredTarget&&(this._hoveredTarget=null,this._hoveredTargets=[]),this.callSuper(\"_onObjectRemoved\",t)},_fireSelectionEvents:function(t,e){var i=!1,r=this.getActiveObjects(),n=[],s=[];t.forEach((function(t){-1===r.indexOf(t)&&(i=!0,t.fire(\"deselected\",{e:e,target:t}),s.push(t))})),r.forEach((function(r){-1===t.indexOf(r)&&(i=!0,r.fire(\"selected\",{e:e,target:r}),n.push(r))})),t.length>0&&r.length>0?i&&this.fire(\"selection:updated\",{e:e,selected:n,deselected:s}):r.length>0?this.fire(\"selection:created\",{e:e,selected:n}):t.length>0&&this.fire(\"selection:cleared\",{e:e,deselected:s})},setActiveObject:function(t,e){var i=this.getActiveObjects();return this._setActiveObject(t,e),this._fireSelectionEvents(i,e),this},_setActiveObject:function(t,e){return this._activeObject!==t&&(!!this._discardActiveObject(e,t)&&(!t.onSelect({e:e})&&(this._activeObject=t,!0)))},_discardActiveObject:function(t,e){var i=this._activeObject;if(i){if(i.onDeselect({e:t,object:e}))return!1;this._activeObject=null}return!0},discardActiveObject:function(t){var e=this.getActiveObjects(),i=this.getActiveObject();return e.length&&this.fire(\"before:selection:cleared\",{target:i,e:t}),this._discardActiveObject(t),this._fireSelectionEvents(e,t),this},dispose:function(){var t=this.wrapperEl;return this.removeListeners(),t.removeChild(this.upperCanvasEl),t.removeChild(this.lowerCanvasEl),this.contextCache=null,this.contextTop=null,[\"upperCanvasEl\",\"cacheCanvasEl\"].forEach(function(t){x.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this)),t.parentNode&&t.parentNode.replaceChild(this.lowerCanvasEl,this.wrapperEl),delete this.wrapperEl,x.StaticCanvas.prototype.dispose.call(this),this},clear:function(){return this.discardActiveObject(),this.clearContext(this.contextTop),this.callSuper(\"clear\")},drawControls:function(t){var e=this._activeObject;e&&e._renderControls(t)},_toObject:function(t,e,i){var r=this._realizeGroupTransformOnObject(t),n=this.callSuper(\"_toObject\",t,e,i);return this._unwindGroupTransformOnObject(t,r),n},_realizeGroupTransformOnObject:function(t){if(t.group&&\"activeSelection\"===t.group.type&&this._activeObject===t.group){var e={};return[\"angle\",\"flipX\",\"flipY\",\"left\",\"scaleX\",\"scaleY\",\"skewX\",\"skewY\",\"top\"].forEach((function(i){e[i]=t[i]})),x.util.addTransformToObject(t,this._activeObject.calcOwnMatrix()),e}return null},_unwindGroupTransformOnObject:function(t,e){e&&t.set(e)},_setSVGObject:function(t,e,i){var r=this._realizeGroupTransformOnObject(e);this.callSuper(\"_setSVGObject\",t,e,i),this._unwindGroupTransformOnObject(e,r)},setViewportTransform:function(t){this.renderOnAddRemove&&this._activeObject&&this._activeObject.isEditing&&this._activeObject.clearContextTop(),x.StaticCanvas.prototype.setViewportTransform.call(this,t)}}),x.StaticCanvas)\"prototype\"!==r&&(x.Canvas[r]=x.StaticCanvas[r])}(),function(){var t=x.util.addListener,e=x.util.removeListener,i={passive:!1};function r(t,e){return t.button&&t.button===e-1}x.util.object.extend(x.Canvas.prototype,{mainTouchId:null,_initEventListeners:function(){this.removeListeners(),this._bindEvents(),this.addOrRemove(t,\"add\")},_getEventPrefix:function(){return this.enablePointerEvents?\"pointer\":\"mouse\"},addOrRemove:function(t,e){var r=this.upperCanvasEl,n=this._getEventPrefix();t(x.window,\"resize\",this._onResize),t(r,n+\"down\",this._onMouseDown),t(r,n+\"move\",this._onMouseMove,i),t(r,n+\"out\",this._onMouseOut),t(r,n+\"enter\",this._onMouseEnter),t(r,\"wheel\",this._onMouseWheel),t(r,\"contextmenu\",this._onContextMenu),t(r,\"dblclick\",this._onDoubleClick),t(r,\"dragover\",this._onDragOver),t(r,\"dragenter\",this._onDragEnter),t(r,\"dragleave\",this._onDragLeave),t(r,\"drop\",this._onDrop),this.enablePointerEvents||t(r,\"touchstart\",this._onTouchStart,i),\"undefined\"!=typeof eventjs&&e in eventjs&&(eventjs[e](r,\"gesture\",this._onGesture),eventjs[e](r,\"drag\",this._onDrag),eventjs[e](r,\"orientation\",this._onOrientationChange),eventjs[e](r,\"shake\",this._onShake),eventjs[e](r,\"longpress\",this._onLongPress))},removeListeners:function(){this.addOrRemove(e,\"remove\");var t=this._getEventPrefix();e(x.document,t+\"up\",this._onMouseUp),e(x.document,\"touchend\",this._onTouchEnd,i),e(x.document,t+\"move\",this._onMouseMove,i),e(x.document,\"touchmove\",this._onMouseMove,i)},_bindEvents:function(){this.eventsBound||(this._onMouseDown=this._onMouseDown.bind(this),this._onTouchStart=this._onTouchStart.bind(this),this._onMouseMove=this._onMouseMove.bind(this),this._onMouseUp=this._onMouseUp.bind(this),this._onTouchEnd=this._onTouchEnd.bind(this),this._onResize=this._onResize.bind(this),this._onGesture=this._onGesture.bind(this),this._onDrag=this._onDrag.bind(this),this._onShake=this._onShake.bind(this),this._onLongPress=this._onLongPress.bind(this),this._onOrientationChange=this._onOrientationChange.bind(this),this._onMouseWheel=this._onMouseWheel.bind(this),this._onMouseOut=this._onMouseOut.bind(this),this._onMouseEnter=this._onMouseEnter.bind(this),this._onContextMenu=this._onContextMenu.bind(this),this._onDoubleClick=this._onDoubleClick.bind(this),this._onDragOver=this._onDragOver.bind(this),this._onDragEnter=this._simpleEventHandler.bind(this,\"dragenter\"),this._onDragLeave=this._simpleEventHandler.bind(this,\"dragleave\"),this._onDrop=this._onDrop.bind(this),this.eventsBound=!0)},_onGesture:function(t,e){this.__onTransformGesture&&this.__onTransformGesture(t,e)},_onDrag:function(t,e){this.__onDrag&&this.__onDrag(t,e)},_onMouseWheel:function(t){this.__onMouseWheel(t)},_onMouseOut:function(t){var e=this._hoveredTarget;this.fire(\"mouse:out\",{target:e,e:t}),this._hoveredTarget=null,e&&e.fire(\"mouseout\",{e:t});var i=this;this._hoveredTargets.forEach((function(r){i.fire(\"mouse:out\",{target:e,e:t}),r&&e.fire(\"mouseout\",{e:t})})),this._hoveredTargets=[]},_onMouseEnter:function(t){this._currentTransform||this.findTarget(t)||(this.fire(\"mouse:over\",{target:null,e:t}),this._hoveredTarget=null,this._hoveredTargets=[])},_onOrientationChange:function(t,e){this.__onOrientationChange&&this.__onOrientationChange(t,e)},_onShake:function(t,e){this.__onShake&&this.__onShake(t,e)},_onLongPress:function(t,e){this.__onLongPress&&this.__onLongPress(t,e)},_onDragOver:function(t){t.preventDefault();var e=this._simpleEventHandler(\"dragover\",t);this._fireEnterLeaveEvents(e,t)},_onDrop:function(t){return this._simpleEventHandler(\"drop:before\",t),this._simpleEventHandler(\"drop\",t)},_onContextMenu:function(t){return this.stopContextMenu&&(t.stopPropagation(),t.preventDefault()),!1},_onDoubleClick:function(t){this._cacheTransformEventData(t),this._handleEvent(t,\"dblclick\"),this._resetTransformEventData(t)},getPointerId:function(t){var e=t.changedTouches;return e?e[0]&&e[0].identifier:this.enablePointerEvents?t.pointerId:-1},_isMainEvent:function(t){return!0===t.isPrimary||!1!==t.isPrimary&&(\"touchend\"===t.type&&0===t.touches.length||(!t.changedTouches||t.changedTouches[0].identifier===this.mainTouchId))},_onTouchStart:function(r){r.preventDefault(),null===this.mainTouchId&&(this.mainTouchId=this.getPointerId(r)),this.__onMouseDown(r),this._resetTransformEventData();var n=this.upperCanvasEl,s=this._getEventPrefix();t(x.document,\"touchend\",this._onTouchEnd,i),t(x.document,\"touchmove\",this._onMouseMove,i),e(n,s+\"down\",this._onMouseDown)},_onMouseDown:function(r){this.__onMouseDown(r),this._resetTransformEventData();var n=this.upperCanvasEl,s=this._getEventPrefix();e(n,s+\"move\",this._onMouseMove,i),t(x.document,s+\"up\",this._onMouseUp),t(x.document,s+\"move\",this._onMouseMove,i)},_onTouchEnd:function(r){if(!(r.touches.length>0)){this.__onMouseUp(r),this._resetTransformEventData(),this.mainTouchId=null;var n=this._getEventPrefix();e(x.document,\"touchend\",this._onTouchEnd,i),e(x.document,\"touchmove\",this._onMouseMove,i);var s=this;this._willAddMouseDown&&clearTimeout(this._willAddMouseDown),this._willAddMouseDown=setTimeout((function(){t(s.upperCanvasEl,n+\"down\",s._onMouseDown),s._willAddMouseDown=0}),400)}},_onMouseUp:function(r){this.__onMouseUp(r),this._resetTransformEventData();var n=this.upperCanvasEl,s=this._getEventPrefix();this._isMainEvent(r)&&(e(x.document,s+\"up\",this._onMouseUp),e(x.document,s+\"move\",this._onMouseMove,i),t(n,s+\"move\",this._onMouseMove,i))},_onMouseMove:function(t){!this.allowTouchScrolling&&t.preventDefault&&t.preventDefault(),this.__onMouseMove(t)},_onResize:function(){this.calcOffset()},_shouldRender:function(t){var e=this._activeObject;return!!(!!e!=!!t||e&&t&&e!==t)||(e&&e.isEditing,!1)},__onMouseUp:function(t){var e,i=this._currentTransform,n=this._groupSelector,s=!1,o=!n||0===n.left&&0===n.top;if(this._cacheTransformEventData(t),e=this._target,this._handleEvent(t,\"up:before\"),r(t,3))this.fireRightClick&&this._handleEvent(t,\"up\",3,o);else{if(r(t,2))return this.fireMiddleClick&&this._handleEvent(t,\"up\",2,o),void this._resetTransformEventData();if(this.isDrawingMode&&this._isCurrentlyDrawing)this._onMouseUpInDrawingMode(t);else if(this._isMainEvent(t)){if(i&&(this._finalizeCurrentTransform(t),s=i.actionPerformed),!o){var a=e===this._activeObject;this._maybeGroupObjects(t),s||(s=this._shouldRender(e)||!a&&e===this._activeObject)}var l,h;if(e){if(l=e._findTargetCorner(this.getPointer(t,!0),x.util.isTouchEvent(t)),e.selectable&&e!==this._activeObject&&\"up\"===e.activeOn)this.setActiveObject(e,t),s=!0;else{var c=e.controls[l],u=c&&c.getMouseUpHandler(t,e,c);u&&u(t,i,(h=this.getPointer(t)).x,h.y)}e.isMoving=!1}if(i&&(i.target!==e||i.corner!==l)){var p=i.target&&i.target.controls[i.corner],f=p&&p.getMouseUpHandler(t,e,c);h=h||this.getPointer(t),f&&f(t,i,h.x,h.y)}this._setCursorFromEvent(t,e),this._handleEvent(t,\"up\",1,o),this._groupSelector=null,this._currentTransform=null,e&&(e.__corner=0),s?this.requestRenderAll():o||this.renderTop()}}},_simpleEventHandler:function(t,e){var i=this.findTarget(e),r=this.targets,n={e:e,target:i,subTargets:r};if(this.fire(t,n),i&&i.fire(t,n),!r)return i;for(var s=0;s<r.length;s++)r[s].fire(t,n);return i},_handleEvent:function(t,e,i,r){var n=this._target,s=this.targets||[],o={e:t,target:n,subTargets:s,button:i||1,isClick:r||!1,pointer:this._pointer,absolutePointer:this._absolutePointer,transform:this._currentTransform};\"up\"===e&&(o.currentTarget=this.findTarget(t),o.currentSubTargets=this.targets),this.fire(\"mouse:\"+e,o),n&&n.fire(\"mouse\"+e,o);for(var a=0;a<s.length;a++)s[a].fire(\"mouse\"+e,o)},_finalizeCurrentTransform:function(t){var e=this._currentTransform,i=e.target,r={e:t,target:i,transform:e,action:e.action};i._scaling&&(i._scaling=!1),i.setCoords(),(e.actionPerformed||this.stateful&&i.hasStateChanged())&&this._fire(\"modified\",r)},_onMouseDownInDrawingMode:function(t){this._isCurrentlyDrawing=!0,this.getActiveObject()&&this.discardActiveObject(t).requestRenderAll();var e=this.getPointer(t);this.freeDrawingBrush.onMouseDown(e,{e:t,pointer:e}),this._handleEvent(t,\"down\")},_onMouseMoveInDrawingMode:function(t){if(this._isCurrentlyDrawing){var e=this.getPointer(t);this.freeDrawingBrush.onMouseMove(e,{e:t,pointer:e})}this.setCursor(this.freeDrawingCursor),this._handleEvent(t,\"move\")},_onMouseUpInDrawingMode:function(t){var e=this.getPointer(t);this._isCurrentlyDrawing=this.freeDrawingBrush.onMouseUp({e:t,pointer:e}),this._handleEvent(t,\"up\")},__onMouseDown:function(t){this._cacheTransformEventData(t),this._handleEvent(t,\"down:before\");var e=this._target;if(r(t,3))this.fireRightClick&&this._handleEvent(t,\"down\",3);else if(r(t,2))this.fireMiddleClick&&this._handleEvent(t,\"down\",2);else if(this.isDrawingMode)this._onMouseDownInDrawingMode(t);else if(this._isMainEvent(t)&&!this._currentTransform){var i=this._pointer;this._previousPointer=i;var n=this._shouldRender(e),s=this._shouldGroup(t,e);if(this._shouldClearSelection(t,e)?this.discardActiveObject(t):s&&(this._handleGrouping(t,e),e=this._activeObject),!this.selection||e&&(e.selectable||e.isEditing||e===this._activeObject)||(this._groupSelector={ex:this._absolutePointer.x,ey:this._absolutePointer.y,top:0,left:0}),e){var o=e===this._activeObject;e.selectable&&\"down\"===e.activeOn&&this.setActiveObject(e,t);var a=e._findTargetCorner(this.getPointer(t,!0),x.util.isTouchEvent(t));if(e.__corner=a,e===this._activeObject&&(a||!s)){this._setupCurrentTransform(t,e,o);var l=e.controls[a],h=(i=this.getPointer(t),l&&l.getMouseDownHandler(t,e,l));h&&h(t,this._currentTransform,i.x,i.y)}}this._handleEvent(t,\"down\"),(n||s)&&this.requestRenderAll()}},_resetTransformEventData:function(){this._target=null,this._pointer=null,this._absolutePointer=null},_cacheTransformEventData:function(t){this._resetTransformEventData(),this._pointer=this.getPointer(t,!0),this._absolutePointer=this.restorePointerVpt(this._pointer),this._target=this._currentTransform?this._currentTransform.target:this.findTarget(t)||null},_beforeTransform:function(t){var e=this._currentTransform;this.stateful&&e.target.saveState(),this.fire(\"before:transform\",{e:t,transform:e})},__onMouseMove:function(t){var e,i;if(this._handleEvent(t,\"move:before\"),this._cacheTransformEventData(t),this.isDrawingMode)this._onMouseMoveInDrawingMode(t);else if(this._isMainEvent(t)){var r=this._groupSelector;r?(i=this._absolutePointer,r.left=i.x-r.ex,r.top=i.y-r.ey,this.renderTop()):this._currentTransform?this._transformObject(t):(e=this.findTarget(t)||null,this._setCursorFromEvent(t,e),this._fireOverOutEvents(e,t)),this._handleEvent(t,\"move\"),this._resetTransformEventData()}},_fireOverOutEvents:function(t,e){var i=this._hoveredTarget,r=this._hoveredTargets,n=this.targets,s=Math.max(r.length,n.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:\"mouseout\",canvasEvtOut:\"mouse:out\",evtIn:\"mouseover\",canvasEvtIn:\"mouse:over\"});for(var o=0;o<s;o++)this.fireSyntheticInOutEvents(n[o],e,{oldTarget:r[o],evtOut:\"mouseout\",evtIn:\"mouseover\"});this._hoveredTarget=t,this._hoveredTargets=this.targets.concat()},_fireEnterLeaveEvents:function(t,e){var i=this._draggedoverTarget,r=this._hoveredTargets,n=this.targets,s=Math.max(r.length,n.length);this.fireSyntheticInOutEvents(t,e,{oldTarget:i,evtOut:\"dragleave\",evtIn:\"dragenter\"});for(var o=0;o<s;o++)this.fireSyntheticInOutEvents(n[o],e,{oldTarget:r[o],evtOut:\"dragleave\",evtIn:\"dragenter\"});this._draggedoverTarget=t},fireSyntheticInOutEvents:function(t,e,i){var r,n,s,o=i.oldTarget,a=o!==t,l=i.canvasEvtIn,h=i.canvasEvtOut;a&&(r={e:e,target:t,previousTarget:o},n={e:e,target:o,nextTarget:t}),s=t&&a,o&&a&&(h&&this.fire(h,n),o.fire(i.evtOut,n)),s&&(l&&this.fire(l,r),t.fire(i.evtIn,r))},__onMouseWheel:function(t){this._cacheTransformEventData(t),this._handleEvent(t,\"wheel\"),this._resetTransformEventData()},_transformObject:function(t){var e=this.getPointer(t),i=this._currentTransform;i.reset=!1,i.shiftKey=t.shiftKey,i.altKey=t[this.centeredKey],this._performTransformAction(t,i,e),i.actionPerformed&&this.requestRenderAll()},_performTransformAction:function(t,e,i){var r=i.x,n=i.y,s=e.action,o=!1,a=e.actionHandler;a&&(o=a(t,e,r,n)),\"drag\"===s&&o&&(e.target.isMoving=!0,this.setCursor(e.target.moveCursor||this.moveCursor)),e.actionPerformed=e.actionPerformed||o},_fire:x.controlsUtils.fireEvent,_setCursorFromEvent:function(t,e){if(!e)return this.setCursor(this.defaultCursor),!1;var i=e.hoverCursor||this.hoverCursor,r=this._activeObject&&\"activeSelection\"===this._activeObject.type?this._activeObject:null,n=(!r||!r.contains(e))&&e._findTargetCorner(this.getPointer(t,!0));n?this.setCursor(this.getCornerCursor(n,e,t)):(e.subTargetCheck&&this.targets.concat().reverse().map((function(t){i=t.hoverCursor||i})),this.setCursor(i))},getCornerCursor:function(t,e,i){var r=e.controls[t];return r.cursorStyleHandler(i,r,e)}})}(),c=Math.min,u=Math.max,x.util.object.extend(x.Canvas.prototype,{_shouldGroup:function(t,e){var i=this._activeObject;return i&&this._isSelectionKeyPressed(t)&&e&&e.selectable&&this.selection&&(i!==e||\"activeSelection\"===i.type)&&!e.onSelect({e:t})},_handleGrouping:function(t,e){var i=this._activeObject;i.__corner||(e!==i||(e=this.findTarget(t,!0))&&e.selectable)&&(i&&\"activeSelection\"===i.type?this._updateActiveSelection(e,t):this._createActiveSelection(e,t))},_updateActiveSelection:function(t,e){var i=this._activeObject,r=i._objects.slice(0);i.contains(t)?(i.removeWithUpdate(t),this._hoveredTarget=t,this._hoveredTargets=this.targets.concat(),1===i.size()&&this._setActiveObject(i.item(0),e)):(i.addWithUpdate(t),this._hoveredTarget=i,this._hoveredTargets=this.targets.concat()),this._fireSelectionEvents(r,e)},_createActiveSelection:function(t,e){var i=this.getActiveObjects(),r=this._createGroup(t);this._hoveredTarget=r,this._setActiveObject(r,e),this._fireSelectionEvents(i,e)},_createGroup:function(t){var e=this._objects,i=e.indexOf(this._activeObject)<e.indexOf(t)?[this._activeObject,t]:[t,this._activeObject];return this._activeObject.isEditing&&this._activeObject.exitEditing(),new x.ActiveSelection(i,{canvas:this})},_groupSelectedObjects:function(t){var e,i=this._collectObjects(t);1===i.length?this.setActiveObject(i[0],t):i.length>1&&(e=new x.ActiveSelection(i.reverse(),{canvas:this}),this.setActiveObject(e,t))},_collectObjects:function(t){for(var e,i=[],r=this._groupSelector.ex,n=this._groupSelector.ey,s=r+this._groupSelector.left,o=n+this._groupSelector.top,a=new x.Point(c(r,s),c(n,o)),l=new x.Point(u(r,s),u(n,o)),h=!this.selectionFullyContained,p=r===s&&n===o,f=this._objects.length;f--&&!((e=this._objects[f])&&e.selectable&&e.visible&&(h&&e.intersectsWithRect(a,l,!0)||e.isContainedWithinRect(a,l,!0)||h&&e.containsPoint(a,null,!0)||h&&e.containsPoint(l,null,!0))&&(i.push(e),p)););return i.length>1&&(i=i.filter((function(e){return!e.onSelect({e:t})}))),i},_maybeGroupObjects:function(t){this.selection&&this._groupSelector&&this._groupSelectedObjects(t),this.setCursor(this.defaultCursor),this._groupSelector=null}}),x.util.object.extend(x.StaticCanvas.prototype,{toDataURL:function(t){t||(t={});var e=t.format||\"png\",i=t.quality||1,r=(t.multiplier||1)*(t.enableRetinaScaling?this.getRetinaScaling():1),n=this.toCanvasElement(r,t);return x.util.toDataURL(n,e,i)},toCanvasElement:function(t,e){t=t||1;var i=((e=e||{}).width||this.width)*t,r=(e.height||this.height)*t,n=this.getZoom(),s=this.width,o=this.height,a=n*t,l=this.viewportTransform,h=(l[4]-(e.left||0))*t,c=(l[5]-(e.top||0))*t,u=this.interactive,p=[a,0,0,a,h,c],f=this.enableRetinaScaling,d=x.util.createCanvasElement(),g=this.contextTop;return d.width=i,d.height=r,this.contextTop=null,this.enableRetinaScaling=!1,this.interactive=!1,this.viewportTransform=p,this.width=i,this.height=r,this.calcViewportBoundaries(),this.renderCanvas(d.getContext(\"2d\"),this._objects),this.viewportTransform=l,this.width=s,this.height=o,this.calcViewportBoundaries(),this.interactive=u,this.enableRetinaScaling=f,this.contextTop=g,d}}),x.util.object.extend(x.StaticCanvas.prototype,{loadFromJSON:function(t,e,i){if(t){var r=\"string\"==typeof t?JSON.parse(t):x.util.object.clone(t),n=this,s=r.clipPath,o=this.renderOnAddRemove;return this.renderOnAddRemove=!1,delete r.clipPath,this._enlivenObjects(r.objects,(function(t){n.clear(),n._setBgOverlay(r,(function(){s?n._enlivenObjects([s],(function(i){n.clipPath=i[0],n.__setupCanvas.call(n,r,t,o,e)})):n.__setupCanvas.call(n,r,t,o,e)}))}),i),this}},__setupCanvas:function(t,e,i,r){var n=this;e.forEach((function(t,e){n.insertAt(t,e)})),this.renderOnAddRemove=i,delete t.objects,delete t.backgroundImage,delete t.overlayImage,delete t.background,delete t.overlay,this._setOptions(t),this.renderAll(),r&&r()},_setBgOverlay:function(t,e){var i={backgroundColor:!1,overlayColor:!1,backgroundImage:!1,overlayImage:!1};if(t.backgroundImage||t.overlayImage||t.background||t.overlay){var r=function(){i.backgroundImage&&i.overlayImage&&i.backgroundColor&&i.overlayColor&&e&&e()};this.__setBgOverlay(\"backgroundImage\",t.backgroundImage,i,r),this.__setBgOverlay(\"overlayImage\",t.overlayImage,i,r),this.__setBgOverlay(\"backgroundColor\",t.background,i,r),this.__setBgOverlay(\"overlayColor\",t.overlay,i,r)}else e&&e()},__setBgOverlay:function(t,e,i,r){var n=this;if(!e)return i[t]=!0,void(r&&r());\"backgroundImage\"===t||\"overlayImage\"===t?x.util.enlivenObjects([e],(function(e){n[t]=e[0],i[t]=!0,r&&r()})):this[\"set\"+x.util.string.capitalize(t,!0)](e,(function(){i[t]=!0,r&&r()}))},_enlivenObjects:function(t,e,i){t&&0!==t.length?x.util.enlivenObjects(t,(function(t){e&&e(t)}),null,i):e&&e([])},_toDataURL:function(t,e){this.clone((function(i){e(i.toDataURL(t))}))},_toDataURLWithMultiplier:function(t,e,i){this.clone((function(r){i(r.toDataURLWithMultiplier(t,e))}))},clone:function(t,e){var i=JSON.stringify(this.toJSON(e));this.cloneWithoutData((function(e){e.loadFromJSON(i,(function(){t&&t(e)}))}))},cloneWithoutData:function(t){var e=x.util.createCanvasElement();e.width=this.width,e.height=this.height;var i=new x.Canvas(e);this.backgroundImage?(i.setBackgroundImage(this.backgroundImage.src,(function(){i.renderAll(),t&&t(i)})),i.backgroundImageOpacity=this.backgroundImageOpacity,i.backgroundImageStretch=this.backgroundImageStretch):t&&t(i)}}),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n=e.util.toFixed,s=e.util.string.capitalize,o=e.util.degreesToRadians,a=!e.isLikelyNode;e.Object||(e.Object=e.util.createClass(e.CommonMethods,{type:\"object\",originX:\"left\",originY:\"top\",top:0,left:0,width:0,height:0,scaleX:1,scaleY:1,flipX:!1,flipY:!1,opacity:1,angle:0,skewX:0,skewY:0,cornerSize:13,touchCornerSize:24,transparentCorners:!0,hoverCursor:null,moveCursor:null,padding:0,borderColor:\"rgb(178,204,255)\",borderDashArray:null,cornerColor:\"rgb(178,204,255)\",cornerStrokeColor:null,cornerStyle:\"rect\",cornerDashArray:null,centeredScaling:!1,centeredRotation:!0,fill:\"rgb(0,0,0)\",fillRule:\"nonzero\",globalCompositeOperation:\"source-over\",backgroundColor:\"\",selectionBackgroundColor:\"\",stroke:null,strokeWidth:1,strokeDashArray:null,strokeDashOffset:0,strokeLineCap:\"butt\",strokeLineJoin:\"miter\",strokeMiterLimit:4,shadow:null,borderOpacityWhenMoving:.4,borderScaleFactor:1,minScaleLimit:0,selectable:!0,evented:!0,visible:!0,hasControls:!0,hasBorders:!0,perPixelTargetFind:!1,includeDefaultValues:!0,lockMovementX:!1,lockMovementY:!1,lockRotation:!1,lockScalingX:!1,lockScalingY:!1,lockSkewingX:!1,lockSkewingY:!1,lockScalingFlip:!1,excludeFromExport:!1,objectCaching:a,statefullCache:!1,noScaleCache:!0,strokeUniform:!1,dirty:!0,__corner:0,paintFirst:\"fill\",activeOn:\"down\",stateProperties:\"top left width height scaleX scaleY flipX flipY originX originY transformMatrix stroke strokeWidth strokeDashArray strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit angle opacity fill globalCompositeOperation shadow visible backgroundColor skewX skewY fillRule paintFirst clipPath strokeUniform\".split(\" \"),cacheProperties:\"fill stroke strokeWidth strokeDashArray width height paintFirst strokeUniform strokeLineCap strokeDashOffset strokeLineJoin strokeMiterLimit backgroundColor clipPath\".split(\" \"),colorProperties:\"fill stroke backgroundColor\".split(\" \"),clipPath:void 0,inverted:!1,absolutePositioned:!1,initialize:function(t){t&&this.setOptions(t)},_createCacheCanvas:function(){this._cacheProperties={},this._cacheCanvas=e.util.createCanvasElement(),this._cacheContext=this._cacheCanvas.getContext(\"2d\"),this._updateCacheCanvas(),this.dirty=!0},_limitCacheSize:function(t){var i=e.perfLimitSizeTotal,r=t.width,n=t.height,s=e.maxCacheSideLimit,o=e.minCacheSideLimit;if(r<=s&&n<=s&&r*n<=i)return r<o&&(t.width=o),n<o&&(t.height=o),t;var a=r/n,l=e.util.limitDimsByArea(a,i),h=e.util.capValue,c=h(o,l.x,s),u=h(o,l.y,s);return r>c&&(t.zoomX/=r/c,t.width=c,t.capped=!0),n>u&&(t.zoomY/=n/u,t.height=u,t.capped=!0),t},_getCacheCanvasDimensions:function(){var t=this.getTotalObjectScaling(),e=this._getTransformedDimensions(0,0),i=e.x*t.scaleX/this.scaleX,r=e.y*t.scaleY/this.scaleY;return{width:i+2,height:r+2,zoomX:t.scaleX,zoomY:t.scaleY,x:i,y:r}},_updateCacheCanvas:function(){var t=this.canvas;if(this.noScaleCache&&t&&t._currentTransform){var i=t._currentTransform.target,r=t._currentTransform.action;if(this===i&&r.slice&&\"scale\"===r.slice(0,5))return!1}var n,s,o=this._cacheCanvas,a=this._limitCacheSize(this._getCacheCanvasDimensions()),l=e.minCacheSideLimit,h=a.width,c=a.height,u=a.zoomX,p=a.zoomY,f=h!==this.cacheWidth||c!==this.cacheHeight,d=this.zoomX!==u||this.zoomY!==p,g=f||d,m=0,v=0,y=!1;if(f){var x=this._cacheCanvas.width,_=this._cacheCanvas.height,b=h>x||c>_;y=b||(h<.9*x||c<.9*_)&&x>l&&_>l,b&&!a.capped&&(h>l||c>l)&&(m=.1*h,v=.1*c)}return this instanceof e.Text&&this.path&&(g=!0,y=!0,m+=this.getHeightOfLine(0)*this.zoomX,v+=this.getHeightOfLine(0)*this.zoomY),!!g&&(y?(o.width=Math.ceil(h+m),o.height=Math.ceil(c+v)):(this._cacheContext.setTransform(1,0,0,1,0,0),this._cacheContext.clearRect(0,0,o.width,o.height)),n=a.x/2,s=a.y/2,this.cacheTranslationX=Math.round(o.width/2-n)+n,this.cacheTranslationY=Math.round(o.height/2-s)+s,this.cacheWidth=h,this.cacheHeight=c,this._cacheContext.translate(this.cacheTranslationX,this.cacheTranslationY),this._cacheContext.scale(u,p),this.zoomX=u,this.zoomY=p,!0)},setOptions:function(t){this._setOptions(t),this._initGradient(t.fill,\"fill\"),this._initGradient(t.stroke,\"stroke\"),this._initPattern(t.fill,\"fill\"),this._initPattern(t.stroke,\"stroke\")},transform:function(t){var e=this.group&&!this.group._transformDone||this.group&&this.canvas&&t===this.canvas.contextTop,i=this.calcTransformMatrix(!e);t.transform(i[0],i[1],i[2],i[3],i[4],i[5])},toObject:function(t){var i=e.Object.NUM_FRACTION_DIGITS,r={type:this.type,version:e.version,originX:this.originX,originY:this.originY,left:n(this.left,i),top:n(this.top,i),width:n(this.width,i),height:n(this.height,i),fill:this.fill&&this.fill.toObject?this.fill.toObject():this.fill,stroke:this.stroke&&this.stroke.toObject?this.stroke.toObject():this.stroke,strokeWidth:n(this.strokeWidth,i),strokeDashArray:this.strokeDashArray?this.strokeDashArray.concat():this.strokeDashArray,strokeLineCap:this.strokeLineCap,strokeDashOffset:this.strokeDashOffset,strokeLineJoin:this.strokeLineJoin,strokeUniform:this.strokeUniform,strokeMiterLimit:n(this.strokeMiterLimit,i),scaleX:n(this.scaleX,i),scaleY:n(this.scaleY,i),angle:n(this.angle,i),flipX:this.flipX,flipY:this.flipY,opacity:n(this.opacity,i),shadow:this.shadow&&this.shadow.toObject?this.shadow.toObject():this.shadow,visible:this.visible,backgroundColor:this.backgroundColor,fillRule:this.fillRule,paintFirst:this.paintFirst,globalCompositeOperation:this.globalCompositeOperation,skewX:n(this.skewX,i),skewY:n(this.skewY,i)};return this.clipPath&&!this.clipPath.excludeFromExport&&(r.clipPath=this.clipPath.toObject(t),r.clipPath.inverted=this.clipPath.inverted,r.clipPath.absolutePositioned=this.clipPath.absolutePositioned),e.util.populateWithProperties(this,r,t),this.includeDefaultValues||(r=this._removeDefaultValues(r)),r},toDatalessObject:function(t){return this.toObject(t)},_removeDefaultValues:function(t){var i=e.util.getKlass(t.type).prototype;return i.stateProperties.forEach((function(e){\"left\"!==e&&\"top\"!==e&&(t[e]===i[e]&&delete t[e],Array.isArray(t[e])&&Array.isArray(i[e])&&0===t[e].length&&0===i[e].length&&delete t[e])})),t},toString:function(){return\"#<fabric.\"+s(this.type)+\">\"},getObjectScaling:function(){if(!this.group)return{scaleX:this.scaleX,scaleY:this.scaleY};var t=e.util.qrDecompose(this.calcTransformMatrix());return{scaleX:Math.abs(t.scaleX),scaleY:Math.abs(t.scaleY)}},getTotalObjectScaling:function(){var t=this.getObjectScaling(),e=t.scaleX,i=t.scaleY;if(this.canvas){var r=this.canvas.getZoom(),n=this.canvas.getRetinaScaling();e*=r*n,i*=r*n}return{scaleX:e,scaleY:i}},getObjectOpacity:function(){var t=this.opacity;return this.group&&(t*=this.group.getObjectOpacity()),t},_set:function(t,i){var r=\"scaleX\"===t||\"scaleY\"===t,n=this[t]!==i,s=!1;return r&&(i=this._constrainScale(i)),\"scaleX\"===t&&i<0?(this.flipX=!this.flipX,i*=-1):\"scaleY\"===t&&i<0?(this.flipY=!this.flipY,i*=-1):\"shadow\"!==t||!i||i instanceof e.Shadow?\"dirty\"===t&&this.group&&this.group.set(\"dirty\",i):i=new e.Shadow(i),this[t]=i,n&&(s=this.group&&this.group.isOnACache(),this.cacheProperties.indexOf(t)>-1?(this.dirty=!0,s&&this.group.set(\"dirty\",!0)):s&&this.stateProperties.indexOf(t)>-1&&this.group.set(\"dirty\",!0)),this},setOnGroup:function(){},getViewportTransform:function(){return this.canvas&&this.canvas.viewportTransform?this.canvas.viewportTransform:e.iMatrix.concat()},isNotVisible:function(){return 0===this.opacity||!this.width&&!this.height&&0===this.strokeWidth||!this.visible},render:function(t){this.isNotVisible()||this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(t.save(),this._setupCompositeOperation(t),this.drawSelectionBackground(t),this.transform(t),this._setOpacity(t),this._setShadow(t,this),this.shouldCache()?(this.renderCache(),this.drawCacheOnCanvas(t)):(this._removeCacheCanvas(),this.dirty=!1,this.drawObject(t),this.objectCaching&&this.statefullCache&&this.saveState({propertySet:\"cacheProperties\"})),t.restore())},renderCache:function(t){t=t||{},this._cacheCanvas&&this._cacheContext||this._createCacheCanvas(),this.isCacheDirty()&&(this.statefullCache&&this.saveState({propertySet:\"cacheProperties\"}),this.drawObject(this._cacheContext,t.forClipping),this.dirty=!1)},_removeCacheCanvas:function(){this._cacheCanvas=null,this._cacheContext=null,this.cacheWidth=0,this.cacheHeight=0},hasStroke:function(){return this.stroke&&\"transparent\"!==this.stroke&&0!==this.strokeWidth},hasFill:function(){return this.fill&&\"transparent\"!==this.fill},needsItsOwnCache:function(){return!(\"stroke\"!==this.paintFirst||!this.hasFill()||!this.hasStroke()||\"object\"!=typeof this.shadow)||!!this.clipPath},shouldCache:function(){return this.ownCaching=this.needsItsOwnCache()||this.objectCaching&&(!this.group||!this.group.isOnACache()),this.ownCaching},willDrawShadow:function(){return!!this.shadow&&(0!==this.shadow.offsetX||0!==this.shadow.offsetY)},drawClipPathOnCache:function(t,i){if(t.save(),i.inverted?t.globalCompositeOperation=\"destination-out\":t.globalCompositeOperation=\"destination-in\",i.absolutePositioned){var r=e.util.invertTransform(this.calcTransformMatrix());t.transform(r[0],r[1],r[2],r[3],r[4],r[5])}i.transform(t),t.scale(1/i.zoomX,1/i.zoomY),t.drawImage(i._cacheCanvas,-i.cacheTranslationX,-i.cacheTranslationY),t.restore()},drawObject:function(t,e){var i=this.fill,r=this.stroke;e?(this.fill=\"black\",this.stroke=\"\",this._setClippingProperties(t)):this._renderBackground(t),this._render(t),this._drawClipPath(t,this.clipPath),this.fill=i,this.stroke=r},_drawClipPath:function(t,e){e&&(e.canvas=this.canvas,e.shouldCache(),e._transformDone=!0,e.renderCache({forClipping:!0}),this.drawClipPathOnCache(t,e))},drawCacheOnCanvas:function(t){t.scale(1/this.zoomX,1/this.zoomY),t.drawImage(this._cacheCanvas,-this.cacheTranslationX,-this.cacheTranslationY)},isCacheDirty:function(t){if(this.isNotVisible())return!1;if(this._cacheCanvas&&this._cacheContext&&!t&&this._updateCacheCanvas())return!0;if(this.dirty||this.clipPath&&this.clipPath.absolutePositioned||this.statefullCache&&this.hasStateChanged(\"cacheProperties\")){if(this._cacheCanvas&&this._cacheContext&&!t){var e=this.cacheWidth/this.zoomX,i=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-e/2,-i/2,e,i)}return!0}return!1},_renderBackground:function(t){if(this.backgroundColor){var e=this._getNonTransformedDimensions();t.fillStyle=this.backgroundColor,t.fillRect(-e.x/2,-e.y/2,e.x,e.y),this._removeShadow(t)}},_setOpacity:function(t){this.group&&!this.group._transformDone?t.globalAlpha=this.getObjectOpacity():t.globalAlpha*=this.opacity},_setStrokeStyles:function(t,e){var i=e.stroke;i&&(t.lineWidth=e.strokeWidth,t.lineCap=e.strokeLineCap,t.lineDashOffset=e.strokeDashOffset,t.lineJoin=e.strokeLineJoin,t.miterLimit=e.strokeMiterLimit,i.toLive?\"percentage\"===i.gradientUnits||i.gradientTransform||i.patternTransform?this._applyPatternForTransformedGradient(t,i):(t.strokeStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):t.strokeStyle=e.stroke)},_setFillStyles:function(t,e){var i=e.fill;i&&(i.toLive?(t.fillStyle=i.toLive(t,this),this._applyPatternGradientTransform(t,e.fill)):t.fillStyle=i)},_setClippingProperties:function(t){t.globalAlpha=1,t.strokeStyle=\"transparent\",t.fillStyle=\"#000000\"},_setLineDash:function(t,e){e&&0!==e.length&&(1&e.length&&e.push.apply(e,e),t.setLineDash(e))},_renderControls:function(t,i){var r,n,s,a=this.getViewportTransform(),l=this.calcTransformMatrix();n=void 0!==(i=i||{}).hasBorders?i.hasBorders:this.hasBorders,s=void 0!==i.hasControls?i.hasControls:this.hasControls,l=e.util.multiplyTransformMatrices(a,l),r=e.util.qrDecompose(l),t.save(),t.translate(r.translateX,r.translateY),t.lineWidth=1*this.borderScaleFactor,this.group||(t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1),this.flipX&&(r.angle-=180),t.rotate(o(this.group?r.angle:this.angle)),i.forActiveSelection||this.group?n&&this.drawBordersInGroup(t,r,i):n&&this.drawBorders(t,i),s&&this.drawControls(t,i),t.restore()},_setShadow:function(t){if(this.shadow){var i,r=this.shadow,n=this.canvas,s=n&&n.viewportTransform[0]||1,o=n&&n.viewportTransform[3]||1;i=r.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),n&&n._isRetinaScaling()&&(s*=e.devicePixelRatio,o*=e.devicePixelRatio),t.shadowColor=r.color,t.shadowBlur=r.blur*e.browserShadowBlurConstant*(s+o)*(i.scaleX+i.scaleY)/4,t.shadowOffsetX=r.offsetX*s*i.scaleX,t.shadowOffsetY=r.offsetY*o*i.scaleY}},_removeShadow:function(t){this.shadow&&(t.shadowColor=\"\",t.shadowBlur=t.shadowOffsetX=t.shadowOffsetY=0)},_applyPatternGradientTransform:function(t,e){if(!e||!e.toLive)return{offsetX:0,offsetY:0};var i=e.gradientTransform||e.patternTransform,r=-this.width/2+e.offsetX||0,n=-this.height/2+e.offsetY||0;return\"percentage\"===e.gradientUnits?t.transform(this.width,0,0,this.height,r,n):t.transform(1,0,0,1,r,n),i&&t.transform(i[0],i[1],i[2],i[3],i[4],i[5]),{offsetX:r,offsetY:n}},_renderPaintInOrder:function(t){\"stroke\"===this.paintFirst?(this._renderStroke(t),this._renderFill(t)):(this._renderFill(t),this._renderStroke(t))},_render:function(){},_renderFill:function(t){this.fill&&(t.save(),this._setFillStyles(t,this),\"evenodd\"===this.fillRule?t.fill(\"evenodd\"):t.fill(),t.restore())},_renderStroke:function(t){if(this.stroke&&0!==this.strokeWidth){if(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this.strokeUniform&&this.group){var e=this.getObjectScaling();t.scale(1/e.scaleX,1/e.scaleY)}else this.strokeUniform&&t.scale(1/this.scaleX,1/this.scaleY);this._setLineDash(t,this.strokeDashArray),this._setStrokeStyles(t,this),t.stroke(),t.restore()}},_applyPatternForTransformedGradient:function(t,i){var r,n=this._limitCacheSize(this._getCacheCanvasDimensions()),s=e.util.createCanvasElement(),o=this.canvas.getRetinaScaling(),a=n.x/this.scaleX/o,l=n.y/this.scaleY/o;s.width=a,s.height=l,(r=s.getContext(\"2d\")).beginPath(),r.moveTo(0,0),r.lineTo(a,0),r.lineTo(a,l),r.lineTo(0,l),r.closePath(),r.translate(a/2,l/2),r.scale(n.zoomX/this.scaleX/o,n.zoomY/this.scaleY/o),this._applyPatternGradientTransform(r,i),r.fillStyle=i.toLive(t),r.fill(),t.translate(-this.width/2-this.strokeWidth/2,-this.height/2-this.strokeWidth/2),t.scale(o*this.scaleX/n.zoomX,o*this.scaleY/n.zoomY),t.strokeStyle=r.createPattern(s,\"no-repeat\")},_findCenterFromElement:function(){return{x:this.left+this.width/2,y:this.top+this.height/2}},_assignTransformMatrixProps:function(){if(this.transformMatrix){var t=e.util.qrDecompose(this.transformMatrix);this.flipX=!1,this.flipY=!1,this.set(\"scaleX\",t.scaleX),this.set(\"scaleY\",t.scaleY),this.angle=t.angle,this.skewX=t.skewX,this.skewY=0}},_removeTransformMatrix:function(t){var i=this._findCenterFromElement();this.transformMatrix&&(this._assignTransformMatrixProps(),i=e.util.transformPoint(i,this.transformMatrix)),this.transformMatrix=null,t&&(this.scaleX*=t.scaleX,this.scaleY*=t.scaleY,this.cropX=t.cropX,this.cropY=t.cropY,i.x+=t.offsetLeft,i.y+=t.offsetTop,this.width=t.width,this.height=t.height),this.setPositionByOrigin(i,\"center\",\"center\")},clone:function(t,i){var r=this.toObject(i);this.constructor.fromObject?this.constructor.fromObject(r,t):e.Object._fromObject(\"Object\",r,t)},cloneAsImage:function(t,i){var r=this.toCanvasElement(i);return t&&t(new e.Image(r)),this},toCanvasElement:function(t){t||(t={});var i=e.util,r=i.saveObjectTransform(this),n=this.group,s=this.shadow,o=Math.abs,a=(t.multiplier||1)*(t.enableRetinaScaling?e.devicePixelRatio:1);delete this.group,t.withoutTransform&&i.resetObjectTransform(this),t.withoutShadow&&(this.shadow=null);var l,h,c,u,p=e.util.createCanvasElement(),f=this.getBoundingRect(!0,!0),d=this.shadow,g={x:0,y:0};d&&(h=d.blur,l=d.nonScaling?{scaleX:1,scaleY:1}:this.getObjectScaling(),g.x=2*Math.round(o(d.offsetX)+h)*o(l.scaleX),g.y=2*Math.round(o(d.offsetY)+h)*o(l.scaleY)),c=f.width+g.x,u=f.height+g.y,p.width=Math.ceil(c),p.height=Math.ceil(u);var m=new e.StaticCanvas(p,{enableRetinaScaling:!1,renderOnAddRemove:!1,skipOffscreen:!1});\"jpeg\"===t.format&&(m.backgroundColor=\"#fff\"),this.setPositionByOrigin(new e.Point(m.width/2,m.height/2),\"center\",\"center\");var v=this.canvas;m.add(this);var y=m.toCanvasElement(a||1,t);return this.shadow=s,this.set(\"canvas\",v),n&&(this.group=n),this.set(r).setCoords(),m._objects=[],m.dispose(),m=null,y},toDataURL:function(t){return t||(t={}),e.util.toDataURL(this.toCanvasElement(t),t.format||\"png\",t.quality||1)},isType:function(t){return arguments.length>1?Array.from(arguments).includes(this.type):this.type===t},complexity:function(){return 1},toJSON:function(t){return this.toObject(t)},rotate:function(t){var e=(\"center\"!==this.originX||\"center\"!==this.originY)&&this.centeredRotation;return e&&this._setOriginToCenter(),this.set(\"angle\",t),e&&this._resetOrigin(),this},centerH:function(){return this.canvas&&this.canvas.centerObjectH(this),this},viewportCenterH:function(){return this.canvas&&this.canvas.viewportCenterObjectH(this),this},centerV:function(){return this.canvas&&this.canvas.centerObjectV(this),this},viewportCenterV:function(){return this.canvas&&this.canvas.viewportCenterObjectV(this),this},center:function(){return this.canvas&&this.canvas.centerObject(this),this},viewportCenter:function(){return this.canvas&&this.canvas.viewportCenterObject(this),this},getLocalPointer:function(t,i){i=i||this.canvas.getPointer(t);var r=new e.Point(i.x,i.y),n=this._getLeftTopCoords();return this.angle&&(r=e.util.rotatePoint(r,n,o(-this.angle))),{x:r.x-n.x,y:r.y-n.y}},_setupCompositeOperation:function(t){this.globalCompositeOperation&&(t.globalCompositeOperation=this.globalCompositeOperation)},dispose:function(){e.runningAnimations&&e.runningAnimations.cancelByTarget(this)}}),e.util.createAccessors&&e.util.createAccessors(e.Object),i(e.Object.prototype,e.Observable),e.Object.NUM_FRACTION_DIGITS=2,e.Object.ENLIVEN_PROPS=[\"clipPath\"],e.Object._fromObject=function(t,i,n,s){var o=e[t];i=r(i,!0),e.util.enlivenPatterns([i.fill,i.stroke],(function(t){void 0!==t[0]&&(i.fill=t[0]),void 0!==t[1]&&(i.stroke=t[1]),e.util.enlivenObjectEnlivables(i,i,(function(){var t=s?new o(i[s],i):new o(i);n&&n(t)}))}))},e.Object.__uid=0)}(t.exports),p=x.util.degreesToRadians,f={left:-.5,center:0,right:.5},d={top:-.5,center:0,bottom:.5},x.util.object.extend(x.Object.prototype,{translateToGivenOrigin:function(t,e,i,r,n){var s,o,a,l=t.x,h=t.y;return\"string\"==typeof e?e=f[e]:e-=.5,\"string\"==typeof r?r=f[r]:r-=.5,\"string\"==typeof i?i=d[i]:i-=.5,\"string\"==typeof n?n=d[n]:n-=.5,o=n-i,((s=r-e)||o)&&(a=this._getTransformedDimensions(),l=t.x+s*a.x,h=t.y+o*a.y),new x.Point(l,h)},translateToCenterPoint:function(t,e,i){var r=this.translateToGivenOrigin(t,e,i,\"center\",\"center\");return this.angle?x.util.rotatePoint(r,t,p(this.angle)):r},translateToOriginPoint:function(t,e,i){var r=this.translateToGivenOrigin(t,\"center\",\"center\",e,i);return this.angle?x.util.rotatePoint(r,t,p(this.angle)):r},getCenterPoint:function(){var t=new x.Point(this.left,this.top);return this.translateToCenterPoint(t,this.originX,this.originY)},getPointByOrigin:function(t,e){var i=this.getCenterPoint();return this.translateToOriginPoint(i,t,e)},toLocalPoint:function(t,e,i){var r,n,s=this.getCenterPoint();return r=void 0!==e&&void 0!==i?this.translateToGivenOrigin(s,\"center\",\"center\",e,i):new x.Point(this.left,this.top),n=new x.Point(t.x,t.y),this.angle&&(n=x.util.rotatePoint(n,s,-p(this.angle))),n.subtractEquals(r)},setPositionByOrigin:function(t,e,i){var r=this.translateToCenterPoint(t,e,i),n=this.translateToOriginPoint(r,this.originX,this.originY);this.set(\"left\",n.x),this.set(\"top\",n.y)},adjustPosition:function(t){var e,i,r=p(this.angle),n=this.getScaledWidth(),s=x.util.cos(r)*n,o=x.util.sin(r)*n;e=\"string\"==typeof this.originX?f[this.originX]:this.originX-.5,i=\"string\"==typeof t?f[t]:t-.5,this.left+=s*(i-e),this.top+=o*(i-e),this.setCoords(),this.originX=t},_setOriginToCenter:function(){this._originalOriginX=this.originX,this._originalOriginY=this.originY;var t=this.getCenterPoint();this.originX=\"center\",this.originY=\"center\",this.left=t.x,this.top=t.y},_resetOrigin:function(){var t=this.translateToOriginPoint(this.getCenterPoint(),this._originalOriginX,this._originalOriginY);this.originX=this._originalOriginX,this.originY=this._originalOriginY,this.left=t.x,this.top=t.y,this._originalOriginX=null,this._originalOriginY=null},_getLeftTopCoords:function(){return this.translateToOriginPoint(this.getCenterPoint(),\"left\",\"top\")}}),function(){var t=x.util,e=t.degreesToRadians,i=t.multiplyTransformMatrices,r=t.transformPoint;t.object.extend(x.Object.prototype,{oCoords:null,aCoords:null,lineCoords:null,ownMatrixCache:null,matrixCache:null,controls:{},_getCoords:function(t,e){return e?t?this.calcACoords():this.calcLineCoords():(this.aCoords&&this.lineCoords||this.setCoords(!0),t?this.aCoords:this.lineCoords)},getCoords:function(t,e){return i=this._getCoords(t,e),[new x.Point(i.tl.x,i.tl.y),new x.Point(i.tr.x,i.tr.y),new x.Point(i.br.x,i.br.y),new x.Point(i.bl.x,i.bl.y)];var i},intersectsWithRect:function(t,e,i,r){var n=this.getCoords(i,r);return\"Intersection\"===x.Intersection.intersectPolygonRectangle(n,t,e).status},intersectsWithObject:function(t,e,i){return\"Intersection\"===x.Intersection.intersectPolygonPolygon(this.getCoords(e,i),t.getCoords(e,i)).status||t.isContainedWithinObject(this,e,i)||this.isContainedWithinObject(t,e,i)},isContainedWithinObject:function(t,e,i){for(var r=this.getCoords(e,i),n=e?t.aCoords:t.lineCoords,s=0,o=t._getImageLines(n);s<4;s++)if(!t.containsPoint(r[s],o))return!1;return!0},isContainedWithinRect:function(t,e,i,r){var n=this.getBoundingRect(i,r);return n.left>=t.x&&n.left+n.width<=e.x&&n.top>=t.y&&n.top+n.height<=e.y},containsPoint:function(t,e,i,r){var n=this._getCoords(i,r),s=(e=e||this._getImageLines(n),this._findCrossPoints(t,e));return 0!==s&&s%2==1},isOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.getCoords(!0,t).some((function(t){return t.x<=i.x&&t.x>=e.x&&t.y<=i.y&&t.y>=e.y}))||(!!this.intersectsWithRect(e,i,!0,t)||this._containsCenterOfCanvas(e,i,t))},_containsCenterOfCanvas:function(t,e,i){var r={x:(t.x+e.x)/2,y:(t.y+e.y)/2};return!!this.containsPoint(r,null,!0,i)},isPartiallyOnScreen:function(t){if(!this.canvas)return!1;var e=this.canvas.vptCoords.tl,i=this.canvas.vptCoords.br;return!!this.intersectsWithRect(e,i,!0,t)||this.getCoords(!0,t).every((function(t){return(t.x>=i.x||t.x<=e.x)&&(t.y>=i.y||t.y<=e.y)}))&&this._containsCenterOfCanvas(e,i,t)},_getImageLines:function(t){return{topline:{o:t.tl,d:t.tr},rightline:{o:t.tr,d:t.br},bottomline:{o:t.br,d:t.bl},leftline:{o:t.bl,d:t.tl}}},_findCrossPoints:function(t,e){var i,r,n,s=0;for(var o in e)if(!((n=e[o]).o.y<t.y&&n.d.y<t.y||n.o.y>=t.y&&n.d.y>=t.y||(n.o.x===n.d.x&&n.o.x>=t.x?r=n.o.x:(0,i=(n.d.y-n.o.y)/(n.d.x-n.o.x),r=-(t.y-0*t.x-(n.o.y-i*n.o.x))/(0-i)),r>=t.x&&(s+=1),2!==s)))break;return s},getBoundingRect:function(e,i){var r=this.getCoords(e,i);return t.makeBoundingBoxFromPoints(r)},getScaledWidth:function(){return this._getTransformedDimensions().x},getScaledHeight:function(){return this._getTransformedDimensions().y},_constrainScale:function(t){return Math.abs(t)<this.minScaleLimit?t<0?-this.minScaleLimit:this.minScaleLimit:0===t?1e-4:t},scale:function(t){return this._set(\"scaleX\",t),this._set(\"scaleY\",t),this.setCoords()},scaleToWidth:function(t,e){var i=this.getBoundingRect(e).width/this.getScaledWidth();return this.scale(t/this.width/i)},scaleToHeight:function(t,e){var i=this.getBoundingRect(e).height/this.getScaledHeight();return this.scale(t/this.height/i)},calcLineCoords:function(){var i=this.getViewportTransform(),n=this.padding,s=e(this.angle),o=t.cos(s)*n,a=t.sin(s)*n,l=o+a,h=o-a,c=this.calcACoords(),u={tl:r(c.tl,i),tr:r(c.tr,i),bl:r(c.bl,i),br:r(c.br,i)};return n&&(u.tl.x-=h,u.tl.y-=l,u.tr.x+=l,u.tr.y-=h,u.bl.x-=l,u.bl.y+=h,u.br.x+=h,u.br.y+=l),u},calcOCoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),r=this.getViewportTransform(),n=i(r,e),s=i(n,t),o=(s=i(s,[1/r[0],0,0,1/r[3],0,0]),this._calculateCurrentDimensions()),a={};return this.forEachControl((function(t,e,i){a[e]=t.positionHandler(o,s,i)})),a},calcACoords:function(){var t=this._calcRotateMatrix(),e=this._calcTranslateMatrix(),n=i(e,t),s=this._getTransformedDimensions(),o=s.x/2,a=s.y/2;return{tl:r({x:-o,y:-a},n),tr:r({x:o,y:-a},n),bl:r({x:-o,y:a},n),br:r({x:o,y:a},n)}},setCoords:function(t){return this.aCoords=this.calcACoords(),this.lineCoords=this.group?this.aCoords:this.calcLineCoords(),t||(this.oCoords=this.calcOCoords(),this._setCornerCoords&&this._setCornerCoords()),this},_calcRotateMatrix:function(){return t.calcRotateMatrix(this)},_calcTranslateMatrix:function(){var t=this.getCenterPoint();return[1,0,0,1,t.x,t.y]},transformMatrixKey:function(t){var e=\"_\",i=\"\";return!t&&this.group&&(i=this.group.transformMatrixKey(t)+e),i+this.top+e+this.left+e+this.scaleX+e+this.scaleY+e+this.skewX+e+this.skewY+e+this.angle+e+this.originX+e+this.originY+e+this.width+e+this.height+e+this.strokeWidth+this.flipX+this.flipY},calcTransformMatrix:function(t){var e=this.calcOwnMatrix();if(t||!this.group)return e;var r=this.transformMatrixKey(t),n=this.matrixCache||(this.matrixCache={});return n.key===r?n.value:(this.group&&(e=i(this.group.calcTransformMatrix(!1),e)),n.key=r,n.value=e,e)},calcOwnMatrix:function(){var e=this.transformMatrixKey(!0),i=this.ownMatrixCache||(this.ownMatrixCache={});if(i.key===e)return i.value;var r=this._calcTranslateMatrix(),n={angle:this.angle,translateX:r[4],translateY:r[5],scaleX:this.scaleX,scaleY:this.scaleY,skewX:this.skewX,skewY:this.skewY,flipX:this.flipX,flipY:this.flipY};return i.key=e,i.value=t.composeMatrix(n),i.value},_getNonTransformedDimensions:function(){var t=this.strokeWidth;return{x:this.width+t,y:this.height+t}},_getTransformedDimensions:function(e,i){void 0===e&&(e=this.skewX),void 0===i&&(i=this.skewY);var r,n,s,o=0===e&&0===i;if(this.strokeUniform?(n=this.width,s=this.height):(n=(r=this._getNonTransformedDimensions()).x,s=r.y),o)return this._finalizeDimensions(n*this.scaleX,s*this.scaleY);var a=t.sizeAfterTransform(n,s,{scaleX:this.scaleX,scaleY:this.scaleY,skewX:e,skewY:i});return this._finalizeDimensions(a.x,a.y)},_finalizeDimensions:function(t,e){return this.strokeUniform?{x:t+this.strokeWidth,y:e+this.strokeWidth}:{x:t,y:e}},_calculateCurrentDimensions:function(){var t=this.getViewportTransform(),e=this._getTransformedDimensions();return r(e,t,!0).scalarAdd(2*this.padding)}})}(),x.util.object.extend(x.Object.prototype,{sendToBack:function(){return this.group?x.StaticCanvas.prototype.sendToBack.call(this.group,this):this.canvas&&this.canvas.sendToBack(this),this},bringToFront:function(){return this.group?x.StaticCanvas.prototype.bringToFront.call(this.group,this):this.canvas&&this.canvas.bringToFront(this),this},sendBackwards:function(t){return this.group?x.StaticCanvas.prototype.sendBackwards.call(this.group,this,t):this.canvas&&this.canvas.sendBackwards(this,t),this},bringForward:function(t){return this.group?x.StaticCanvas.prototype.bringForward.call(this.group,this,t):this.canvas&&this.canvas.bringForward(this,t),this},moveTo:function(t){return this.group&&\"activeSelection\"!==this.group.type?x.StaticCanvas.prototype.moveTo.call(this.group,this,t):this.canvas&&this.canvas.moveTo(this,t),this}}),function(){function t(t,e){if(e){if(e.toLive)return t+\": url(#SVGID_\"+e.id+\"); \";var i=new x.Color(e),r=t+\": \"+i.toRgb()+\"; \",n=i.getAlpha();return 1!==n&&(r+=t+\"-opacity: \"+n.toString()+\"; \"),r}return t+\": none; \"}var e=x.util.toFixed;x.util.object.extend(x.Object.prototype,{getSvgStyles:function(e){var i=this.fillRule?this.fillRule:\"nonzero\",r=this.strokeWidth?this.strokeWidth:\"0\",n=this.strokeDashArray?this.strokeDashArray.join(\" \"):\"none\",s=this.strokeDashOffset?this.strokeDashOffset:\"0\",o=this.strokeLineCap?this.strokeLineCap:\"butt\",a=this.strokeLineJoin?this.strokeLineJoin:\"miter\",l=this.strokeMiterLimit?this.strokeMiterLimit:\"4\",h=void 0!==this.opacity?this.opacity:\"1\",c=this.visible?\"\":\" visibility: hidden;\",u=e?\"\":this.getSvgFilter(),p=t(\"fill\",this.fill);return[t(\"stroke\",this.stroke),\"stroke-width: \",r,\"; \",\"stroke-dasharray: \",n,\"; \",\"stroke-linecap: \",o,\"; \",\"stroke-dashoffset: \",s,\"; \",\"stroke-linejoin: \",a,\"; \",\"stroke-miterlimit: \",l,\"; \",p,\"fill-rule: \",i,\"; \",\"opacity: \",h,\";\",u,c].join(\"\")},getSvgSpanStyles:function(e,i){var r=\"; \",n=e.fontFamily?\"font-family: \"+(-1===e.fontFamily.indexOf(\"'\")&&-1===e.fontFamily.indexOf('\"')?\"'\"+e.fontFamily+\"'\":e.fontFamily)+r:\"\",s=e.strokeWidth?\"stroke-width: \"+e.strokeWidth+r:\"\",o=(n=n,e.fontSize?\"font-size: \"+e.fontSize+\"px\"+r:\"\"),a=e.fontStyle?\"font-style: \"+e.fontStyle+r:\"\",l=e.fontWeight?\"font-weight: \"+e.fontWeight+r:\"\",h=e.fill?t(\"fill\",e.fill):\"\",c=e.stroke?t(\"stroke\",e.stroke):\"\",u=this.getSvgTextDecoration(e);return u&&(u=\"text-decoration: \"+u+r),[c,s,n,o,a,l,u,h,e.deltaY?\"baseline-shift: \"+-e.deltaY+\"; \":\"\",i?\"white-space: pre; \":\"\"].join(\"\")},getSvgTextDecoration:function(t){return[\"overline\",\"underline\",\"line-through\"].filter((function(e){return t[e.replace(\"-\",\"\")]})).join(\" \")},getSvgFilter:function(){return this.shadow?\"filter: url(#SVGID_\"+this.shadow.id+\");\":\"\"},getSvgCommons:function(){return[this.id?'id=\"'+this.id+'\" ':\"\",this.clipPath?'clip-path=\"url(#'+this.clipPath.clipPathId+')\" ':\"\"].join(\"\")},getSvgTransform:function(t,e){var i=t?this.calcTransformMatrix():this.calcOwnMatrix();return'transform=\"'+x.util.matrixToSVG(i)+(e||\"\")+'\" '},_setSVGBg:function(t){if(this.backgroundColor){var i=x.Object.NUM_FRACTION_DIGITS;t.push(\"\\t\\t<rect \",this._getFillAttributes(this.backgroundColor),' x=\"',e(-this.width/2,i),'\" y=\"',e(-this.height/2,i),'\" width=\"',e(this.width,i),'\" height=\"',e(this.height,i),'\"></rect>\\n')}},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(t),{reviver:t})},toClipPathSVG:function(t){return\"\\t\"+this._createBaseClipPathSVGMarkup(this._toSVG(t),{reviver:t})},_createBaseClipPathSVGMarkup:function(t,e){var i=(e=e||{}).reviver,r=e.additionalTransform||\"\",n=[this.getSvgTransform(!0,r),this.getSvgCommons()].join(\"\"),s=t.indexOf(\"COMMON_PARTS\");return t[s]=n,i?i(t.join(\"\")):t.join(\"\")},_createBaseSVGMarkup:function(t,e){var i,r,n=(e=e||{}).noStyle,s=e.reviver,o=n?\"\":'style=\"'+this.getSvgStyles()+'\" ',a=e.withShadow?'style=\"'+this.getSvgFilter()+'\" ':\"\",l=this.clipPath,h=this.strokeUniform?'vector-effect=\"non-scaling-stroke\" ':\"\",c=l&&l.absolutePositioned,u=this.stroke,p=this.fill,f=this.shadow,d=[],g=t.indexOf(\"COMMON_PARTS\"),m=e.additionalTransform;return l&&(l.clipPathId=\"CLIPPATH_\"+x.Object.__uid++,r='<clipPath id=\"'+l.clipPathId+'\" >\\n'+l.toClipPathSVG(s)+\"</clipPath>\\n\"),c&&d.push(\"<g \",a,this.getSvgCommons(),\" >\\n\"),d.push(\"<g \",this.getSvgTransform(!1),c?\"\":a+this.getSvgCommons(),\" >\\n\"),i=[o,h,n?\"\":this.addPaintOrder(),\" \",m?'transform=\"'+m+'\" ':\"\"].join(\"\"),t[g]=i,p&&p.toLive&&d.push(p.toSVG(this)),u&&u.toLive&&d.push(u.toSVG(this)),f&&d.push(f.toSVG(this)),l&&d.push(r),d.push(t.join(\"\")),d.push(\"</g>\\n\"),c&&d.push(\"</g>\\n\"),s?s(d.join(\"\")):d.join(\"\")},addPaintOrder:function(){return\"fill\"!==this.paintFirst?' paint-order=\"'+this.paintFirst+'\" ':\"\"}})}(),function(){var t=x.util.object.extend,e=\"stateProperties\";function i(e,i,r){var n={};r.forEach((function(t){n[t]=e[t]})),t(e[i],n,!0)}function r(t,e,i){if(t===e)return!0;if(Array.isArray(t)){if(!Array.isArray(e)||t.length!==e.length)return!1;for(var n=0,s=t.length;n<s;n++)if(!r(t[n],e[n]))return!1;return!0}if(t&&\"object\"==typeof t){var o,a=Object.keys(t);if(!e||\"object\"!=typeof e||!i&&a.length!==Object.keys(e).length)return!1;for(n=0,s=a.length;n<s;n++)if(\"canvas\"!==(o=a[n])&&\"group\"!==o&&!r(t[o],e[o]))return!1;return!0}}x.util.object.extend(x.Object.prototype,{hasStateChanged:function(t){var i=\"_\"+(t=t||e);return Object.keys(this[i]).length<this[t].length||!r(this[i],this,!0)},saveState:function(t){var r=t&&t.propertySet||e,n=\"_\"+r;return this[n]?(i(this,n,this[r]),t&&t.stateProperties&&i(this,n,t.stateProperties),this):this.setupState(t)},setupState:function(t){var i=(t=t||{}).propertySet||e;return t.propertySet=i,this[\"_\"+i]={},this.saveState(t),this}})}(),function(){var t=x.util.degreesToRadians;x.util.object.extend(x.Object.prototype,{_findTargetCorner:function(t,e){if(!this.hasControls||this.group||!this.canvas||this.canvas._activeObject!==this)return!1;var i,r,n,s=t.x,o=t.y,a=Object.keys(this.oCoords),l=a.length-1;for(this.__corner=0;l>=0;l--)if(n=a[l],this.isControlVisible(n)&&(r=this._getImageLines(e?this.oCoords[n].touchCorner:this.oCoords[n].corner),0!==(i=this._findCrossPoints({x:s,y:o},r))&&i%2==1))return this.__corner=n,n;return!1},forEachControl:function(t){for(var e in this.controls)t(this.controls[e],e,this)},_setCornerCoords:function(){var t=this.oCoords;for(var e in t){var i=this.controls[e];t[e].corner=i.calcCornerCoords(this.angle,this.cornerSize,t[e].x,t[e].y,!1),t[e].touchCorner=i.calcCornerCoords(this.angle,this.touchCornerSize,t[e].x,t[e].y,!0)}},drawSelectionBackground:function(e){if(!this.selectionBackgroundColor||this.canvas&&!this.canvas.interactive||this.canvas&&this.canvas._activeObject!==this)return this;e.save();var i=this.getCenterPoint(),r=this._calculateCurrentDimensions(),n=this.canvas.viewportTransform;return e.translate(i.x,i.y),e.scale(1/n[0],1/n[3]),e.rotate(t(this.angle)),e.fillStyle=this.selectionBackgroundColor,e.fillRect(-r.x/2,-r.y/2,r.x,r.y),e.restore(),this},drawBorders:function(t,e){e=e||{};var i=this._calculateCurrentDimensions(),r=this.borderScaleFactor,n=i.x+r,s=i.y+r,o=void 0!==e.hasControls?e.hasControls:this.hasControls,a=!1;return t.save(),t.strokeStyle=e.borderColor||this.borderColor,this._setLineDash(t,e.borderDashArray||this.borderDashArray),t.strokeRect(-n/2,-s/2,n,s),o&&(t.beginPath(),this.forEachControl((function(e,i,r){e.withConnection&&e.getVisibility(r,i)&&(a=!0,t.moveTo(e.x*n,e.y*s),t.lineTo(e.x*n+e.offsetX,e.y*s+e.offsetY))})),a&&t.stroke()),t.restore(),this},drawBordersInGroup:function(t,e,i){i=i||{};var r=x.util.sizeAfterTransform(this.width,this.height,e),n=this.strokeWidth,s=this.strokeUniform,o=this.borderScaleFactor,a=r.x+n*(s?this.canvas.getZoom():e.scaleX)+o,l=r.y+n*(s?this.canvas.getZoom():e.scaleY)+o;return t.save(),this._setLineDash(t,i.borderDashArray||this.borderDashArray),t.strokeStyle=i.borderColor||this.borderColor,t.strokeRect(-a/2,-l/2,a,l),t.restore(),this},drawControls:function(t,e){e=e||{},t.save();var i,r,n=this.canvas.getRetinaScaling();return t.setTransform(n,0,0,n,0,0),t.strokeStyle=t.fillStyle=e.cornerColor||this.cornerColor,this.transparentCorners||(t.strokeStyle=e.cornerStrokeColor||this.cornerStrokeColor),this._setLineDash(t,e.cornerDashArray||this.cornerDashArray),this.setCoords(),this.group&&(i=this.group.calcTransformMatrix()),this.forEachControl((function(n,s,o){r=o.oCoords[s],n.getVisibility(o,s)&&(i&&(r=x.util.transformPoint(r,i)),n.render(t,r.x,r.y,e,o))})),t.restore(),this},isControlVisible:function(t){return this.controls[t]&&this.controls[t].getVisibility(this,t)},setControlVisible:function(t,e){return this._controlsVisibility||(this._controlsVisibility={}),this._controlsVisibility[t]=e,this},setControlsVisibility:function(t){for(var e in t||(t={}),t)this.setControlVisible(e,t[e]);return this},onDeselect:function(){},onSelect:function(){}})}(),x.util.object.extend(x.StaticCanvas.prototype,{FX_DURATION:500,fxCenterObjectH:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,s=this;return x.util.animate({target:this,startValue:t.left,endValue:this.getCenterPoint().x,duration:this.FX_DURATION,onChange:function(e){t.set(\"left\",e),s.requestRenderAll(),n()},onComplete:function(){t.setCoords(),r()}})},fxCenterObjectV:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,s=this;return x.util.animate({target:this,startValue:t.top,endValue:this.getCenterPoint().y,duration:this.FX_DURATION,onChange:function(e){t.set(\"top\",e),s.requestRenderAll(),n()},onComplete:function(){t.setCoords(),r()}})},fxRemove:function(t,e){var i=function(){},r=(e=e||{}).onComplete||i,n=e.onChange||i,s=this;return x.util.animate({target:this,startValue:t.opacity,endValue:0,duration:this.FX_DURATION,onChange:function(e){t.set(\"opacity\",e),s.requestRenderAll(),n()},onComplete:function(){s.remove(t),r()}})}}),x.util.object.extend(x.Object.prototype,{animate:function(){if(arguments[0]&&\"object\"==typeof arguments[0]){var t,e,i=[],r=[];for(t in arguments[0])i.push(t);for(var n=0,s=i.length;n<s;n++)t=i[n],e=n!==s-1,r.push(this._animate(t,arguments[0][t],arguments[1],e));return r}return this._animate.apply(this,arguments)},_animate:function(t,e,i,r){var n,s=this;e=e.toString(),i=i?x.util.object.clone(i):{},~t.indexOf(\".\")&&(n=t.split(\".\"));var o=s.colorProperties.indexOf(t)>-1||n&&s.colorProperties.indexOf(n[1])>-1,a=n?this.get(n[0])[n[1]]:this.get(t);\"from\"in i||(i.from=a),o||(e=~e.indexOf(\"=\")?a+parseFloat(e.replace(\"=\",\"\")):parseFloat(e));var l={target:this,startValue:i.from,endValue:e,byValue:i.by,easing:i.easing,duration:i.duration,abort:i.abort&&function(t,e,r){return i.abort.call(s,t,e,r)},onChange:function(e,o,a){n?s[n[0]][n[1]]=e:s.set(t,e),r||i.onChange&&i.onChange(e,o,a)},onComplete:function(t,e,n){r||(s.setCoords(),i.onComplete&&i.onComplete(t,e,n))}};return o?x.util.animateColor(l.startValue,l.endValue,l.duration,l):x.util.animate(l)}}),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.object.clone,n={x1:1,x2:1,y1:1,y2:1};function s(t,e){var i=t.origin,r=t.axis1,n=t.axis2,s=t.dimension,o=e.nearest,a=e.center,l=e.farthest;return function(){switch(this.get(i)){case o:return Math.min(this.get(r),this.get(n));case a:return Math.min(this.get(r),this.get(n))+.5*this.get(s);case l:return Math.max(this.get(r),this.get(n))}}}e.Line?e.warn(\"fabric.Line is already defined\"):(e.Line=e.util.createClass(e.Object,{type:\"line\",x1:0,y1:0,x2:0,y2:0,cacheProperties:e.Object.prototype.cacheProperties.concat(\"x1\",\"x2\",\"y1\",\"y2\"),initialize:function(t,e){t||(t=[0,0,0,0]),this.callSuper(\"initialize\",e),this.set(\"x1\",t[0]),this.set(\"y1\",t[1]),this.set(\"x2\",t[2]),this.set(\"y2\",t[3]),this._setWidthHeight(e)},_setWidthHeight:function(t){t||(t={}),this.width=Math.abs(this.x2-this.x1),this.height=Math.abs(this.y2-this.y1),this.left=\"left\"in t?t.left:this._getLeftToOriginX(),this.top=\"top\"in t?t.top:this._getTopToOriginY()},_set:function(t,e){return this.callSuper(\"_set\",t,e),void 0!==n[t]&&this._setWidthHeight(),this},_getLeftToOriginX:s({origin:\"originX\",axis1:\"x1\",axis2:\"x2\",dimension:\"width\"},{nearest:\"left\",center:\"center\",farthest:\"right\"}),_getTopToOriginY:s({origin:\"originY\",axis1:\"y1\",axis2:\"y2\",dimension:\"height\"},{nearest:\"top\",center:\"center\",farthest:\"bottom\"}),_render:function(t){t.beginPath();var e=this.calcLinePoints();t.moveTo(e.x1,e.y1),t.lineTo(e.x2,e.y2),t.lineWidth=this.strokeWidth;var i=t.strokeStyle;t.strokeStyle=this.stroke||t.fillStyle,this.stroke&&this._renderStroke(t),t.strokeStyle=i},_findCenterFromElement:function(){return{x:(this.x1+this.x2)/2,y:(this.y1+this.y2)/2}},toObject:function(t){return i(this.callSuper(\"toObject\",t),this.calcLinePoints())},_getNonTransformedDimensions:function(){var t=this.callSuper(\"_getNonTransformedDimensions\");return\"butt\"===this.strokeLineCap&&(0===this.width&&(t.y-=this.strokeWidth),0===this.height&&(t.x-=this.strokeWidth)),t},calcLinePoints:function(){var t=this.x1<=this.x2?-1:1,e=this.y1<=this.y2?-1:1,i=t*this.width*.5,r=e*this.height*.5;return{x1:i,x2:t*this.width*-.5,y1:r,y2:e*this.height*-.5}},_toSVG:function(){var t=this.calcLinePoints();return[\"<line \",\"COMMON_PARTS\",'x1=\"',t.x1,'\" y1=\"',t.y1,'\" x2=\"',t.x2,'\" y2=\"',t.y2,'\" />\\n']}}),e.Line.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(\"x1 y1 x2 y2\".split(\" \")),e.Line.fromElement=function(t,r,n){n=n||{};var s=e.parseAttributes(t,e.Line.ATTRIBUTE_NAMES),o=[s.x1||0,s.y1||0,s.x2||0,s.y2||0];r(new e.Line(o,i(s,n)))},e.Line.fromObject=function(t,i){var n=r(t,!0);n.points=[t.x1,t.y1,t.x2,t.y2],e.Object._fromObject(\"Line\",n,(function(t){delete t.points,i&&i(t)}),\"points\")})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.degreesToRadians;e.Circle?e.warn(\"fabric.Circle is already defined.\"):(e.Circle=e.util.createClass(e.Object,{type:\"circle\",radius:0,startAngle:0,endAngle:360,cacheProperties:e.Object.prototype.cacheProperties.concat(\"radius\",\"startAngle\",\"endAngle\"),_set:function(t,e){return this.callSuper(\"_set\",t,e),\"radius\"===t&&this.setRadius(e),this},toObject:function(t){return this.callSuper(\"toObject\",[\"radius\",\"startAngle\",\"endAngle\"].concat(t))},_toSVG:function(){var t,r=(this.endAngle-this.startAngle)%360;if(0===r)t=[\"<circle \",\"COMMON_PARTS\",'cx=\"0\" cy=\"0\" ','r=\"',this.radius,'\" />\\n'];else{var n=i(this.startAngle),s=i(this.endAngle),o=this.radius;t=['<path d=\"M '+e.util.cos(n)*o+\" \"+e.util.sin(n)*o,\" A \"+o+\" \"+o,\" 0 \",+(r>180?\"1\":\"0\")+\" 1\",\" \"+e.util.cos(s)*o+\" \"+e.util.sin(s)*o,'\" ',\"COMMON_PARTS\",\" />\\n\"]}return t},_render:function(t){t.beginPath(),t.arc(0,0,this.radius,i(this.startAngle),i(this.endAngle),!1),this._renderPaintInOrder(t)},getRadiusX:function(){return this.get(\"radius\")*this.get(\"scaleX\")},getRadiusY:function(){return this.get(\"radius\")*this.get(\"scaleY\")},setRadius:function(t){return this.radius=t,this.set(\"width\",2*t).set(\"height\",2*t)}}),e.Circle.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(\"cx cy r\".split(\" \")),e.Circle.fromElement=function(t,i){var r,n=e.parseAttributes(t,e.Circle.ATTRIBUTE_NAMES);if(!(\"radius\"in(r=n)&&r.radius>=0))throw new Error(\"value of `r` attribute is required and can not be negative\");n.left=(n.left||0)-n.radius,n.top=(n.top||0)-n.radius,i(new e.Circle(n))},e.Circle.fromObject=function(t,i){e.Object._fromObject(\"Circle\",t,i)})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={});e.Triangle?e.warn(\"fabric.Triangle is already defined\"):(e.Triangle=e.util.createClass(e.Object,{type:\"triangle\",width:100,height:100,_render:function(t){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,i),t.lineTo(0,-i),t.lineTo(e,i),t.closePath(),this._renderPaintInOrder(t)},_toSVG:function(){var t=this.width/2,e=this.height/2;return[\"<polygon \",\"COMMON_PARTS\",'points=\"',[-t+\" \"+e,\"0 \"+-e,t+\" \"+e].join(\",\"),'\" />']}}),e.Triangle.fromObject=function(t,i){return e.Object._fromObject(\"Triangle\",t,i)})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=2*Math.PI;e.Ellipse?e.warn(\"fabric.Ellipse is already defined.\"):(e.Ellipse=e.util.createClass(e.Object,{type:\"ellipse\",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat(\"rx\",\"ry\"),initialize:function(t){this.callSuper(\"initialize\",t),this.set(\"rx\",t&&t.rx||0),this.set(\"ry\",t&&t.ry||0)},_set:function(t,e){switch(this.callSuper(\"_set\",t,e),t){case\"rx\":this.rx=e,this.set(\"width\",2*e);break;case\"ry\":this.ry=e,this.set(\"height\",2*e)}return this},getRx:function(){return this.get(\"rx\")*this.get(\"scaleX\")},getRy:function(){return this.get(\"ry\")*this.get(\"scaleY\")},toObject:function(t){return this.callSuper(\"toObject\",[\"rx\",\"ry\"].concat(t))},_toSVG:function(){return[\"<ellipse \",\"COMMON_PARTS\",'cx=\"0\" cy=\"0\" ','rx=\"',this.rx,'\" ry=\"',this.ry,'\" />\\n']},_render:function(t){t.beginPath(),t.save(),t.transform(1,0,0,this.ry/this.rx,0,0),t.arc(0,0,this.rx,0,i,!1),t.restore(),this._renderPaintInOrder(t)}}),e.Ellipse.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(\"cx cy rx ry\".split(\" \")),e.Ellipse.fromElement=function(t,i){var r=e.parseAttributes(t,e.Ellipse.ATTRIBUTE_NAMES);r.left=(r.left||0)-r.rx,r.top=(r.top||0)-r.ry,i(new e.Ellipse(r))},e.Ellipse.fromObject=function(t,i){e.Object._fromObject(\"Ellipse\",t,i)})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend;e.Rect?e.warn(\"fabric.Rect is already defined\"):(e.Rect=e.util.createClass(e.Object,{stateProperties:e.Object.prototype.stateProperties.concat(\"rx\",\"ry\"),type:\"rect\",rx:0,ry:0,cacheProperties:e.Object.prototype.cacheProperties.concat(\"rx\",\"ry\"),initialize:function(t){this.callSuper(\"initialize\",t),this._initRxRy()},_initRxRy:function(){this.rx&&!this.ry?this.ry=this.rx:this.ry&&!this.rx&&(this.rx=this.ry)},_render:function(t){var e=this.rx?Math.min(this.rx,this.width/2):0,i=this.ry?Math.min(this.ry,this.height/2):0,r=this.width,n=this.height,s=-this.width/2,o=-this.height/2,a=0!==e||0!==i,l=.4477152502;t.beginPath(),t.moveTo(s+e,o),t.lineTo(s+r-e,o),a&&t.bezierCurveTo(s+r-l*e,o,s+r,o+l*i,s+r,o+i),t.lineTo(s+r,o+n-i),a&&t.bezierCurveTo(s+r,o+n-l*i,s+r-l*e,o+n,s+r-e,o+n),t.lineTo(s+e,o+n),a&&t.bezierCurveTo(s+l*e,o+n,s,o+n-l*i,s,o+n-i),t.lineTo(s,o+i),a&&t.bezierCurveTo(s,o+l*i,s+l*e,o,s+e,o),t.closePath(),this._renderPaintInOrder(t)},toObject:function(t){return this.callSuper(\"toObject\",[\"rx\",\"ry\"].concat(t))},_toSVG:function(){return[\"<rect \",\"COMMON_PARTS\",'x=\"',-this.width/2,'\" y=\"',-this.height/2,'\" rx=\"',this.rx,'\" ry=\"',this.ry,'\" width=\"',this.width,'\" height=\"',this.height,'\" />\\n']}}),e.Rect.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(\"x y rx ry width height\".split(\" \")),e.Rect.fromElement=function(t,r,n){if(!t)return r(null);n=n||{};var s=e.parseAttributes(t,e.Rect.ATTRIBUTE_NAMES);s.left=s.left||0,s.top=s.top||0,s.height=s.height||0,s.width=s.width||0;var o=new e.Rect(i(n?e.util.object.clone(n):{},s));o.visible=o.visible&&o.width>0&&o.height>0,r(o)},e.Rect.fromObject=function(t,i){return e.Object._fromObject(\"Rect\",t,i)})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.util.array.min,n=e.util.array.max,s=e.util.toFixed,o=e.util.projectStrokeOnPoints;e.Polyline?e.warn(\"fabric.Polyline is already defined\"):(e.Polyline=e.util.createClass(e.Object,{type:\"polyline\",points:null,exactBoundingBox:!1,cacheProperties:e.Object.prototype.cacheProperties.concat(\"points\"),initialize:function(t,e){e=e||{},this.points=t||[],this.callSuper(\"initialize\",e),this._setPositionDimensions(e)},_projectStrokeOnPoints:function(){return o(this.points,this,!0)},_setPositionDimensions:function(t){var e,i=this._calcDimensions(t),r=this.exactBoundingBox?this.strokeWidth:0;this.width=i.width-r,this.height=i.height-r,t.fromSVG||(e=this.translateToGivenOrigin({x:i.left-this.strokeWidth/2+r/2,y:i.top-this.strokeWidth/2+r/2},\"left\",\"top\",this.originX,this.originY)),void 0===t.left&&(this.left=t.fromSVG?i.left:e.x),void 0===t.top&&(this.top=t.fromSVG?i.top:e.y),this.pathOffset={x:i.left+this.width/2+r/2,y:i.top+this.height/2+r/2}},_calcDimensions:function(){var t=this.exactBoundingBox?this._projectStrokeOnPoints():this.points,e=r(t,\"x\")||0,i=r(t,\"y\")||0;return{left:e,top:i,width:(n(t,\"x\")||0)-e,height:(n(t,\"y\")||0)-i}},toObject:function(t){return i(this.callSuper(\"toObject\",t),{points:this.points.concat()})},_toSVG:function(){for(var t=[],i=this.pathOffset.x,r=this.pathOffset.y,n=e.Object.NUM_FRACTION_DIGITS,o=0,a=this.points.length;o<a;o++)t.push(s(this.points[o].x-i,n),\",\",s(this.points[o].y-r,n),\" \");return[\"<\"+this.type+\" \",\"COMMON_PARTS\",'points=\"',t.join(\"\"),'\" />\\n']},commonRender:function(t){var e,i=this.points.length,r=this.pathOffset.x,n=this.pathOffset.y;if(!i||isNaN(this.points[i-1].y))return!1;t.beginPath(),t.moveTo(this.points[0].x-r,this.points[0].y-n);for(var s=0;s<i;s++)e=this.points[s],t.lineTo(e.x-r,e.y-n);return!0},_render:function(t){this.commonRender(t)&&this._renderPaintInOrder(t)},complexity:function(){return this.get(\"points\").length}}),e.Polyline.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polyline.fromElementGenerator=function(t){return function(r,n,s){if(!r)return n(null);s||(s={});var o=e.parsePointsAttribute(r.getAttribute(\"points\")),a=e.parseAttributes(r,e[t].ATTRIBUTE_NAMES);a.fromSVG=!0,n(new e[t](o,i(a,s)))}},e.Polyline.fromElement=e.Polyline.fromElementGenerator(\"Polyline\"),e.Polyline.fromObject=function(t,i){return e.Object._fromObject(\"Polyline\",t,i,\"points\")})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.projectStrokeOnPoints;e.Polygon?e.warn(\"fabric.Polygon is already defined\"):(e.Polygon=e.util.createClass(e.Polyline,{type:\"polygon\",_projectStrokeOnPoints:function(){return i(this.points,this)},_render:function(t){this.commonRender(t)&&(t.closePath(),this._renderPaintInOrder(t))}}),e.Polygon.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(),e.Polygon.fromElement=e.Polyline.fromElementGenerator(\"Polygon\"),e.Polygon.fromObject=function(t,i){e.Object._fromObject(\"Polygon\",t,i,\"points\")})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.array.min,r=e.util.array.max,n=e.util.object.extend,s=e.util.object.clone,o=e.util.toFixed;e.Path?e.warn(\"fabric.Path is already defined\"):(e.Path=e.util.createClass(e.Object,{type:\"path\",path:null,cacheProperties:e.Object.prototype.cacheProperties.concat(\"path\",\"fillRule\"),stateProperties:e.Object.prototype.stateProperties.concat(\"path\"),initialize:function(t,e){delete(e=s(e||{})).path,this.callSuper(\"initialize\",e),this._setPath(t||[],e)},_setPath:function(t,i){this.path=e.util.makePathSimpler(Array.isArray(t)?t:e.util.parsePath(t)),e.Polyline.prototype._setPositionDimensions.call(this,i||{})},_renderPathCommands:function(t){var e,i=0,r=0,n=0,s=0,o=0,a=0,l=-this.pathOffset.x,h=-this.pathOffset.y;t.beginPath();for(var c=0,u=this.path.length;c<u;++c)switch((e=this.path[c])[0]){case\"L\":n=e[1],s=e[2],t.lineTo(n+l,s+h);break;case\"M\":i=n=e[1],r=s=e[2],t.moveTo(n+l,s+h);break;case\"C\":n=e[5],s=e[6],o=e[3],a=e[4],t.bezierCurveTo(e[1]+l,e[2]+h,o+l,a+h,n+l,s+h);break;case\"Q\":t.quadraticCurveTo(e[1]+l,e[2]+h,e[3]+l,e[4]+h),n=e[3],s=e[4],o=e[1],a=e[2];break;case\"z\":case\"Z\":n=i,s=r,t.closePath()}},_render:function(t){this._renderPathCommands(t),this._renderPaintInOrder(t)},toString:function(){return\"#<fabric.Path (\"+this.complexity()+'): { \"top\": '+this.top+', \"left\": '+this.left+\" }>\"},toObject:function(t){return n(this.callSuper(\"toObject\",t),{path:this.path.map((function(t){return t.slice()}))})},toDatalessObject:function(t){var e=this.toObject([\"sourcePath\"].concat(t));return e.sourcePath&&delete e.path,e},_toSVG:function(){return[\"<path \",\"COMMON_PARTS\",'d=\"',e.util.joinPath(this.path),'\" stroke-linecap=\"round\" ',\"/>\\n\"]},_getOffsetTransform:function(){var t=e.Object.NUM_FRACTION_DIGITS;return\" translate(\"+o(-this.pathOffset.x,t)+\", \"+o(-this.pathOffset.y,t)+\")\"},toClipPathSVG:function(t){var e=this._getOffsetTransform();return\"\\t\"+this._createBaseClipPathSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},toSVG:function(t){var e=this._getOffsetTransform();return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,additionalTransform:e})},complexity:function(){return this.path.length},_calcDimensions:function(){for(var t,n,s=[],o=[],a=0,l=0,h=0,c=0,u=0,p=this.path.length;u<p;++u){switch((t=this.path[u])[0]){case\"L\":h=t[1],c=t[2],n=[];break;case\"M\":a=h=t[1],l=c=t[2],n=[];break;case\"C\":n=e.util.getBoundsOfCurve(h,c,t[1],t[2],t[3],t[4],t[5],t[6]),h=t[5],c=t[6];break;case\"Q\":n=e.util.getBoundsOfCurve(h,c,t[1],t[2],t[1],t[2],t[3],t[4]),h=t[3],c=t[4];break;case\"z\":case\"Z\":h=a,c=l}n.forEach((function(t){s.push(t.x),o.push(t.y)})),s.push(h),o.push(c)}var f=i(s)||0,d=i(o)||0;return{left:f,top:d,width:(r(s)||0)-f,height:(r(o)||0)-d}}}),e.Path.fromObject=function(t,i){if(\"string\"==typeof t.sourcePath){var r=t.sourcePath;e.loadSVGFromURL(r,(function(r){var n=r[0];n.setOptions(t),t.clipPath?e.util.enlivenObjects([t.clipPath],(function(t){n.clipPath=t[0],i&&i(n)})):i&&i(n)}))}else e.Object._fromObject(\"Path\",t,i,\"path\")},e.Path.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat([\"d\"]),e.Path.fromElement=function(t,i,r){var s=e.parseAttributes(t,e.Path.ATTRIBUTE_NAMES);s.fromSVG=!0,i(new e.Path(s.d,n(s,r)))})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.array.min,r=e.util.array.max;e.Group||(e.Group=e.util.createClass(e.Object,e.Collection,{type:\"group\",strokeWidth:0,subTargetCheck:!1,cacheProperties:[],useSetOnGroup:!1,initialize:function(t,e,i){e=e||{},this._objects=[],i&&this.callSuper(\"initialize\",e),this._objects=t||[];for(var r=this._objects.length;r--;)this._objects[r].group=this;if(i)this._updateObjectsACoords();else{var n=e&&e.centerPoint;void 0!==e.originX&&(this.originX=e.originX),void 0!==e.originY&&(this.originY=e.originY),n||this._calcBounds(),this._updateObjectsCoords(n),delete e.centerPoint,this.callSuper(\"initialize\",e)}this.setCoords()},_updateObjectsACoords:function(){for(var t=this._objects.length;t--;)this._objects[t].setCoords(true)},_updateObjectsCoords:function(t){t=t||this.getCenterPoint();for(var e=this._objects.length;e--;)this._updateObjectCoords(this._objects[e],t)},_updateObjectCoords:function(t,e){var i=t.left,r=t.top;t.set({left:i-e.x,top:r-e.y}),t.group=this,t.setCoords(!0)},toString:function(){return\"#<fabric.Group: (\"+this.complexity()+\")>\"},addWithUpdate:function(t){var i=!!this.group;return this._restoreObjectsState(),e.util.resetObjectTransform(this),t&&(i&&e.util.removeTransformFromObject(t,this.group.calcTransformMatrix()),this._objects.push(t),t.group=this,t._set(\"canvas\",this.canvas)),this._calcBounds(),this._updateObjectsCoords(),this.dirty=!0,i?this.group.addWithUpdate():this.setCoords(),this},removeWithUpdate:function(t){return this._restoreObjectsState(),e.util.resetObjectTransform(this),this.remove(t),this._calcBounds(),this._updateObjectsCoords(),this.setCoords(),this.dirty=!0,this},_onObjectAdded:function(t){this.dirty=!0,t.group=this,t._set(\"canvas\",this.canvas)},_onObjectRemoved:function(t){this.dirty=!0,delete t.group},_set:function(t,i){var r=this._objects.length;if(this.useSetOnGroup)for(;r--;)this._objects[r].setOnGroup(t,i);if(\"canvas\"===t)for(;r--;)this._objects[r]._set(t,i);e.Object.prototype._set.call(this,t,i)},toObject:function(t){var i=this.includeDefaultValues,r=this._objects.filter((function(t){return!t.excludeFromExport})).map((function(e){var r=e.includeDefaultValues;e.includeDefaultValues=i;var n=e.toObject(t);return e.includeDefaultValues=r,n})),n=e.Object.prototype.toObject.call(this,t);return n.objects=r,n},toDatalessObject:function(t){var i,r=this.sourcePath;if(r)i=r;else{var n=this.includeDefaultValues;i=this._objects.map((function(e){var i=e.includeDefaultValues;e.includeDefaultValues=n;var r=e.toDatalessObject(t);return e.includeDefaultValues=i,r}))}var s=e.Object.prototype.toDatalessObject.call(this,t);return s.objects=i,s},render:function(t){this._transformDone=!0,this.callSuper(\"render\",t),this._transformDone=!1},shouldCache:function(){var t=e.Object.prototype.shouldCache.call(this);if(t)for(var i=0,r=this._objects.length;i<r;i++)if(this._objects[i].willDrawShadow())return this.ownCaching=!1,!1;return t},willDrawShadow:function(){if(e.Object.prototype.willDrawShadow.call(this))return!0;for(var t=0,i=this._objects.length;t<i;t++)if(this._objects[t].willDrawShadow())return!0;return!1},isOnACache:function(){return this.ownCaching||this.group&&this.group.isOnACache()},drawObject:function(t){for(var e=0,i=this._objects.length;e<i;e++)this._objects[e].render(t);this._drawClipPath(t,this.clipPath)},isCacheDirty:function(t){if(this.callSuper(\"isCacheDirty\",t))return!0;if(!this.statefullCache)return!1;for(var e=0,i=this._objects.length;e<i;e++)if(this._objects[e].isCacheDirty(!0)){if(this._cacheCanvas){var r=this.cacheWidth/this.zoomX,n=this.cacheHeight/this.zoomY;this._cacheContext.clearRect(-r/2,-n/2,r,n)}return!0}return!1},_restoreObjectsState:function(){var t=this.calcOwnMatrix();return this._objects.forEach((function(i){e.util.addTransformToObject(i,t),delete i.group,i.setCoords()})),this},destroy:function(){return this._objects.forEach((function(t){t.set(\"dirty\",!0)})),this._restoreObjectsState()},dispose:function(){this.callSuper(\"dispose\"),this.forEachObject((function(t){t.dispose&&t.dispose()})),this._objects=[]},toActiveSelection:function(){if(this.canvas){var t=this._objects,i=this.canvas;this._objects=[];var r=this.toObject();delete r.objects;var n=new e.ActiveSelection([]);return n.set(r),n.type=\"activeSelection\",i.remove(this),t.forEach((function(t){t.group=n,t.dirty=!0,i.add(t)})),n.canvas=i,n._objects=t,i._activeObject=n,n.setCoords(),n}},ungroupOnCanvas:function(){return this._restoreObjectsState()},setObjectsCoords:function(){return this.forEachObject((function(t){t.setCoords(true)})),this},_calcBounds:function(t){for(var e,i,r,n,s=[],o=[],a=[\"tr\",\"br\",\"bl\",\"tl\"],l=0,h=this._objects.length,c=a.length;l<h;++l){for(r=(e=this._objects[l]).calcACoords(),n=0;n<c;n++)i=a[n],s.push(r[i].x),o.push(r[i].y);e.aCoords=r}this._getBounds(s,o,t)},_getBounds:function(t,n,s){var o=new e.Point(i(t),i(n)),a=new e.Point(r(t),r(n)),l=o.y||0,h=o.x||0,c=a.x-o.x||0,u=a.y-o.y||0;this.width=c,this.height=u,s||this.setPositionByOrigin({x:h,y:l},\"left\",\"top\")},_toSVG:function(t){for(var e=[\"<g \",\"COMMON_PARTS\",\" >\\n\"],i=0,r=this._objects.length;i<r;i++)e.push(\"\\t\\t\",this._objects[i].toSVG(t));return e.push(\"</g>\\n\"),e},getSvgStyles:function(){var t=void 0!==this.opacity&&1!==this.opacity?\"opacity: \"+this.opacity+\";\":\"\",e=this.visible?\"\":\" visibility: hidden;\";return[t,this.getSvgFilter(),e].join(\"\")},toClipPathSVG:function(t){for(var e=[],i=0,r=this._objects.length;i<r;i++)e.push(\"\\t\",this._objects[i].toClipPathSVG(t));return this._createBaseClipPathSVGMarkup(e,{reviver:t})}}),e.Group.fromObject=function(t,i){var r=t.objects,n=e.util.object.clone(t,!0);delete n.objects,\"string\"!=typeof r?e.util.enlivenObjects(r,(function(r){e.util.enlivenObjectEnlivables(t,n,(function(){i&&i(new e.Group(r,n,!0))}))})):e.loadSVGFromURL(r,(function(s){var o=e.util.groupSVGElements(s,t,r),a=n.clipPath;delete n.clipPath,o.set(n),a?e.util.enlivenObjects([a],(function(t){o.clipPath=t[0],i&&i(o)})):i&&i(o)}))})}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={});e.ActiveSelection||(e.ActiveSelection=e.util.createClass(e.Group,{type:\"activeSelection\",initialize:function(t,i){i=i||{},this._objects=t||[];for(var r=this._objects.length;r--;)this._objects[r].group=this;i.originX&&(this.originX=i.originX),i.originY&&(this.originY=i.originY),this._calcBounds(),this._updateObjectsCoords(),e.Object.prototype.initialize.call(this,i),this.setCoords()},toGroup:function(){var t=this._objects.concat();this._objects=[];var i=e.Object.prototype.toObject.call(this),r=new e.Group([]);if(delete i.type,r.set(i),t.forEach((function(t){t.canvas.remove(t),t.group=r})),r._objects=t,!this.canvas)return r;var n=this.canvas;return n.add(r),n._activeObject=r,r.setCoords(),r},onDeselect:function(){return this.destroy(),!1},toString:function(){return\"#<fabric.ActiveSelection: (\"+this.complexity()+\")>\"},shouldCache:function(){return!1},isOnACache:function(){return!1},_renderControls:function(t,e,i){t.save(),t.globalAlpha=this.isMoving?this.borderOpacityWhenMoving:1,this.callSuper(\"_renderControls\",t,e),void 0===(i=i||{}).hasControls&&(i.hasControls=!1),i.forActiveSelection=!0;for(var r=0,n=this._objects.length;r<n;r++)this._objects[r]._renderControls(t,i);t.restore()}}),e.ActiveSelection.fromObject=function(t,i){e.util.enlivenObjects(t.objects,(function(r){delete t.objects,i&&i(new e.ActiveSelection(r,t,!0))}))})}(t.exports),function(t){\"use strict\";var e=x.util.object.extend;t.fabric||(t.fabric={}),t.fabric.Image?x.warn(\"fabric.Image is already defined.\"):(x.Image=x.util.createClass(x.Object,{type:\"image\",strokeWidth:0,srcFromAttribute:!1,_lastScaleX:1,_lastScaleY:1,_filterScalingX:1,_filterScalingY:1,minimumScaleTrigger:.5,stateProperties:x.Object.prototype.stateProperties.concat(\"cropX\",\"cropY\"),cacheProperties:x.Object.prototype.cacheProperties.concat(\"cropX\",\"cropY\"),cacheKey:\"\",cropX:0,cropY:0,imageSmoothing:!0,initialize:function(t,e){e||(e={}),this.filters=[],this.cacheKey=\"texture\"+x.Object.__uid++,this.callSuper(\"initialize\",e),this._initElement(t,e)},getElement:function(){return this._element||{}},setElement:function(t,e){return this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+\"_filtered\"),this._element=t,this._originalElement=t,this._initConfig(e),0!==this.filters.length&&this.applyFilters(),this.resizeFilter&&this.applyResizeFilters(),this},removeTexture:function(t){var e=x.filterBackend;e&&e.evictCachesForKey&&e.evictCachesForKey(t)},dispose:function(){this.callSuper(\"dispose\"),this.removeTexture(this.cacheKey),this.removeTexture(this.cacheKey+\"_filtered\"),this._cacheContext=void 0,[\"_originalElement\",\"_element\",\"_filteredEl\",\"_cacheCanvas\"].forEach(function(t){x.util.cleanUpJsdomNode(this[t]),this[t]=void 0}.bind(this))},getCrossOrigin:function(){return this._originalElement&&(this._originalElement.crossOrigin||null)},getOriginalSize:function(){var t=this.getElement();return{width:t.naturalWidth||t.width,height:t.naturalHeight||t.height}},_stroke:function(t){if(this.stroke&&0!==this.strokeWidth){var e=this.width/2,i=this.height/2;t.beginPath(),t.moveTo(-e,-i),t.lineTo(e,-i),t.lineTo(e,i),t.lineTo(-e,i),t.lineTo(-e,-i),t.closePath()}},toObject:function(t){var i=[];this.filters.forEach((function(t){t&&i.push(t.toObject())}));var r=e(this.callSuper(\"toObject\",[\"cropX\",\"cropY\"].concat(t)),{src:this.getSrc(),crossOrigin:this.getCrossOrigin(),filters:i});return this.resizeFilter&&(r.resizeFilter=this.resizeFilter.toObject()),r},hasCrop:function(){return this.cropX||this.cropY||this.width<this._element.width||this.height<this._element.height},_toSVG:function(){var t,e=[],i=[],r=this._element,n=-this.width/2,s=-this.height/2,o=\"\",a=\"\";if(!r)return[];if(this.hasCrop()){var l=x.Object.__uid++;e.push('<clipPath id=\"imageCrop_'+l+'\">\\n','\\t<rect x=\"'+n+'\" y=\"'+s+'\" width=\"'+this.width+'\" height=\"'+this.height+'\" />\\n',\"</clipPath>\\n\"),o=' clip-path=\"url(#imageCrop_'+l+')\" '}if(this.imageSmoothing||(a='\" image-rendering=\"optimizeSpeed'),i.push(\"\\t<image \",\"COMMON_PARTS\",'xlink:href=\"',this.getSvgSrc(!0),'\" x=\"',n-this.cropX,'\" y=\"',s-this.cropY,'\" width=\"',r.width||r.naturalWidth,'\" height=\"',r.height||r.height,a,'\"',o,\"></image>\\n\"),this.stroke||this.strokeDashArray){var h=this.fill;this.fill=null,t=[\"\\t<rect \",'x=\"',n,'\" y=\"',s,'\" width=\"',this.width,'\" height=\"',this.height,'\" style=\"',this.getSvgStyles(),'\"/>\\n'],this.fill=h}return e=\"fill\"!==this.paintFirst?e.concat(t,i):e.concat(i,t)},getSrc:function(t){var e=t?this._element:this._originalElement;return e?e.toDataURL?e.toDataURL():this.srcFromAttribute?e.getAttribute(\"src\"):e.src:this.src||\"\"},setSrc:function(t,e,i){return x.util.loadImage(t,(function(t,r){this.setElement(t,i),this._setWidthHeight(),e&&e(this,r)}),this,i&&i.crossOrigin),this},toString:function(){return'#<fabric.Image: { src: \"'+this.getSrc()+'\" }>'},applyResizeFilters:function(){var t=this.resizeFilter,e=this.minimumScaleTrigger,i=this.getTotalObjectScaling(),r=i.scaleX,n=i.scaleY,s=this._filteredEl||this._originalElement;if(this.group&&this.set(\"dirty\",!0),!t||r>e&&n>e)return this._element=s,this._filterScalingX=1,this._filterScalingY=1,this._lastScaleX=r,void(this._lastScaleY=n);x.filterBackend||(x.filterBackend=x.initFilterBackend());var o=x.util.createCanvasElement(),a=this._filteredEl?this.cacheKey+\"_filtered\":this.cacheKey,l=s.width,h=s.height;o.width=l,o.height=h,this._element=o,this._lastScaleX=t.scaleX=r,this._lastScaleY=t.scaleY=n,x.filterBackend.applyFilters([t],s,l,h,this._element,a),this._filterScalingX=o.width/this._originalElement.width,this._filterScalingY=o.height/this._originalElement.height},applyFilters:function(t){if(t=(t=t||this.filters||[]).filter((function(t){return t&&!t.isNeutralState()})),this.set(\"dirty\",!0),this.removeTexture(this.cacheKey+\"_filtered\"),0===t.length)return this._element=this._originalElement,this._filteredEl=null,this._filterScalingX=1,this._filterScalingY=1,this;var e=this._originalElement,i=e.naturalWidth||e.width,r=e.naturalHeight||e.height;if(this._element===this._originalElement){var n=x.util.createCanvasElement();n.width=i,n.height=r,this._element=n,this._filteredEl=n}else this._element=this._filteredEl,this._filteredEl.getContext(\"2d\").clearRect(0,0,i,r),this._lastScaleX=1,this._lastScaleY=1;return x.filterBackend||(x.filterBackend=x.initFilterBackend()),x.filterBackend.applyFilters(t,this._originalElement,i,r,this._element,this.cacheKey),this._originalElement.width===this._element.width&&this._originalElement.height===this._element.height||(this._filterScalingX=this._element.width/this._originalElement.width,this._filterScalingY=this._element.height/this._originalElement.height),this},_render:function(t){x.util.setImageSmoothing(t,this.imageSmoothing),!0!==this.isMoving&&this.resizeFilter&&this._needsResize()&&this.applyResizeFilters(),this._stroke(t),this._renderPaintInOrder(t)},drawCacheOnCanvas:function(t){x.util.setImageSmoothing(t,this.imageSmoothing),x.Object.prototype.drawCacheOnCanvas.call(this,t)},shouldCache:function(){return this.needsItsOwnCache()},_renderFill:function(t){var e=this._element;if(e){var i=this._filterScalingX,r=this._filterScalingY,n=this.width,s=this.height,o=Math.min,a=Math.max,l=a(this.cropX,0),h=a(this.cropY,0),c=e.naturalWidth||e.width,u=e.naturalHeight||e.height,p=l*i,f=h*r,d=o(n*i,c-p),g=o(s*r,u-f),m=-n/2,v=-s/2,y=o(n,c/i-l),x=o(s,u/r-h);e&&t.drawImage(e,p,f,d,g,m,v,y,x)}},_needsResize:function(){var t=this.getTotalObjectScaling();return t.scaleX!==this._lastScaleX||t.scaleY!==this._lastScaleY},_resetWidthHeight:function(){this.set(this.getOriginalSize())},_initElement:function(t,e){this.setElement(x.util.getById(t),e),x.util.addClass(this.getElement(),x.Image.CSS_CANVAS)},_initConfig:function(t){t||(t={}),this.setOptions(t),this._setWidthHeight(t)},_initFilters:function(t,e){t&&t.length?x.util.enlivenObjects(t,(function(t){e&&e(t)}),\"fabric.Image.filters\"):e&&e()},_setWidthHeight:function(t){t||(t={});var e=this.getElement();this.width=t.width||e.naturalWidth||e.width||0,this.height=t.height||e.naturalHeight||e.height||0},parsePreserveAspectRatioAttribute:function(){var t,e=x.util.parsePreserveAspectRatioAttribute(this.preserveAspectRatio||\"\"),i=this._element.width,r=this._element.height,n=1,s=1,o=0,a=0,l=0,h=0,c=this.width,u=this.height,p={width:c,height:u};return!e||\"none\"===e.alignX&&\"none\"===e.alignY?(n=c/i,s=u/r):(\"meet\"===e.meetOrSlice&&(t=(c-i*(n=s=x.util.findScaleToFit(this._element,p)))/2,\"Min\"===e.alignX&&(o=-t),\"Max\"===e.alignX&&(o=t),t=(u-r*s)/2,\"Min\"===e.alignY&&(a=-t),\"Max\"===e.alignY&&(a=t)),\"slice\"===e.meetOrSlice&&(t=i-c/(n=s=x.util.findScaleToCover(this._element,p)),\"Mid\"===e.alignX&&(l=t/2),\"Max\"===e.alignX&&(l=t),t=r-u/s,\"Mid\"===e.alignY&&(h=t/2),\"Max\"===e.alignY&&(h=t),i=c/n,r=u/s)),{width:i,height:r,scaleX:n,scaleY:s,offsetLeft:o,offsetTop:a,cropX:l,cropY:h}}}),x.Image.CSS_CANVAS=\"canvas-img\",x.Image.prototype.getSvgSrc=x.Image.prototype.getSrc,x.Image.fromObject=function(t,e){var i=x.util.object.clone(t);x.util.loadImage(i.src,(function(t,r){r?e&&e(null,!0):x.Image.prototype._initFilters.call(i,i.filters,(function(r){i.filters=r||[],x.Image.prototype._initFilters.call(i,[i.resizeFilter],(function(r){i.resizeFilter=r[0],x.util.enlivenObjectEnlivables(i,i,(function(){var r=new x.Image(t,i);e(r,!1)}))}))}))}),null,i.crossOrigin)},x.Image.fromURL=function(t,e,i){x.util.loadImage(t,(function(t,r){e&&e(new x.Image(t,i),r)}),null,i&&i.crossOrigin)},x.Image.ATTRIBUTE_NAMES=x.SHARED_ATTRIBUTES.concat(\"x y width height preserveAspectRatio xlink:href crossOrigin image-rendering\".split(\" \")),x.Image.fromElement=function(t,i,r){var n=x.parseAttributes(t,x.Image.ATTRIBUTE_NAMES);x.Image.fromURL(n[\"xlink:href\"],i,e(r?x.util.object.clone(r):{},n))})}(t.exports),x.util.object.extend(x.Object.prototype,{_getAngleValueForStraighten:function(){var t=this.angle%360;return t>0?90*Math.round((t-1)/90):90*Math.round(t/90)},straighten:function(){return this.rotate(this._getAngleValueForStraighten())},fxStraighten:function(t){var e=function(){},i=(t=t||{}).onComplete||e,r=t.onChange||e,n=this;return x.util.animate({target:this,startValue:this.get(\"angle\"),endValue:this._getAngleValueForStraighten(),duration:this.FX_DURATION,onChange:function(t){n.rotate(t),r()},onComplete:function(){n.setCoords(),i()}})}}),x.util.object.extend(x.StaticCanvas.prototype,{straightenObject:function(t){return t.straighten(),this.requestRenderAll(),this},fxStraightenObject:function(t){return t.fxStraighten({onChange:this.requestRenderAllBound})}}),function(){\"use strict\";function t(t,e){var i=\"precision \"+e+\" float;\\nvoid main(){}\",r=t.createShader(t.FRAGMENT_SHADER);return t.shaderSource(r,i),t.compileShader(r),!!t.getShaderParameter(r,t.COMPILE_STATUS)}function e(t){t&&t.tileSize&&(this.tileSize=t.tileSize),this.setupGLContext(this.tileSize,this.tileSize),this.captureGPUInfo()}x.isWebglSupported=function(e){if(x.isLikelyNode)return!1;e=e||x.WebglFilterBackend.prototype.tileSize;var i=document.createElement(\"canvas\"),r=i.getContext(\"webgl\")||i.getContext(\"experimental-webgl\"),n=!1;if(r){x.maxTextureSize=r.getParameter(r.MAX_TEXTURE_SIZE),n=x.maxTextureSize>=e;for(var s=[\"highp\",\"mediump\",\"lowp\"],o=0;o<3;o++)if(t(r,s[o])){x.webGlPrecision=s[o];break}}return this.isSupported=n,n},x.WebglFilterBackend=e,e.prototype={tileSize:2048,resources:{},setupGLContext:function(t,e){this.dispose(),this.createWebGLCanvas(t,e),this.aPosition=new Float32Array([0,0,0,1,1,0,1,1]),this.chooseFastestCopyGLTo2DMethod(t,e)},chooseFastestCopyGLTo2DMethod:function(t,e){var i,r=void 0!==window.performance;try{new ImageData(1,1),i=!0}catch(t){i=!1}var n=\"undefined\"!=typeof ArrayBuffer,s=\"undefined\"!=typeof Uint8ClampedArray;if(r&&i&&n&&s){var o=x.util.createCanvasElement(),a=new ArrayBuffer(t*e*4);if(x.forceGLPutImageData)return this.imageBuffer=a,void(this.copyGLTo2D=C);var l,h,c={imageBuffer:a,destinationWidth:t,destinationHeight:e,targetCanvas:o};o.width=t,o.height=e,l=window.performance.now(),b.call(c,this.gl,c),h=window.performance.now()-l,l=window.performance.now(),C.call(c,this.gl,c),h>window.performance.now()-l?(this.imageBuffer=a,this.copyGLTo2D=C):this.copyGLTo2D=b}},createWebGLCanvas:function(t,e){var i=x.util.createCanvasElement();i.width=t,i.height=e;var r={alpha:!0,premultipliedAlpha:!1,depth:!1,stencil:!1,antialias:!1},n=i.getContext(\"webgl\",r);n||(n=i.getContext(\"experimental-webgl\",r)),n&&(n.clearColor(0,0,0,0),this.canvas=i,this.gl=n)},applyFilters:function(t,e,i,r,n,s){var o,a=this.gl;s&&(o=this.getCachedTexture(s,e));var l={originalWidth:e.width||e.originalWidth,originalHeight:e.height||e.originalHeight,sourceWidth:i,sourceHeight:r,destinationWidth:i,destinationHeight:r,context:a,sourceTexture:this.createTexture(a,i,r,!o&&e),targetTexture:this.createTexture(a,i,r),originalTexture:o||this.createTexture(a,i,r,!o&&e),passes:t.length,webgl:!0,aPosition:this.aPosition,programCache:this.programCache,pass:0,filterBackend:this,targetCanvas:n},h=a.createFramebuffer();return a.bindFramebuffer(a.FRAMEBUFFER,h),t.forEach((function(t){t&&t.applyTo(l)})),function(t){var e=t.targetCanvas,i=e.width,r=e.height,n=t.destinationWidth,s=t.destinationHeight;i===n&&r===s||(e.width=n,e.height=s)}(l),this.copyGLTo2D(a,l),a.bindTexture(a.TEXTURE_2D,null),a.deleteTexture(l.sourceTexture),a.deleteTexture(l.targetTexture),a.deleteFramebuffer(h),n.getContext(\"2d\").setTransform(1,0,0,1,0,0),l},dispose:function(){this.canvas&&(this.canvas=null,this.gl=null),this.clearWebGLCaches()},clearWebGLCaches:function(){this.programCache={},this.textureCache={}},createTexture:function(t,e,i,r){var n=t.createTexture();return t.bindTexture(t.TEXTURE_2D,n),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),r?t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r):t.texImage2D(t.TEXTURE_2D,0,t.RGBA,e,i,0,t.RGBA,t.UNSIGNED_BYTE,null),n},getCachedTexture:function(t,e){if(this.textureCache[t])return this.textureCache[t];var i=this.createTexture(this.gl,e.width,e.height,e);return this.textureCache[t]=i,i},evictCachesForKey:function(t){this.textureCache[t]&&(this.gl.deleteTexture(this.textureCache[t]),delete this.textureCache[t])},copyGLTo2D:b,captureGPUInfo:function(){if(this.gpuInfo)return this.gpuInfo;var t=this.gl,e={renderer:\"\",vendor:\"\"};if(!t)return e;var i=t.getExtension(\"WEBGL_debug_renderer_info\");if(i){var r=t.getParameter(i.UNMASKED_RENDERER_WEBGL),n=t.getParameter(i.UNMASKED_VENDOR_WEBGL);r&&(e.renderer=r.toLowerCase()),n&&(e.vendor=n.toLowerCase())}return this.gpuInfo=e,e}}}(),function(){\"use strict\";var t=function(){};function e(){}x.Canvas2dFilterBackend=e,e.prototype={evictCachesForKey:t,dispose:t,clearWebGLCaches:t,resources:{},applyFilters:function(t,e,i,r,n){var s=n.getContext(\"2d\");s.drawImage(e,0,0,i,r);var o={sourceWidth:i,sourceHeight:r,imageData:s.getImageData(0,0,i,r),originalEl:e,originalImageData:s.getImageData(0,0,i,r),canvasEl:n,ctx:s,filterBackend:this};return t.forEach((function(t){t.applyTo(o)})),o.imageData.width===i&&o.imageData.height===r||(n.width=o.imageData.width,n.height=o.imageData.height),s.putImageData(o.imageData,0,0),o}}}(),x.Image=x.Image||{},x.Image.filters=x.Image.filters||{},x.Image.filters.BaseFilter=x.util.createClass({type:\"BaseFilter\",vertexSource:\"attribute vec2 aPosition;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvTexCoord = aPosition;\\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n}\",fragmentSource:\"precision highp float;\\nvarying vec2 vTexCoord;\\nuniform sampler2D uTexture;\\nvoid main() {\\ngl_FragColor = texture2D(uTexture, vTexCoord);\\n}\",initialize:function(t){t&&this.setOptions(t)},setOptions:function(t){for(var e in t)this[e]=t[e]},createProgram:function(t,e,i){e=e||this.fragmentSource,i=i||this.vertexSource,\"highp\"!==x.webGlPrecision&&(e=e.replace(/precision highp float/g,\"precision \"+x.webGlPrecision+\" float\"));var r=t.createShader(t.VERTEX_SHADER);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new Error(\"Vertex shader compile error for \"+this.type+\": \"+t.getShaderInfoLog(r));var n=t.createShader(t.FRAGMENT_SHADER);if(t.shaderSource(n,e),t.compileShader(n),!t.getShaderParameter(n,t.COMPILE_STATUS))throw new Error(\"Fragment shader compile error for \"+this.type+\": \"+t.getShaderInfoLog(n));var s=t.createProgram();if(t.attachShader(s,r),t.attachShader(s,n),t.linkProgram(s),!t.getProgramParameter(s,t.LINK_STATUS))throw new Error('Shader link error for \"${this.type}\" '+t.getProgramInfoLog(s));var o=this.getAttributeLocations(t,s),a=this.getUniformLocations(t,s)||{};return a.uStepW=t.getUniformLocation(s,\"uStepW\"),a.uStepH=t.getUniformLocation(s,\"uStepH\"),{program:s,attributeLocations:o,uniformLocations:a}},getAttributeLocations:function(t,e){return{aPosition:t.getAttribLocation(e,\"aPosition\")}},getUniformLocations:function(){return{}},sendAttributeData:function(t,e,i){var r=e.aPosition,n=t.createBuffer();t.bindBuffer(t.ARRAY_BUFFER,n),t.enableVertexAttribArray(r),t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.bufferData(t.ARRAY_BUFFER,i,t.STATIC_DRAW)},_setupFrameBuffer:function(t){var e,i,r=t.context;t.passes>1?(e=t.destinationWidth,i=t.destinationHeight,t.sourceWidth===e&&t.sourceHeight===i||(r.deleteTexture(t.targetTexture),t.targetTexture=t.filterBackend.createTexture(r,e,i)),r.framebufferTexture2D(r.FRAMEBUFFER,r.COLOR_ATTACHMENT0,r.TEXTURE_2D,t.targetTexture,0)):(r.bindFramebuffer(r.FRAMEBUFFER,null),r.finish())},_swapTextures:function(t){t.passes--,t.pass++;var e=t.targetTexture;t.targetTexture=t.sourceTexture,t.sourceTexture=e},isNeutralState:function(){var t=this.mainParameter,e=x.Image.filters[this.type].prototype;if(t){if(Array.isArray(e[t])){for(var i=e[t].length;i--;)if(this[t][i]!==e[t][i])return!1;return!0}return e[t]===this[t]}return!1},applyTo:function(t){t.webgl?(this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},retrieveShader:function(t){return t.programCache.hasOwnProperty(this.type)||(t.programCache[this.type]=this.createProgram(t.context)),t.programCache[this.type]},applyToWebGL:function(t){var e=t.context,i=this.retrieveShader(t);0===t.pass&&t.originalTexture?e.bindTexture(e.TEXTURE_2D,t.originalTexture):e.bindTexture(e.TEXTURE_2D,t.sourceTexture),e.useProgram(i.program),this.sendAttributeData(e,i.attributeLocations,t.aPosition),e.uniform1f(i.uniformLocations.uStepW,1/t.sourceWidth),e.uniform1f(i.uniformLocations.uStepH,1/t.sourceHeight),this.sendUniformData(e,i.uniformLocations),e.viewport(0,0,t.destinationWidth,t.destinationHeight),e.drawArrays(e.TRIANGLE_STRIP,0,4)},bindAdditionalTexture:function(t,e,i){t.activeTexture(i),t.bindTexture(t.TEXTURE_2D,e),t.activeTexture(t.TEXTURE0)},unbindAdditionalTexture:function(t,e){t.activeTexture(e),t.bindTexture(t.TEXTURE_2D,null),t.activeTexture(t.TEXTURE0)},getMainParameter:function(){return this[this.mainParameter]},setMainParameter:function(t){this[this.mainParameter]=t},sendUniformData:function(){},createHelpLayer:function(t){if(!t.helpLayer){var e=document.createElement(\"canvas\");e.width=t.sourceWidth,e.height=t.sourceHeight,t.helpLayer=e}},toObject:function(){var t={type:this.type},e=this.mainParameter;return e&&(t[e]=this[e]),t},toJSON:function(){return this.toObject()}}),x.Image.filters.BaseFilter.fromObject=function(t,e){var i=new x.Image.filters[t.type](t);return e&&e(i),i},function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.ColorMatrix=r(i.BaseFilter,{type:\"ColorMatrix\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nvarying vec2 vTexCoord;\\nuniform mat4 uColorMatrix;\\nuniform vec4 uConstants;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\ncolor *= uColorMatrix;\\ncolor += uConstants;\\ngl_FragColor = color;\\n}\",matrix:[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],mainParameter:\"matrix\",colorsOnly:!0,initialize:function(t){this.callSuper(\"initialize\",t),this.matrix=this.matrix.slice(0)},applyTo2d:function(t){var e,i,r,n,s,o=t.imageData.data,a=o.length,l=this.matrix,h=this.colorsOnly;for(s=0;s<a;s+=4)e=o[s],i=o[s+1],r=o[s+2],h?(o[s]=e*l[0]+i*l[1]+r*l[2]+255*l[4],o[s+1]=e*l[5]+i*l[6]+r*l[7]+255*l[9],o[s+2]=e*l[10]+i*l[11]+r*l[12]+255*l[14]):(n=o[s+3],o[s]=e*l[0]+i*l[1]+r*l[2]+n*l[3]+255*l[4],o[s+1]=e*l[5]+i*l[6]+r*l[7]+n*l[8]+255*l[9],o[s+2]=e*l[10]+i*l[11]+r*l[12]+n*l[13]+255*l[14],o[s+3]=e*l[15]+i*l[16]+r*l[17]+n*l[18]+255*l[19])},getUniformLocations:function(t,e){return{uColorMatrix:t.getUniformLocation(e,\"uColorMatrix\"),uConstants:t.getUniformLocation(e,\"uConstants\")}},sendUniformData:function(t,e){var i=this.matrix,r=[i[0],i[1],i[2],i[3],i[5],i[6],i[7],i[8],i[10],i[11],i[12],i[13],i[15],i[16],i[17],i[18]],n=[i[4],i[9],i[14],i[19]];t.uniformMatrix4fv(e.uColorMatrix,!1,r),t.uniform4fv(e.uConstants,n)}}),e.Image.filters.ColorMatrix.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Brightness=r(i.BaseFilter,{type:\"Brightness\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uBrightness;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\ncolor.rgb += uBrightness;\\ngl_FragColor = color;\\n}\",brightness:0,mainParameter:\"brightness\",applyTo2d:function(t){if(0!==this.brightness){var e,i=t.imageData.data,r=i.length,n=Math.round(255*this.brightness);for(e=0;e<r;e+=4)i[e]=i[e]+n,i[e+1]=i[e+1]+n,i[e+2]=i[e+2]+n}},getUniformLocations:function(t,e){return{uBrightness:t.getUniformLocation(e,\"uBrightness\")}},sendUniformData:function(t,e){t.uniform1f(e.uBrightness,this.brightness)}}),e.Image.filters.Brightness.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.Convolute=n(r.BaseFilter,{type:\"Convolute\",opaque:!1,matrix:[0,0,0,0,1,0,0,0,0],fragmentSource:{Convolute_3_1:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[9];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 0);\\nfor (float h = 0.0; h < 3.0; h+=1.0) {\\nfor (float w = 0.0; w < 3.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 1), uStepH * (h - 1));\\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 3.0 + w)];\\n}\\n}\\ngl_FragColor = color;\\n}\",Convolute_3_0:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[9];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 1);\\nfor (float h = 0.0; h < 3.0; h+=1.0) {\\nfor (float w = 0.0; w < 3.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 1.0), uStepH * (h - 1.0));\\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 3.0 + w)];\\n}\\n}\\nfloat alpha = texture2D(uTexture, vTexCoord).a;\\ngl_FragColor = color;\\ngl_FragColor.a = alpha;\\n}\",Convolute_5_1:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[25];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 0);\\nfor (float h = 0.0; h < 5.0; h+=1.0) {\\nfor (float w = 0.0; w < 5.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 5.0 + w)];\\n}\\n}\\ngl_FragColor = color;\\n}\",Convolute_5_0:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[25];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 1);\\nfor (float h = 0.0; h < 5.0; h+=1.0) {\\nfor (float w = 0.0; w < 5.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 2.0), uStepH * (h - 2.0));\\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 5.0 + w)];\\n}\\n}\\nfloat alpha = texture2D(uTexture, vTexCoord).a;\\ngl_FragColor = color;\\ngl_FragColor.a = alpha;\\n}\",Convolute_7_1:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[49];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 0);\\nfor (float h = 0.0; h < 7.0; h+=1.0) {\\nfor (float w = 0.0; w < 7.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 7.0 + w)];\\n}\\n}\\ngl_FragColor = color;\\n}\",Convolute_7_0:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[49];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 1);\\nfor (float h = 0.0; h < 7.0; h+=1.0) {\\nfor (float w = 0.0; w < 7.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 3.0), uStepH * (h - 3.0));\\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 7.0 + w)];\\n}\\n}\\nfloat alpha = texture2D(uTexture, vTexCoord).a;\\ngl_FragColor = color;\\ngl_FragColor.a = alpha;\\n}\",Convolute_9_1:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[81];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 0);\\nfor (float h = 0.0; h < 9.0; h+=1.0) {\\nfor (float w = 0.0; w < 9.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\ncolor += texture2D(uTexture, vTexCoord + matrixPos) * uMatrix[int(h * 9.0 + w)];\\n}\\n}\\ngl_FragColor = color;\\n}\",Convolute_9_0:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uMatrix[81];\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = vec4(0, 0, 0, 1);\\nfor (float h = 0.0; h < 9.0; h+=1.0) {\\nfor (float w = 0.0; w < 9.0; w+=1.0) {\\nvec2 matrixPos = vec2(uStepW * (w - 4.0), uStepH * (h - 4.0));\\ncolor.rgb += texture2D(uTexture, vTexCoord + matrixPos).rgb * uMatrix[int(h * 9.0 + w)];\\n}\\n}\\nfloat alpha = texture2D(uTexture, vTexCoord).a;\\ngl_FragColor = color;\\ngl_FragColor.a = alpha;\\n}\"},retrieveShader:function(t){var e=Math.sqrt(this.matrix.length),i=this.type+\"_\"+e+\"_\"+(this.opaque?1:0),r=this.fragmentSource[i];return t.programCache.hasOwnProperty(i)||(t.programCache[i]=this.createProgram(t.context,r)),t.programCache[i]},applyTo2d:function(t){var e,i,r,n,s,o,a,l,h,c,u,p,f,d=t.imageData,g=d.data,m=this.matrix,v=Math.round(Math.sqrt(m.length)),y=Math.floor(v/2),x=d.width,_=d.height,b=t.ctx.createImageData(x,_),C=b.data,S=this.opaque?1:0;for(u=0;u<_;u++)for(c=0;c<x;c++){for(s=4*(u*x+c),e=0,i=0,r=0,n=0,f=0;f<v;f++)for(p=0;p<v;p++)o=c+p-y,(a=u+f-y)<0||a>=_||o<0||o>=x||(l=4*(a*x+o),h=m[f*v+p],e+=g[l]*h,i+=g[l+1]*h,r+=g[l+2]*h,S||(n+=g[l+3]*h));C[s]=e,C[s+1]=i,C[s+2]=r,C[s+3]=S?g[s+3]:n}t.imageData=b},getUniformLocations:function(t,e){return{uMatrix:t.getUniformLocation(e,\"uMatrix\"),uOpaque:t.getUniformLocation(e,\"uOpaque\"),uHalfSize:t.getUniformLocation(e,\"uHalfSize\"),uSize:t.getUniformLocation(e,\"uSize\")}},sendUniformData:function(t,e){t.uniform1fv(e.uMatrix,this.matrix)},toObject:function(){return i(this.callSuper(\"toObject\"),{opaque:this.opaque,matrix:this.matrix})}}),e.Image.filters.Convolute.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Grayscale=r(i.BaseFilter,{type:\"Grayscale\",fragmentSource:{average:\"precision highp float;\\nuniform sampler2D uTexture;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nfloat average = (color.r + color.b + color.g) / 3.0;\\ngl_FragColor = vec4(average, average, average, color.a);\\n}\",lightness:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform int uMode;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 col = texture2D(uTexture, vTexCoord);\\nfloat average = (max(max(col.r, col.g),col.b) + min(min(col.r, col.g),col.b)) / 2.0;\\ngl_FragColor = vec4(average, average, average, col.a);\\n}\",luminosity:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform int uMode;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 col = texture2D(uTexture, vTexCoord);\\nfloat average = 0.21 * col.r + 0.72 * col.g + 0.07 * col.b;\\ngl_FragColor = vec4(average, average, average, col.a);\\n}\"},mode:\"average\",mainParameter:\"mode\",applyTo2d:function(t){var e,i,r=t.imageData.data,n=r.length,s=this.mode;for(e=0;e<n;e+=4)\"average\"===s?i=(r[e]+r[e+1]+r[e+2])/3:\"lightness\"===s?i=(Math.min(r[e],r[e+1],r[e+2])+Math.max(r[e],r[e+1],r[e+2]))/2:\"luminosity\"===s&&(i=.21*r[e]+.72*r[e+1]+.07*r[e+2]),r[e]=i,r[e+1]=i,r[e+2]=i},retrieveShader:function(t){var e=this.type+\"_\"+this.mode;if(!t.programCache.hasOwnProperty(e)){var i=this.fragmentSource[this.mode];t.programCache[e]=this.createProgram(t.context,i)}return t.programCache[e]},getUniformLocations:function(t,e){return{uMode:t.getUniformLocation(e,\"uMode\")}},sendUniformData:function(t,e){t.uniform1i(e.uMode,1)},isNeutralState:function(){return!1}}),e.Image.filters.Grayscale.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Invert=r(i.BaseFilter,{type:\"Invert\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform int uInvert;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nif (uInvert == 1) {\\ngl_FragColor = vec4(1.0 - color.r,1.0 -color.g,1.0 -color.b,color.a);\\n} else {\\ngl_FragColor = color;\\n}\\n}\",invert:!0,mainParameter:\"invert\",applyTo2d:function(t){var e,i=t.imageData.data,r=i.length;for(e=0;e<r;e+=4)i[e]=255-i[e],i[e+1]=255-i[e+1],i[e+2]=255-i[e+2]},isNeutralState:function(){return!this.invert},getUniformLocations:function(t,e){return{uInvert:t.getUniformLocation(e,\"uInvert\")}},sendUniformData:function(t,e){t.uniform1i(e.uInvert,this.invert)}}),e.Image.filters.Invert.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.Noise=n(r.BaseFilter,{type:\"Noise\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uStepH;\\nuniform float uNoise;\\nuniform float uSeed;\\nvarying vec2 vTexCoord;\\nfloat rand(vec2 co, float seed, float vScale) {\\nreturn fract(sin(dot(co.xy * vScale ,vec2(12.9898 , 78.233))) * 43758.5453 * (seed + 0.01) / 2.0);\\n}\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\ncolor.rgb += (0.5 - rand(vTexCoord, uSeed, 0.1 / uStepH)) * uNoise;\\ngl_FragColor = color;\\n}\",mainParameter:\"noise\",noise:0,applyTo2d:function(t){if(0!==this.noise){var e,i,r=t.imageData.data,n=r.length,s=this.noise;for(e=0,n=r.length;e<n;e+=4)i=(.5-Math.random())*s,r[e]+=i,r[e+1]+=i,r[e+2]+=i}},getUniformLocations:function(t,e){return{uNoise:t.getUniformLocation(e,\"uNoise\"),uSeed:t.getUniformLocation(e,\"uSeed\")}},sendUniformData:function(t,e){t.uniform1f(e.uNoise,this.noise/255),t.uniform1f(e.uSeed,Math.random())},toObject:function(){return i(this.callSuper(\"toObject\"),{noise:this.noise})}}),e.Image.filters.Noise.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Pixelate=r(i.BaseFilter,{type:\"Pixelate\",blocksize:4,mainParameter:\"blocksize\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uBlocksize;\\nuniform float uStepW;\\nuniform float uStepH;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nfloat blockW = uBlocksize * uStepW;\\nfloat blockH = uBlocksize * uStepW;\\nint posX = int(vTexCoord.x / blockW);\\nint posY = int(vTexCoord.y / blockH);\\nfloat fposX = float(posX);\\nfloat fposY = float(posY);\\nvec2 squareCoords = vec2(fposX * blockW, fposY * blockH);\\nvec4 color = texture2D(uTexture, squareCoords);\\ngl_FragColor = color;\\n}\",applyTo2d:function(t){var e,i,r,n,s,o,a,l,h,c,u,p=t.imageData,f=p.data,d=p.height,g=p.width;for(i=0;i<d;i+=this.blocksize)for(r=0;r<g;r+=this.blocksize)for(n=f[e=4*i*g+4*r],s=f[e+1],o=f[e+2],a=f[e+3],c=Math.min(i+this.blocksize,d),u=Math.min(r+this.blocksize,g),l=i;l<c;l++)for(h=r;h<u;h++)f[e=4*l*g+4*h]=n,f[e+1]=s,f[e+2]=o,f[e+3]=a},isNeutralState:function(){return 1===this.blocksize},getUniformLocations:function(t,e){return{uBlocksize:t.getUniformLocation(e,\"uBlocksize\"),uStepW:t.getUniformLocation(e,\"uStepW\"),uStepH:t.getUniformLocation(e,\"uStepH\")}},sendUniformData:function(t,e){t.uniform1f(e.uBlocksize,this.blocksize)}}),e.Image.filters.Pixelate.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.extend,r=e.Image.filters,n=e.util.createClass;r.RemoveColor=n(r.BaseFilter,{type:\"RemoveColor\",color:\"#FFFFFF\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform vec4 uLow;\\nuniform vec4 uHigh;\\nvarying vec2 vTexCoord;\\nvoid main() {\\ngl_FragColor = texture2D(uTexture, vTexCoord);\\nif(all(greaterThan(gl_FragColor.rgb,uLow.rgb)) && all(greaterThan(uHigh.rgb,gl_FragColor.rgb))) {\\ngl_FragColor.a = 0.0;\\n}\\n}\",distance:.02,useAlpha:!1,applyTo2d:function(t){var i,r,n,s,o=t.imageData.data,a=255*this.distance,l=new e.Color(this.color).getSource(),h=[l[0]-a,l[1]-a,l[2]-a],c=[l[0]+a,l[1]+a,l[2]+a];for(i=0;i<o.length;i+=4)r=o[i],n=o[i+1],s=o[i+2],r>h[0]&&n>h[1]&&s>h[2]&&r<c[0]&&n<c[1]&&s<c[2]&&(o[i+3]=0)},getUniformLocations:function(t,e){return{uLow:t.getUniformLocation(e,\"uLow\"),uHigh:t.getUniformLocation(e,\"uHigh\")}},sendUniformData:function(t,i){var r=new e.Color(this.color).getSource(),n=parseFloat(this.distance),s=[0+r[0]/255-n,0+r[1]/255-n,0+r[2]/255-n,1],o=[r[0]/255+n,r[1]/255+n,r[2]/255+n,1];t.uniform4fv(i.uLow,s),t.uniform4fv(i.uHigh,o)},toObject:function(){return i(this.callSuper(\"toObject\"),{color:this.color,distance:this.distance})}}),e.Image.filters.RemoveColor.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass,n={Brownie:[.5997,.34553,-.27082,0,.186,-.0377,.86095,.15059,0,-.1449,.24113,-.07441,.44972,0,-.02965,0,0,0,1,0],Vintage:[.62793,.32021,-.03965,0,.03784,.02578,.64411,.03259,0,.02926,.0466,-.08512,.52416,0,.02023,0,0,0,1,0],Kodachrome:[1.12855,-.39673,-.03992,0,.24991,-.16404,1.08352,-.05498,0,.09698,-.16786,-.56034,1.60148,0,.13972,0,0,0,1,0],Technicolor:[1.91252,-.85453,-.09155,0,.04624,-.30878,1.76589,-.10601,0,-.27589,-.2311,-.75018,1.84759,0,.12137,0,0,0,1,0],Polaroid:[1.438,-.062,-.062,0,0,-.122,1.378,-.122,0,0,-.016,-.016,1.483,0,0,0,0,0,1,0],Sepia:[.393,.769,.189,0,0,.349,.686,.168,0,0,.272,.534,.131,0,0,0,0,0,1,0],BlackWhite:[1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,1.5,1.5,1.5,0,-1,0,0,0,1,0]};for(var s in n)i[s]=r(i.ColorMatrix,{type:s,matrix:n[s],mainParameter:!1,colorsOnly:!0}),e.Image.filters[s].fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric,i=e.Image.filters,r=e.util.createClass;i.BlendColor=r(i.BaseFilter,{type:\"BlendColor\",color:\"#F95C63\",mode:\"multiply\",alpha:1,fragmentSource:{multiply:\"gl_FragColor.rgb *= uColor.rgb;\\n\",screen:\"gl_FragColor.rgb = 1.0 - (1.0 - gl_FragColor.rgb) * (1.0 - uColor.rgb);\\n\",add:\"gl_FragColor.rgb += uColor.rgb;\\n\",diff:\"gl_FragColor.rgb = abs(gl_FragColor.rgb - uColor.rgb);\\n\",subtract:\"gl_FragColor.rgb -= uColor.rgb;\\n\",lighten:\"gl_FragColor.rgb = max(gl_FragColor.rgb, uColor.rgb);\\n\",darken:\"gl_FragColor.rgb = min(gl_FragColor.rgb, uColor.rgb);\\n\",exclusion:\"gl_FragColor.rgb += uColor.rgb - 2.0 * (uColor.rgb * gl_FragColor.rgb);\\n\",overlay:\"if (uColor.r < 0.5) {\\ngl_FragColor.r *= 2.0 * uColor.r;\\n} else {\\ngl_FragColor.r = 1.0 - 2.0 * (1.0 - gl_FragColor.r) * (1.0 - uColor.r);\\n}\\nif (uColor.g < 0.5) {\\ngl_FragColor.g *= 2.0 * uColor.g;\\n} else {\\ngl_FragColor.g = 1.0 - 2.0 * (1.0 - gl_FragColor.g) * (1.0 - uColor.g);\\n}\\nif (uColor.b < 0.5) {\\ngl_FragColor.b *= 2.0 * uColor.b;\\n} else {\\ngl_FragColor.b = 1.0 - 2.0 * (1.0 - gl_FragColor.b) * (1.0 - uColor.b);\\n}\\n\",tint:\"gl_FragColor.rgb *= (1.0 - uColor.a);\\ngl_FragColor.rgb += uColor.rgb;\\n\"},buildSource:function(t){return\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform vec4 uColor;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\ngl_FragColor = color;\\nif (color.a > 0.0) {\\n\"+this.fragmentSource[t]+\"}\\n}\"},retrieveShader:function(t){var e,i=this.type+\"_\"+this.mode;return t.programCache.hasOwnProperty(i)||(e=this.buildSource(this.mode),t.programCache[i]=this.createProgram(t.context,e)),t.programCache[i]},applyTo2d:function(t){var i,r,n,s,o,a,l,h=t.imageData.data,c=h.length,u=1-this.alpha;i=(l=new e.Color(this.color).getSource())[0]*this.alpha,r=l[1]*this.alpha,n=l[2]*this.alpha;for(var p=0;p<c;p+=4)switch(s=h[p],o=h[p+1],a=h[p+2],this.mode){case\"multiply\":h[p]=s*i/255,h[p+1]=o*r/255,h[p+2]=a*n/255;break;case\"screen\":h[p]=255-(255-s)*(255-i)/255,h[p+1]=255-(255-o)*(255-r)/255,h[p+2]=255-(255-a)*(255-n)/255;break;case\"add\":h[p]=s+i,h[p+1]=o+r,h[p+2]=a+n;break;case\"diff\":case\"difference\":h[p]=Math.abs(s-i),h[p+1]=Math.abs(o-r),h[p+2]=Math.abs(a-n);break;case\"subtract\":h[p]=s-i,h[p+1]=o-r,h[p+2]=a-n;break;case\"darken\":h[p]=Math.min(s,i),h[p+1]=Math.min(o,r),h[p+2]=Math.min(a,n);break;case\"lighten\":h[p]=Math.max(s,i),h[p+1]=Math.max(o,r),h[p+2]=Math.max(a,n);break;case\"overlay\":h[p]=i<128?2*s*i/255:255-2*(255-s)*(255-i)/255,h[p+1]=r<128?2*o*r/255:255-2*(255-o)*(255-r)/255,h[p+2]=n<128?2*a*n/255:255-2*(255-a)*(255-n)/255;break;case\"exclusion\":h[p]=i+s-2*i*s/255,h[p+1]=r+o-2*r*o/255,h[p+2]=n+a-2*n*a/255;break;case\"tint\":h[p]=i+s*u,h[p+1]=r+o*u,h[p+2]=n+a*u}},getUniformLocations:function(t,e){return{uColor:t.getUniformLocation(e,\"uColor\")}},sendUniformData:function(t,i){var r=new e.Color(this.color).getSource();r[0]=this.alpha*r[0]/255,r[1]=this.alpha*r[1]/255,r[2]=this.alpha*r[2]/255,r[3]=this.alpha,t.uniform4fv(i.uColor,r)},toObject:function(){return{type:this.type,color:this.color,mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendColor.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric,i=e.Image.filters,r=e.util.createClass;i.BlendImage=r(i.BaseFilter,{type:\"BlendImage\",image:null,mode:\"multiply\",alpha:1,vertexSource:\"attribute vec2 aPosition;\\nvarying vec2 vTexCoord;\\nvarying vec2 vTexCoord2;\\nuniform mat3 uTransformMatrix;\\nvoid main() {\\nvTexCoord = aPosition;\\nvTexCoord2 = (uTransformMatrix * vec3(aPosition, 1.0)).xy;\\ngl_Position = vec4(aPosition * 2.0 - 1.0, 0.0, 1.0);\\n}\",fragmentSource:{multiply:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform sampler2D uImage;\\nuniform vec4 uColor;\\nvarying vec2 vTexCoord;\\nvarying vec2 vTexCoord2;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nvec4 color2 = texture2D(uImage, vTexCoord2);\\ncolor.rgba *= color2.rgba;\\ngl_FragColor = color;\\n}\",mask:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform sampler2D uImage;\\nuniform vec4 uColor;\\nvarying vec2 vTexCoord;\\nvarying vec2 vTexCoord2;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nvec4 color2 = texture2D(uImage, vTexCoord2);\\ncolor.a = color2.a;\\ngl_FragColor = color;\\n}\"},retrieveShader:function(t){var e=this.type+\"_\"+this.mode,i=this.fragmentSource[this.mode];return t.programCache.hasOwnProperty(e)||(t.programCache[e]=this.createProgram(t.context,i)),t.programCache[e]},applyToWebGL:function(t){var e=t.context,i=this.createTexture(t.filterBackend,this.image);this.bindAdditionalTexture(e,i,e.TEXTURE1),this.callSuper(\"applyToWebGL\",t),this.unbindAdditionalTexture(e,e.TEXTURE1)},createTexture:function(t,e){return t.getCachedTexture(e.cacheKey,e._element)},calculateMatrix:function(){var t=this.image,e=t._element.width,i=t._element.height;return[1/t.scaleX,0,0,0,1/t.scaleY,0,-t.left/e,-t.top/i,1]},applyTo2d:function(t){var i,r,n,s,o,a,l,h,c,u,p,f=t.imageData,d=t.filterBackend.resources,g=f.data,m=g.length,v=f.width,y=f.height,x=this.image;d.blendImage||(d.blendImage=e.util.createCanvasElement()),u=(c=d.blendImage).getContext(\"2d\"),c.width!==v||c.height!==y?(c.width=v,c.height=y):u.clearRect(0,0,v,y),u.setTransform(x.scaleX,0,0,x.scaleY,x.left,x.top),u.drawImage(x._element,0,0,v,y),p=u.getImageData(0,0,v,y).data;for(var _=0;_<m;_+=4)switch(o=g[_],a=g[_+1],l=g[_+2],h=g[_+3],i=p[_],r=p[_+1],n=p[_+2],s=p[_+3],this.mode){case\"multiply\":g[_]=o*i/255,g[_+1]=a*r/255,g[_+2]=l*n/255,g[_+3]=h*s/255;break;case\"mask\":g[_+3]=s}},getUniformLocations:function(t,e){return{uTransformMatrix:t.getUniformLocation(e,\"uTransformMatrix\"),uImage:t.getUniformLocation(e,\"uImage\")}},sendUniformData:function(t,e){var i=this.calculateMatrix();t.uniform1i(e.uImage,1),t.uniformMatrix3fv(e.uTransformMatrix,!1,i)},toObject:function(){return{type:this.type,image:this.image&&this.image.toObject(),mode:this.mode,alpha:this.alpha}}}),e.Image.filters.BlendImage.fromObject=function(t,i){e.Image.fromObject(t.image,(function(r){var n=e.util.object.clone(t);n.image=r,i(new e.Image.filters.BlendImage(n))}))}}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=Math.pow,r=Math.floor,n=Math.sqrt,s=Math.abs,o=Math.round,a=Math.sin,l=Math.ceil,h=e.Image.filters,c=e.util.createClass;h.Resize=c(h.BaseFilter,{type:\"Resize\",resizeType:\"hermite\",scaleX:1,scaleY:1,lanczosLobes:3,getUniformLocations:function(t,e){return{uDelta:t.getUniformLocation(e,\"uDelta\"),uTaps:t.getUniformLocation(e,\"uTaps\")}},sendUniformData:function(t,e){t.uniform2fv(e.uDelta,this.horizontal?[1/this.width,0]:[0,1/this.height]),t.uniform1fv(e.uTaps,this.taps)},retrieveShader:function(t){var e=this.getFilterWindow(),i=this.type+\"_\"+e;if(!t.programCache.hasOwnProperty(i)){var r=this.generateShader(e);t.programCache[i]=this.createProgram(t.context,r)}return t.programCache[i]},getFilterWindow:function(){var t=this.tempScale;return Math.ceil(this.lanczosLobes/t)},getTaps:function(){for(var t=this.lanczosCreate(this.lanczosLobes),e=this.tempScale,i=this.getFilterWindow(),r=new Array(i),n=1;n<=i;n++)r[n-1]=t(n*e);return r},generateShader:function(t){for(var e=new Array(t),i=this.fragmentSourceTOP,r=1;r<=t;r++)e[r-1]=r+\".0 * uDelta\";return i+=\"uniform float uTaps[\"+t+\"];\\n\",i+=\"void main() {\\n\",i+=\"  vec4 color = texture2D(uTexture, vTexCoord);\\n\",i+=\"  float sum = 1.0;\\n\",e.forEach((function(t,e){i+=\"  color += texture2D(uTexture, vTexCoord + \"+t+\") * uTaps[\"+e+\"];\\n\",i+=\"  color += texture2D(uTexture, vTexCoord - \"+t+\") * uTaps[\"+e+\"];\\n\",i+=\"  sum += 2.0 * uTaps[\"+e+\"];\\n\"})),i+=\"  gl_FragColor = color / sum;\\n\",i+=\"}\"},fragmentSourceTOP:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform vec2 uDelta;\\nvarying vec2 vTexCoord;\\n\",applyTo:function(t){t.webgl?(t.passes++,this.width=t.sourceWidth,this.horizontal=!0,this.dW=Math.round(this.width*this.scaleX),this.dH=t.sourceHeight,this.tempScale=this.dW/this.width,this.taps=this.getTaps(),t.destinationWidth=this.dW,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceWidth=t.destinationWidth,this.height=t.sourceHeight,this.horizontal=!1,this.dH=Math.round(this.height*this.scaleY),this.tempScale=this.dH/this.height,this.taps=this.getTaps(),t.destinationHeight=this.dH,this._setupFrameBuffer(t),this.applyToWebGL(t),this._swapTextures(t),t.sourceHeight=t.destinationHeight):this.applyTo2d(t)},isNeutralState:function(){return 1===this.scaleX&&1===this.scaleY},lanczosCreate:function(t){return function(e){if(e>=t||e<=-t)return 0;if(e<1.1920929e-7&&e>-1.1920929e-7)return 1;var i=(e*=Math.PI)/t;return a(e)/e*a(i)/i}},applyTo2d:function(t){var e=t.imageData,i=this.scaleX,r=this.scaleY;this.rcpScaleX=1/i,this.rcpScaleY=1/r;var n,s=e.width,a=e.height,l=o(s*i),h=o(a*r);\"sliceHack\"===this.resizeType?n=this.sliceByTwo(t,s,a,l,h):\"hermite\"===this.resizeType?n=this.hermiteFastResize(t,s,a,l,h):\"bilinear\"===this.resizeType?n=this.bilinearFiltering(t,s,a,l,h):\"lanczos\"===this.resizeType&&(n=this.lanczosResize(t,s,a,l,h)),t.imageData=n},sliceByTwo:function(t,i,n,s,o){var a,l,h=t.imageData,c=.5,u=!1,p=!1,f=i*c,d=n*c,g=e.filterBackend.resources,m=0,v=0,y=i,x=0;for(g.sliceByTwo||(g.sliceByTwo=document.createElement(\"canvas\")),((a=g.sliceByTwo).width<1.5*i||a.height<n)&&(a.width=1.5*i,a.height=n),(l=a.getContext(\"2d\")).clearRect(0,0,1.5*i,n),l.putImageData(h,0,0),s=r(s),o=r(o);!u||!p;)i=f,n=d,s<r(f*c)?f=r(f*c):(f=s,u=!0),o<r(d*c)?d=r(d*c):(d=o,p=!0),l.drawImage(a,m,v,i,n,y,x,f,d),m=y,v=x,x+=d;return l.getImageData(m,v,s,o)},lanczosResize:function(t,e,o,a,h){var c=t.imageData.data,u=t.ctx.createImageData(a,h),p=u.data,f=this.lanczosCreate(this.lanczosLobes),d=this.rcpScaleX,g=this.rcpScaleY,m=2/this.rcpScaleX,v=2/this.rcpScaleY,y=l(d*this.lanczosLobes/2),x=l(g*this.lanczosLobes/2),_={},b={},C={};return function t(l){var S,w,D,k,T,E,A,O,P,F,M;for(b.x=(l+.5)*d,C.x=r(b.x),S=0;S<h;S++){for(b.y=(S+.5)*g,C.y=r(b.y),T=0,E=0,A=0,O=0,P=0,w=C.x-y;w<=C.x+y;w++)if(!(w<0||w>=e)){F=r(1e3*s(w-b.x)),_[F]||(_[F]={});for(var L=C.y-x;L<=C.y+x;L++)L<0||L>=o||(M=r(1e3*s(L-b.y)),_[F][M]||(_[F][M]=f(n(i(F*m,2)+i(M*v,2))/1e3)),(D=_[F][M])>0&&(T+=D,E+=D*c[k=4*(L*e+w)],A+=D*c[k+1],O+=D*c[k+2],P+=D*c[k+3]))}p[k=4*(S*a+l)]=E/T,p[k+1]=A/T,p[k+2]=O/T,p[k+3]=P/T}return++l<a?t(l):u}(0)},bilinearFiltering:function(t,e,i,n,s){var o,a,l,h,c,u,p,f,d,g=0,m=this.rcpScaleX,v=this.rcpScaleY,y=4*(e-1),x=t.imageData.data,_=t.ctx.createImageData(n,s),b=_.data;for(l=0;l<s;l++)for(h=0;h<n;h++)for(c=m*h-(o=r(m*h)),u=v*l-(a=r(v*l)),d=4*(a*e+o),p=0;p<4;p++)f=x[d+p]*(1-c)*(1-u)+x[d+4+p]*c*(1-u)+x[d+y+p]*u*(1-c)+x[d+y+4+p]*c*u,b[g++]=f;return _},hermiteFastResize:function(t,e,i,o,a){for(var h=this.rcpScaleX,c=this.rcpScaleY,u=l(h/2),p=l(c/2),f=t.imageData.data,d=t.ctx.createImageData(o,a),g=d.data,m=0;m<a;m++)for(var v=0;v<o;v++){for(var y=4*(v+m*o),x=0,_=0,b=0,C=0,S=0,w=0,D=0,k=(m+.5)*c,T=r(m*c);T<(m+1)*c;T++)for(var E=s(k-(T+.5))/p,A=(v+.5)*h,O=E*E,P=r(v*h);P<(v+1)*h;P++){var F=s(A-(P+.5))/u,M=n(O+F*F);M>1&&M<-1||(x=2*M*M*M-3*M*M+1)>0&&(D+=x*f[(F=4*(P+T*e))+3],b+=x,f[F+3]<255&&(x=x*f[F+3]/250),C+=x*f[F],S+=x*f[F+1],w+=x*f[F+2],_+=x)}g[y]=C/_,g[y+1]=S/_,g[y+2]=w/_,g[y+3]=D/b}return d},toObject:function(){return{type:this.type,scaleX:this.scaleX,scaleY:this.scaleY,resizeType:this.resizeType,lanczosLobes:this.lanczosLobes}}}),e.Image.filters.Resize.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Contrast=r(i.BaseFilter,{type:\"Contrast\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uContrast;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nfloat contrastF = 1.015 * (uContrast + 1.0) / (1.0 * (1.015 - uContrast));\\ncolor.rgb = contrastF * (color.rgb - 0.5) + 0.5;\\ngl_FragColor = color;\\n}\",contrast:0,mainParameter:\"contrast\",applyTo2d:function(t){if(0!==this.contrast){var e,i=t.imageData.data,r=i.length,n=Math.floor(255*this.contrast),s=259*(n+255)/(255*(259-n));for(e=0;e<r;e+=4)i[e]=s*(i[e]-128)+128,i[e+1]=s*(i[e+1]-128)+128,i[e+2]=s*(i[e+2]-128)+128}},getUniformLocations:function(t,e){return{uContrast:t.getUniformLocation(e,\"uContrast\")}},sendUniformData:function(t,e){t.uniform1f(e.uContrast,this.contrast)}}),e.Image.filters.Contrast.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Saturation=r(i.BaseFilter,{type:\"Saturation\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uSaturation;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nfloat rgMax = max(color.r, color.g);\\nfloat rgbMax = max(rgMax, color.b);\\ncolor.r += rgbMax != color.r ? (rgbMax - color.r) * uSaturation : 0.00;\\ncolor.g += rgbMax != color.g ? (rgbMax - color.g) * uSaturation : 0.00;\\ncolor.b += rgbMax != color.b ? (rgbMax - color.b) * uSaturation : 0.00;\\ngl_FragColor = color;\\n}\",saturation:0,mainParameter:\"saturation\",applyTo2d:function(t){if(0!==this.saturation){var e,i,r=t.imageData.data,n=r.length,s=-this.saturation;for(e=0;e<n;e+=4)i=Math.max(r[e],r[e+1],r[e+2]),r[e]+=i!==r[e]?(i-r[e])*s:0,r[e+1]+=i!==r[e+1]?(i-r[e+1])*s:0,r[e+2]+=i!==r[e+2]?(i-r[e+2])*s:0}},getUniformLocations:function(t,e){return{uSaturation:t.getUniformLocation(e,\"uSaturation\")}},sendUniformData:function(t,e){t.uniform1f(e.uSaturation,-this.saturation)}}),e.Image.filters.Saturation.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Vibrance=r(i.BaseFilter,{type:\"Vibrance\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform float uVibrance;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nfloat max = max(color.r, max(color.g, color.b));\\nfloat avg = (color.r + color.g + color.b) / 3.0;\\nfloat amt = (abs(max - avg) * 2.0) * uVibrance;\\ncolor.r += max != color.r ? (max - color.r) * amt : 0.00;\\ncolor.g += max != color.g ? (max - color.g) * amt : 0.00;\\ncolor.b += max != color.b ? (max - color.b) * amt : 0.00;\\ngl_FragColor = color;\\n}\",vibrance:0,mainParameter:\"vibrance\",applyTo2d:function(t){if(0!==this.vibrance){var e,i,r,n,s=t.imageData.data,o=s.length,a=-this.vibrance;for(e=0;e<o;e+=4)i=Math.max(s[e],s[e+1],s[e+2]),r=(s[e]+s[e+1]+s[e+2])/3,n=2*Math.abs(i-r)/255*a,s[e]+=i!==s[e]?(i-s[e])*n:0,s[e+1]+=i!==s[e+1]?(i-s[e+1])*n:0,s[e+2]+=i!==s[e+2]?(i-s[e+2])*n:0}},getUniformLocations:function(t,e){return{uVibrance:t.getUniformLocation(e,\"uVibrance\")}},sendUniformData:function(t,e){t.uniform1f(e.uVibrance,-this.vibrance)}}),e.Image.filters.Vibrance.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Blur=r(i.BaseFilter,{type:\"Blur\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform vec2 uDelta;\\nvarying vec2 vTexCoord;\\nconst float nSamples = 15.0;\\nvec3 v3offset = vec3(12.9898, 78.233, 151.7182);\\nfloat random(vec3 scale) {\\nreturn fract(sin(dot(gl_FragCoord.xyz, scale)) * 43758.5453);\\n}\\nvoid main() {\\nvec4 color = vec4(0.0);\\nfloat total = 0.0;\\nfloat offset = random(v3offset);\\nfor (float t = -nSamples; t <= nSamples; t++) {\\nfloat percent = (t + offset - 0.5) / nSamples;\\nfloat weight = 1.0 - abs(percent);\\ncolor += texture2D(uTexture, vTexCoord + uDelta * percent) * weight;\\ntotal += weight;\\n}\\ngl_FragColor = color / total;\\n}\",blur:0,mainParameter:\"blur\",applyTo:function(t){t.webgl?(this.aspectRatio=t.sourceWidth/t.sourceHeight,t.passes++,this._setupFrameBuffer(t),this.horizontal=!0,this.applyToWebGL(t),this._swapTextures(t),this._setupFrameBuffer(t),this.horizontal=!1,this.applyToWebGL(t),this._swapTextures(t)):this.applyTo2d(t)},applyTo2d:function(t){t.imageData=this.simpleBlur(t)},simpleBlur:function(t){var i,r,n=t.filterBackend.resources,s=t.imageData.width,o=t.imageData.height;n.blurLayer1||(n.blurLayer1=e.util.createCanvasElement(),n.blurLayer2=e.util.createCanvasElement()),i=n.blurLayer1,r=n.blurLayer2,i.width===s&&i.height===o||(r.width=i.width=s,r.height=i.height=o);var a,l,h,c,u=i.getContext(\"2d\"),p=r.getContext(\"2d\"),f=15,d=.03*this.blur;for(u.putImageData(t.imageData,0,0),p.clearRect(0,0,s,o),c=-15;c<=f;c++)h=d*(l=c/f)*s+(a=(Math.random()-.5)/4),p.globalAlpha=1-Math.abs(l),p.drawImage(i,h,a),u.drawImage(r,0,0),p.globalAlpha=1,p.clearRect(0,0,r.width,r.height);for(c=-15;c<=f;c++)h=d*(l=c/f)*o+(a=(Math.random()-.5)/4),p.globalAlpha=1-Math.abs(l),p.drawImage(i,a,h),u.drawImage(r,0,0),p.globalAlpha=1,p.clearRect(0,0,r.width,r.height);t.ctx.drawImage(i,0,0);var g=t.ctx.getImageData(0,0,i.width,i.height);return u.globalAlpha=1,u.clearRect(0,0,i.width,i.height),g},getUniformLocations:function(t,e){return{delta:t.getUniformLocation(e,\"uDelta\")}},sendUniformData:function(t,e){var i=this.chooseRightDelta();t.uniform2fv(e.delta,i)},chooseRightDelta:function(){var t,e=1,i=[0,0];return this.horizontal?this.aspectRatio>1&&(e=1/this.aspectRatio):this.aspectRatio<1&&(e=this.aspectRatio),t=e*this.blur*.12,this.horizontal?i[0]=t:i[1]=t,i}}),i.Blur.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Gamma=r(i.BaseFilter,{type:\"Gamma\",fragmentSource:\"precision highp float;\\nuniform sampler2D uTexture;\\nuniform vec3 uGamma;\\nvarying vec2 vTexCoord;\\nvoid main() {\\nvec4 color = texture2D(uTexture, vTexCoord);\\nvec3 correction = (1.0 / uGamma);\\ncolor.r = pow(color.r, correction.r);\\ncolor.g = pow(color.g, correction.g);\\ncolor.b = pow(color.b, correction.b);\\ngl_FragColor = color;\\ngl_FragColor.rgb *= color.a;\\n}\",gamma:[1,1,1],mainParameter:\"gamma\",initialize:function(t){this.gamma=[1,1,1],i.BaseFilter.prototype.initialize.call(this,t)},applyTo2d:function(t){var e,i=t.imageData.data,r=this.gamma,n=i.length,s=1/r[0],o=1/r[1],a=1/r[2];for(this.rVals||(this.rVals=new Uint8Array(256),this.gVals=new Uint8Array(256),this.bVals=new Uint8Array(256)),e=0,n=256;e<n;e++)this.rVals[e]=255*Math.pow(e/255,s),this.gVals[e]=255*Math.pow(e/255,o),this.bVals[e]=255*Math.pow(e/255,a);for(e=0,n=i.length;e<n;e+=4)i[e]=this.rVals[i[e]],i[e+1]=this.gVals[i[e+1]],i[e+2]=this.bVals[i[e+2]]},getUniformLocations:function(t,e){return{uGamma:t.getUniformLocation(e,\"uGamma\")}},sendUniformData:function(t,e){t.uniform3fv(e.uGamma,this.gamma)}}),e.Image.filters.Gamma.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.Composed=r(i.BaseFilter,{type:\"Composed\",subFilters:[],initialize:function(t){this.callSuper(\"initialize\",t),this.subFilters=this.subFilters.slice(0)},applyTo:function(t){t.passes+=this.subFilters.length-1,this.subFilters.forEach((function(e){e.applyTo(t)}))},toObject:function(){return e.util.object.extend(this.callSuper(\"toObject\"),{subFilters:this.subFilters.map((function(t){return t.toObject()}))})},isNeutralState:function(){return!this.subFilters.some((function(t){return!t.isNeutralState()}))}}),e.Image.filters.Composed.fromObject=function(t,i){var r=(t.subFilters||[]).map((function(t){return new e.Image.filters[t.type](t)})),n=new e.Image.filters.Composed({subFilters:r});return i&&i(n),n}}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.Image.filters,r=e.util.createClass;i.HueRotation=r(i.ColorMatrix,{type:\"HueRotation\",rotation:0,mainParameter:\"rotation\",calculateMatrix:function(){var t=this.rotation*Math.PI,i=e.util.cos(t),r=e.util.sin(t),n=1/3,s=Math.sqrt(n)*r,o=1-i;this.matrix=[1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0],this.matrix[0]=i+o/3,this.matrix[1]=n*o-s,this.matrix[2]=n*o+s,this.matrix[5]=n*o+s,this.matrix[6]=i+n*o,this.matrix[7]=n*o-s,this.matrix[10]=n*o-s,this.matrix[11]=n*o+s,this.matrix[12]=i+n*o},isNeutralState:function(t){return this.calculateMatrix(),i.BaseFilter.prototype.isNeutralState.call(this,t)},applyTo:function(t){this.calculateMatrix(),i.BaseFilter.prototype.applyTo.call(this,t)}}),e.Image.filters.HueRotation.fromObject=e.Image.filters.BaseFilter.fromObject}(t.exports),function(t){\"use strict\";var e=t.fabric||(t.fabric={}),i=e.util.object.clone;if(e.Text)e.warn(\"fabric.Text is already defined\");else{var r=\"fontFamily fontWeight fontSize text underline overline linethrough textAlign fontStyle lineHeight textBackgroundColor charSpacing styles direction path pathStartOffset pathSide pathAlign\".split(\" \");e.Text=e.util.createClass(e.Object,{_dimensionAffectingProps:[\"fontSize\",\"fontWeight\",\"fontFamily\",\"fontStyle\",\"lineHeight\",\"text\",\"charSpacing\",\"textAlign\",\"styles\",\"path\",\"pathStartOffset\",\"pathSide\",\"pathAlign\"],_reNewline:/\\r?\\n/,_reSpacesAndTabs:/[ \\t\\r]/g,_reSpaceAndTab:/[ \\t\\r]/,_reWords:/\\S+/g,type:\"text\",fontSize:40,fontWeight:\"normal\",fontFamily:\"Times New Roman\",underline:!1,overline:!1,linethrough:!1,textAlign:\"left\",fontStyle:\"normal\",lineHeight:1.16,superscript:{size:.6,baseline:-.35},subscript:{size:.6,baseline:.11},textBackgroundColor:\"\",stateProperties:e.Object.prototype.stateProperties.concat(r),cacheProperties:e.Object.prototype.cacheProperties.concat(r),stroke:null,shadow:null,path:null,pathStartOffset:0,pathSide:\"left\",pathAlign:\"baseline\",_fontSizeFraction:.222,offsets:{underline:.1,linethrough:-.315,overline:-.88},_fontSizeMult:1.13,charSpacing:0,styles:null,_measuringContext:null,deltaY:0,direction:\"ltr\",_styleProperties:[\"stroke\",\"strokeWidth\",\"fill\",\"fontFamily\",\"fontSize\",\"fontWeight\",\"fontStyle\",\"underline\",\"overline\",\"linethrough\",\"deltaY\",\"textBackgroundColor\"],__charBounds:[],CACHE_FONT_SIZE:400,MIN_TEXT_WIDTH:2,initialize:function(t,e){this.styles=e&&e.styles||{},this.text=t,this.__skipDimension=!0,this.callSuper(\"initialize\",e),this.path&&this.setPathInfo(),this.__skipDimension=!1,this.initDimensions(),this.setCoords(),this.setupState({propertySet:\"_dimensionAffectingProps\"})},setPathInfo:function(){var t=this.path;t&&(t.segmentsInfo=e.util.getPathSegmentsInfo(t.path))},getMeasuringContext:function(){return e._measuringContext||(e._measuringContext=this.canvas&&this.canvas.contextCache||e.util.createCanvasElement().getContext(\"2d\")),e._measuringContext},_splitText:function(){var t=this._splitTextIntoLines(this.text);return this.textLines=t.lines,this._textLines=t.graphemeLines,this._unwrappedTextLines=t._unwrappedLines,this._text=t.graphemeText,t},initDimensions:function(){this.__skipDimension||(this._splitText(),this._clearCache(),this.path?(this.width=this.path.width,this.height=this.path.height):(this.width=this.calcTextWidth()||this.cursorWidth||this.MIN_TEXT_WIDTH,this.height=this.calcTextHeight()),-1!==this.textAlign.indexOf(\"justify\")&&this.enlargeSpaces(),this.saveState({propertySet:\"_dimensionAffectingProps\"}))},enlargeSpaces:function(){for(var t,e,i,r,n,s,o,a=0,l=this._textLines.length;a<l;a++)if((\"justify\"===this.textAlign||a!==l-1&&!this.isEndOfWrapping(a))&&(r=0,n=this._textLines[a],(e=this.getLineWidth(a))<this.width&&(o=this.textLines[a].match(this._reSpacesAndTabs)))){i=o.length,t=(this.width-e)/i;for(var h=0,c=n.length;h<=c;h++)s=this.__charBounds[a][h],this._reSpaceAndTab.test(n[h])?(s.width+=t,s.kernedWidth+=t,s.left+=r,r+=t):s.left+=r}},isEndOfWrapping:function(t){return t===this._textLines.length-1},missingNewlineOffset:function(){return 1},toString:function(){return\"#<fabric.Text (\"+this.complexity()+'): { \"text\": \"'+this.text+'\", \"fontFamily\": \"'+this.fontFamily+'\" }>'},_getCacheCanvasDimensions:function(){var t=this.callSuper(\"_getCacheCanvasDimensions\"),e=this.fontSize;return t.width+=e*t.zoomX,t.height+=e*t.zoomY,t},_render:function(t){var e=this.path;e&&!e.isNotVisible()&&e._render(t),this._setTextStyles(t),this._renderTextLinesBackground(t),this._renderTextDecoration(t,\"underline\"),this._renderText(t),this._renderTextDecoration(t,\"overline\"),this._renderTextDecoration(t,\"linethrough\")},_renderText:function(t){\"stroke\"===this.paintFirst?(this._renderTextStroke(t),this._renderTextFill(t)):(this._renderTextFill(t),this._renderTextStroke(t))},_setTextStyles:function(t,e,i){if(t.textBaseline=\"alphabetical\",this.path)switch(this.pathAlign){case\"center\":t.textBaseline=\"middle\";break;case\"ascender\":t.textBaseline=\"top\";break;case\"descender\":t.textBaseline=\"bottom\"}t.font=this._getFontDeclaration(e,i)},calcTextWidth:function(){for(var t=this.getLineWidth(0),e=1,i=this._textLines.length;e<i;e++){var r=this.getLineWidth(e);r>t&&(t=r)}return t},_renderTextLine:function(t,e,i,r,n,s){this._renderChars(t,e,i,r,n,s)},_renderTextLinesBackground:function(t){if(this.textBackgroundColor||this.styleHas(\"textBackgroundColor\")){for(var e,i,r,n,s,o,a,l=t.fillStyle,h=this._getLeftOffset(),c=this._getTopOffset(),u=0,p=0,f=this.path,d=0,g=this._textLines.length;d<g;d++)if(e=this.getHeightOfLine(d),this.textBackgroundColor||this.styleHas(\"textBackgroundColor\",d)){r=this._textLines[d],i=this._getLineLeftOffset(d),p=0,u=0,n=this.getValueOfPropertyAt(d,0,\"textBackgroundColor\");for(var m=0,v=r.length;m<v;m++)s=this.__charBounds[d][m],o=this.getValueOfPropertyAt(d,m,\"textBackgroundColor\"),f?(t.save(),t.translate(s.renderLeft,s.renderTop),t.rotate(s.angle),t.fillStyle=o,o&&t.fillRect(-s.width/2,-e/this.lineHeight*(1-this._fontSizeFraction),s.width,e/this.lineHeight),t.restore()):o!==n?(a=h+i+u,\"rtl\"===this.direction&&(a=this.width-a-p),t.fillStyle=n,n&&t.fillRect(a,c,p,e/this.lineHeight),u=s.left,p=s.width,n=o):p+=s.kernedWidth;o&&!f&&(a=h+i+u,\"rtl\"===this.direction&&(a=this.width-a-p),t.fillStyle=o,t.fillRect(a,c,p,e/this.lineHeight)),c+=e}else c+=e;t.fillStyle=l,this._removeShadow(t)}},getFontCache:function(t){var i=t.fontFamily.toLowerCase();e.charWidthsCache[i]||(e.charWidthsCache[i]={});var r=e.charWidthsCache[i],n=t.fontStyle.toLowerCase()+\"_\"+(t.fontWeight+\"\").toLowerCase();return r[n]||(r[n]={}),r[n]},_measureChar:function(t,e,i,r){var n,s,o,a,l=this.getFontCache(e),h=i+t,c=this._getFontDeclaration(e)===this._getFontDeclaration(r),u=e.fontSize/this.CACHE_FONT_SIZE;if(i&&void 0!==l[i]&&(o=l[i]),void 0!==l[t]&&(a=n=l[t]),c&&void 0!==l[h]&&(a=(s=l[h])-o),void 0===n||void 0===o||void 0===s){var p=this.getMeasuringContext();this._setTextStyles(p,e,!0)}return void 0===n&&(a=n=p.measureText(t).width,l[t]=n),void 0===o&&c&&i&&(o=p.measureText(i).width,l[i]=o),c&&void 0===s&&(s=p.measureText(h).width,l[h]=s,a=s-o),{width:n*u,kernedWidth:a*u}},getHeightOfChar:function(t,e){return this.getValueOfPropertyAt(t,e,\"fontSize\")},measureLine:function(t){var e=this._measureLine(t);return 0!==this.charSpacing&&(e.width-=this._getWidthOfCharSpacing()),e.width<0&&(e.width=0),e},_measureLine:function(t){var i,r,n,s,o,a,l=0,h=this._textLines[t],c=new Array(h.length),u=0,p=this.path,f=\"right\"===this.pathSide;for(this.__charBounds[t]=c,i=0;i<h.length;i++)r=h[i],s=this._getGraphemeBox(r,t,i,n),c[i]=s,l+=s.kernedWidth,n=r;if(c[i]={left:s?s.left+s.width:0,width:0,kernedWidth:0,height:this.fontSize},p){switch(a=p.segmentsInfo[p.segmentsInfo.length-1].length,(o=e.util.getPointOnPath(p.path,0,p.segmentsInfo)).x+=p.pathOffset.x,o.y+=p.pathOffset.y,this.textAlign){case\"left\":u=f?a-l:0;break;case\"center\":u=(a-l)/2;break;case\"right\":u=f?0:a-l}for(u+=this.pathStartOffset*(f?-1:1),i=f?h.length-1:0;f?i>=0:i<h.length;f?i--:i++)s=c[i],u>a?u%=a:u<0&&(u+=a),this._setGraphemeOnPath(u,s,o),u+=s.kernedWidth}return{width:l,numOfSpaces:0}},_setGraphemeOnPath:function(t,i,r){var n=t+i.kernedWidth/2,s=this.path,o=e.util.getPointOnPath(s.path,n,s.segmentsInfo);i.renderLeft=o.x-r.x,i.renderTop=o.y-r.y,i.angle=o.angle+(\"right\"===this.pathSide?Math.PI:0)},_getGraphemeBox:function(t,e,i,r,n){var s,o=this.getCompleteStyleDeclaration(e,i),a=r?this.getCompleteStyleDeclaration(e,i-1):{},l=this._measureChar(t,o,r,a),h=l.kernedWidth,c=l.width;0!==this.charSpacing&&(c+=s=this._getWidthOfCharSpacing(),h+=s);var u={width:c,left:0,height:o.fontSize,kernedWidth:h,deltaY:o.deltaY};if(i>0&&!n){var p=this.__charBounds[e][i-1];u.left=p.left+p.width+l.kernedWidth-l.width}return u},getHeightOfLine:function(t){if(this.__lineHeights[t])return this.__lineHeights[t];for(var e=this._textLines[t],i=this.getHeightOfChar(t,0),r=1,n=e.length;r<n;r++)i=Math.max(this.getHeightOfChar(t,r),i);return this.__lineHeights[t]=i*this.lineHeight*this._fontSizeMult},calcTextHeight:function(){for(var t,e=0,i=0,r=this._textLines.length;i<r;i++)t=this.getHeightOfLine(i),e+=i===r-1?t/this.lineHeight:t;return e},_getLeftOffset:function(){return\"ltr\"===this.direction?-this.width/2:this.width/2},_getTopOffset:function(){return-this.height/2},_renderTextCommon:function(t,e){t.save();for(var i=0,r=this._getLeftOffset(),n=this._getTopOffset(),s=0,o=this._textLines.length;s<o;s++){var a=this.getHeightOfLine(s),l=a/this.lineHeight,h=this._getLineLeftOffset(s);this._renderTextLine(e,t,this._textLines[s],r+h,n+i+l,s),i+=a}t.restore()},_renderTextFill:function(t){(this.fill||this.styleHas(\"fill\"))&&this._renderTextCommon(t,\"fillText\")},_renderTextStroke:function(t){(this.stroke&&0!==this.strokeWidth||!this.isEmptyStyles())&&(this.shadow&&!this.shadow.affectStroke&&this._removeShadow(t),t.save(),this._setLineDash(t,this.strokeDashArray),t.beginPath(),this._renderTextCommon(t,\"strokeText\"),t.closePath(),t.restore())},_renderChars:function(t,i,r,n,s,o){var a,l,h,c,u,p=this.getHeightOfLine(o),f=-1!==this.textAlign.indexOf(\"justify\"),d=\"\",g=0,m=this.path,v=!f&&0===this.charSpacing&&this.isEmptyStyles(o)&&!m,y=\"ltr\"===this.direction,x=\"ltr\"===this.direction?1:-1,_=i.canvas.getAttribute(\"dir\");if(i.save(),_!==this.direction&&(i.canvas.setAttribute(\"dir\",y?\"ltr\":\"rtl\"),i.direction=y?\"ltr\":\"rtl\",i.textAlign=y?\"left\":\"right\"),s-=p*this._fontSizeFraction/this.lineHeight,v)return this._renderChar(t,i,o,0,r.join(\"\"),n,s,p),void i.restore();for(var b=0,C=r.length-1;b<=C;b++)c=b===C||this.charSpacing||m,d+=r[b],h=this.__charBounds[o][b],0===g?(n+=x*(h.kernedWidth-h.width),g+=h.width):g+=h.kernedWidth,f&&!c&&this._reSpaceAndTab.test(r[b])&&(c=!0),c||(a=a||this.getCompleteStyleDeclaration(o,b),l=this.getCompleteStyleDeclaration(o,b+1),c=e.util.hasStyleChanged(a,l,!1)),c&&(m?(i.save(),i.translate(h.renderLeft,h.renderTop),i.rotate(h.angle),this._renderChar(t,i,o,b,d,-g/2,0,p),i.restore()):(u=n,this._renderChar(t,i,o,b,d,u,s,p)),d=\"\",a=l,n+=x*g,g=0);i.restore()},_applyPatternGradientTransformText:function(t){var i,r=e.util.createCanvasElement(),n=this.width+this.strokeWidth,s=this.height+this.strokeWidth;return r.width=n,r.height=s,(i=r.getContext(\"2d\")).beginPath(),i.moveTo(0,0),i.lineTo(n,0),i.lineTo(n,s),i.lineTo(0,s),i.closePath(),i.translate(n/2,s/2),i.fillStyle=t.toLive(i),this._applyPatternGradientTransform(i,t),i.fill(),i.createPattern(r,\"no-repeat\")},handleFiller:function(t,e,i){var r,n;return i.toLive?\"percentage\"===i.gradientUnits||i.gradientTransform||i.patternTransform?(r=-this.width/2,n=-this.height/2,t.translate(r,n),t[e]=this._applyPatternGradientTransformText(i),{offsetX:r,offsetY:n}):(t[e]=i.toLive(t,this),this._applyPatternGradientTransform(t,i)):(t[e]=i,{offsetX:0,offsetY:0})},_setStrokeStyles:function(t,e){return t.lineWidth=e.strokeWidth,t.lineCap=this.strokeLineCap,t.lineDashOffset=this.strokeDashOffset,t.lineJoin=this.strokeLineJoin,t.miterLimit=this.strokeMiterLimit,this.handleFiller(t,\"strokeStyle\",e.stroke)},_setFillStyles:function(t,e){return this.handleFiller(t,\"fillStyle\",e.fill)},_renderChar:function(t,e,i,r,n,s,o){var a,l,h=this._getStyleDeclaration(i,r),c=this.getCompleteStyleDeclaration(i,r),u=\"fillText\"===t&&c.fill,p=\"strokeText\"===t&&c.stroke&&c.strokeWidth;(p||u)&&(e.save(),u&&(a=this._setFillStyles(e,c)),p&&(l=this._setStrokeStyles(e,c)),e.font=this._getFontDeclaration(c),h&&h.textBackgroundColor&&this._removeShadow(e),h&&h.deltaY&&(o+=h.deltaY),u&&e.fillText(n,s-a.offsetX,o-a.offsetY),p&&e.strokeText(n,s-l.offsetX,o-l.offsetY),e.restore())},setSuperscript:function(t,e){return this._setScript(t,e,this.superscript)},setSubscript:function(t,e){return this._setScript(t,e,this.subscript)},_setScript:function(t,e,i){var r=this.get2DCursorLocation(t,!0),n=this.getValueOfPropertyAt(r.lineIndex,r.charIndex,\"fontSize\"),s=this.getValueOfPropertyAt(r.lineIndex,r.charIndex,\"deltaY\"),o={fontSize:n*i.size,deltaY:s+n*i.baseline};return this.setSelectionStyles(o,t,e),this},_getLineLeftOffset:function(t){var e=this.getLineWidth(t),i=this.width-e,r=this.textAlign,n=this.direction,s=0,o=this.isEndOfWrapping(t);return\"justify\"===r||\"justify-center\"===r&&!o||\"justify-right\"===r&&!o||\"justify-left\"===r&&!o?0:(\"center\"===r&&(s=i/2),\"right\"===r&&(s=i),\"justify-center\"===r&&(s=i/2),\"justify-right\"===r&&(s=i),\"rtl\"===n&&(s-=i),s)},_clearCache:function(){this.__lineWidths=[],this.__lineHeights=[],this.__charBounds=[]},_shouldClearDimensionCache:function(){var t=this._forceClearCache;return t||(t=this.hasStateChanged(\"_dimensionAffectingProps\")),t&&(this.dirty=!0,this._forceClearCache=!1),t},getLineWidth:function(t){if(void 0!==this.__lineWidths[t])return this.__lineWidths[t];var e=this.measureLine(t).width;return this.__lineWidths[t]=e,e},_getWidthOfCharSpacing:function(){return 0!==this.charSpacing?this.fontSize*this.charSpacing/1e3:0},getValueOfPropertyAt:function(t,e,i){var r=this._getStyleDeclaration(t,e);return r&&void 0!==r[i]?r[i]:this[i]},_renderTextDecoration:function(t,e){if(this[e]||this.styleHas(e)){for(var i,r,n,s,o,a,l,h,c,u,p,f,d,g,m,v,y=this._getLeftOffset(),x=this._getTopOffset(),_=this.path,b=this._getWidthOfCharSpacing(),C=this.offsets[e],S=0,w=this._textLines.length;S<w;S++)if(i=this.getHeightOfLine(S),this[e]||this.styleHas(e,S)){l=this._textLines[S],g=i/this.lineHeight,s=this._getLineLeftOffset(S),u=0,p=0,h=this.getValueOfPropertyAt(S,0,e),v=this.getValueOfPropertyAt(S,0,\"fill\"),c=x+g*(1-this._fontSizeFraction),r=this.getHeightOfChar(S,0),o=this.getValueOfPropertyAt(S,0,\"deltaY\");for(var D=0,k=l.length;D<k;D++)if(f=this.__charBounds[S][D],d=this.getValueOfPropertyAt(S,D,e),m=this.getValueOfPropertyAt(S,D,\"fill\"),n=this.getHeightOfChar(S,D),a=this.getValueOfPropertyAt(S,D,\"deltaY\"),_&&d&&m)t.save(),t.fillStyle=v,t.translate(f.renderLeft,f.renderTop),t.rotate(f.angle),t.fillRect(-f.kernedWidth/2,C*n+a,f.kernedWidth,this.fontSize/15),t.restore();else if((d!==h||m!==v||n!==r||a!==o)&&p>0){var T=y+s+u;\"rtl\"===this.direction&&(T=this.width-T-p),h&&v&&(t.fillStyle=v,t.fillRect(T,c+C*r+o,p,this.fontSize/15)),u=f.left,p=f.width,h=d,v=m,r=n,o=a}else p+=f.kernedWidth;T=y+s+u;\"rtl\"===this.direction&&(T=this.width-T-p),t.fillStyle=m,d&&m&&t.fillRect(T,c+C*r+o,p-b,this.fontSize/15),x+=i}else x+=i;this._removeShadow(t)}},_getFontDeclaration:function(t,i){var r=t||this,n=this.fontFamily,s=e.Text.genericFonts.indexOf(n.toLowerCase())>-1,o=void 0===n||n.indexOf(\"'\")>-1||n.indexOf(\",\")>-1||n.indexOf('\"')>-1||s?r.fontFamily:'\"'+r.fontFamily+'\"';return[e.isLikelyNode?r.fontWeight:r.fontStyle,e.isLikelyNode?r.fontStyle:r.fontWeight,i?this.CACHE_FONT_SIZE+\"px\":r.fontSize+\"px\",o].join(\" \")},render:function(t){this.visible&&(this.canvas&&this.canvas.skipOffscreen&&!this.group&&!this.isOnScreen()||(this._shouldClearDimensionCache()&&this.initDimensions(),this.callSuper(\"render\",t)))},_splitTextIntoLines:function(t){for(var i=t.split(this._reNewline),r=new Array(i.length),n=[\"\\n\"],s=[],o=0;o<i.length;o++)r[o]=e.util.string.graphemeSplit(i[o]),s=s.concat(r[o],n);return s.pop(),{_unwrappedLines:r,lines:i,graphemeText:s,graphemeLines:r}},toObject:function(t){var i=r.concat(t),n=this.callSuper(\"toObject\",i);return n.styles=e.util.stylesToArray(this.styles,this.text),n.path&&(n.path=this.path.toObject()),n},set:function(t,e){this.callSuper(\"set\",t,e);var i=!1,r=!1;if(\"object\"==typeof t)for(var n in t)\"path\"===n&&this.setPathInfo(),i=i||-1!==this._dimensionAffectingProps.indexOf(n),r=r||\"path\"===n;else i=-1!==this._dimensionAffectingProps.indexOf(t),r=\"path\"===t;return r&&this.setPathInfo(),i&&(this.initDimensions(),this.setCoords()),this},complexity:function(){return 1}}),e.Text.ATTRIBUTE_NAMES=e.SHARED_ATTRIBUTES.concat(\"x y dx dy font-family font-style font-weight font-size letter-spacing text-decoration text-anchor\".split(\" \")),e.Text.DEFAULT_SVG_FONT_SIZE=16,e.Text.fromElement=function(t,r,n){if(!t)return r(null);var s=e.parseAttributes(t,e.Text.ATTRIBUTE_NAMES),o=s.textAnchor||\"left\";if((n=e.util.object.extend(n?i(n):{},s)).top=n.top||0,n.left=n.left||0,s.textDecoration){var a=s.textDecoration;-1!==a.indexOf(\"underline\")&&(n.underline=!0),-1!==a.indexOf(\"overline\")&&(n.overline=!0),-1!==a.indexOf(\"line-through\")&&(n.linethrough=!0),delete n.textDecoration}\"dx\"in s&&(n.left+=s.dx),\"dy\"in s&&(n.top+=s.dy),\"fontSize\"in n||(n.fontSize=e.Text.DEFAULT_SVG_FONT_SIZE);var l=\"\";\"textContent\"in t?l=t.textContent:\"firstChild\"in t&&null!==t.firstChild&&\"data\"in t.firstChild&&null!==t.firstChild.data&&(l=t.firstChild.data),l=l.replace(/^\\s+|\\s+$|\\n+/g,\"\").replace(/\\s+/g,\" \");var h=n.strokeWidth;n.strokeWidth=0;var c=new e.Text(l,n),u=c.getScaledHeight()/c.height,p=((c.height+c.strokeWidth)*c.lineHeight-c.height)*u,f=c.getScaledHeight()+p,d=0;\"center\"===o&&(d=c.getScaledWidth()/2),\"right\"===o&&(d=c.getScaledWidth()),c.set({left:c.left-d,top:c.top-(f-c.fontSize*(.07+c._fontSizeFraction))/c.lineHeight,strokeWidth:void 0!==h?h:1}),r(c)},e.Text.fromObject=function(t,r){var n=i(t),s=t.path;return delete n.path,e.Object._fromObject(\"Text\",n,(function(i){i.styles=e.util.stylesFromArray(t.styles,t.text),s?e.Object._fromObject(\"Path\",s,(function(t){i.set(\"path\",t),r(i)}),\"path\"):r(i)}),\"text\")},e.Text.genericFonts=[\"sans-serif\",\"serif\",\"cursive\",\"fantasy\",\"monospace\"],e.util.createAccessors&&e.util.createAccessors(e.Text)}}(t.exports),x.util.object.extend(x.Text.prototype,{isEmptyStyles:function(t){if(!this.styles)return!0;if(void 0!==t&&!this.styles[t])return!0;var e=void 0===t?this.styles:{line:this.styles[t]};for(var i in e)for(var r in e[i])for(var n in e[i][r])return!1;return!0},styleHas:function(t,e){if(!this.styles||!t||\"\"===t)return!1;if(void 0!==e&&!this.styles[e])return!1;var i=void 0===e?this.styles:{0:this.styles[e]};for(var r in i)for(var n in i[r])if(void 0!==i[r][n][t])return!0;return!1},cleanStyle:function(t){if(!this.styles||!t||\"\"===t)return!1;var e,i,r=this.styles,n=0,s=!0,o=0;for(var a in r){for(var l in e=0,r[a]){var h;n++,(h=r[a][l]).hasOwnProperty(t)?(i?h[t]!==i&&(s=!1):i=h[t],h[t]===this[t]&&delete h[t]):s=!1,0!==Object.keys(h).length?e++:delete r[a][l]}0===e&&delete r[a]}for(var c=0;c<this._textLines.length;c++)o+=this._textLines[c].length;s&&n===o&&(this[t]=i,this.removeStyle(t))},removeStyle:function(t){if(this.styles&&t&&\"\"!==t){var e,i,r,n=this.styles;for(i in n){for(r in e=n[i])delete e[r][t],0===Object.keys(e[r]).length&&delete e[r];0===Object.keys(e).length&&delete n[i]}}},_extendStyles:function(t,e){var i=this.get2DCursorLocation(t);this._getLineStyle(i.lineIndex)||this._setLineStyle(i.lineIndex),this._getStyleDeclaration(i.lineIndex,i.charIndex)||this._setStyleDeclaration(i.lineIndex,i.charIndex,{}),x.util.object.extend(this._getStyleDeclaration(i.lineIndex,i.charIndex),e)},get2DCursorLocation:function(t,e){void 0===t&&(t=this.selectionStart);for(var i=e?this._unwrappedTextLines:this._textLines,r=i.length,n=0;n<r;n++){if(t<=i[n].length)return{lineIndex:n,charIndex:t};t-=i[n].length+this.missingNewlineOffset(n)}return{lineIndex:n-1,charIndex:i[n-1].length<t?i[n-1].length:t}},getSelectionStyles:function(t,e,i){void 0===t&&(t=this.selectionStart||0),void 0===e&&(e=this.selectionEnd||t);for(var r=[],n=t;n<e;n++)r.push(this.getStyleAtPosition(n,i));return r},getStyleAtPosition:function(t,e){var i=this.get2DCursorLocation(t);return(e?this.getCompleteStyleDeclaration(i.lineIndex,i.charIndex):this._getStyleDeclaration(i.lineIndex,i.charIndex))||{}},setSelectionStyles:function(t,e,i){void 0===e&&(e=this.selectionStart||0),void 0===i&&(i=this.selectionEnd||e);for(var r=e;r<i;r++)this._extendStyles(r,t);return this._forceClearCache=!0,this},_getStyleDeclaration:function(t,e){var i=this.styles&&this.styles[t];return i?i[e]:null},getCompleteStyleDeclaration:function(t,e){for(var i,r=this._getStyleDeclaration(t,e)||{},n={},s=0;s<this._styleProperties.length;s++)n[i=this._styleProperties[s]]=void 0===r[i]?this[i]:r[i];return n},_setStyleDeclaration:function(t,e,i){this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){delete this.styles[t][e]},_getLineStyle:function(t){return!!this.styles[t]},_setLineStyle:function(t){this.styles[t]={}},_deleteLineStyle:function(t){delete this.styles[t]}}),function(){function t(t){t.textDecoration&&(t.textDecoration.indexOf(\"underline\")>-1&&(t.underline=!0),t.textDecoration.indexOf(\"line-through\")>-1&&(t.linethrough=!0),t.textDecoration.indexOf(\"overline\")>-1&&(t.overline=!0),delete t.textDecoration)}x.IText=x.util.createClass(x.Text,x.Observable,{type:\"i-text\",selectionStart:0,selectionEnd:0,selectionColor:\"rgba(17,119,255,0.3)\",isEditing:!1,editable:!0,editingBorderColor:\"rgba(102,153,255,0.25)\",cursorWidth:2,cursorColor:\"\",cursorDelay:1e3,cursorDuration:600,caching:!0,hiddenTextareaContainer:null,_reSpace:/\\s|\\n/,_currentCursorOpacity:0,_selectionDirection:null,_abortCursorAnimation:!1,__widthOfSpace:[],inCompositionMode:!1,initialize:function(t,e){this.callSuper(\"initialize\",t,e),this.initBehavior()},setSelectionStart:function(t){t=Math.max(t,0),this._updateAndFire(\"selectionStart\",t)},setSelectionEnd:function(t){t=Math.min(t,this.text.length),this._updateAndFire(\"selectionEnd\",t)},_updateAndFire:function(t,e){this[t]!==e&&(this._fireSelectionChanged(),this[t]=e),this._updateTextarea()},_fireSelectionChanged:function(){this.fire(\"selection:changed\"),this.canvas&&this.canvas.fire(\"text:selection:changed\",{target:this})},initDimensions:function(){this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this.callSuper(\"initDimensions\")},render:function(t){this.clearContextTop(),this.callSuper(\"render\",t),this.cursorOffsetCache={},this.renderCursorOrSelection()},_render:function(t){this.callSuper(\"_render\",t)},clearContextTop:function(t){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var e=this.canvas.contextTop,i=this.canvas.viewportTransform;e.save(),e.transform(i[0],i[1],i[2],i[3],i[4],i[5]),this.transform(e),this._clearTextArea(e),t||e.restore()}},renderCursorOrSelection:function(){if(this.isEditing&&this.canvas&&this.canvas.contextTop){var t=this._getCursorBoundaries(),e=this.canvas.contextTop;this.clearContextTop(!0),this.selectionStart===this.selectionEnd?this.renderCursor(t,e):this.renderSelection(t,e),e.restore()}},_clearTextArea:function(t){var e=this.width+4,i=this.height+4;t.clearRect(-e/2,-i/2,e,i)},_getCursorBoundaries:function(t){void 0===t&&(t=this.selectionStart);var e=this._getLeftOffset(),i=this._getTopOffset(),r=this._getCursorBoundariesOffsets(t);return{left:e,top:i,leftOffset:r.left,topOffset:r.top}},_getCursorBoundariesOffsets:function(t){if(this.cursorOffsetCache&&\"top\"in this.cursorOffsetCache)return this.cursorOffsetCache;var e,i,r,n,s=0,o=0,a=this.get2DCursorLocation(t);r=a.charIndex,i=a.lineIndex;for(var l=0;l<i;l++)s+=this.getHeightOfLine(l);e=this._getLineLeftOffset(i);var h=this.__charBounds[i][r];return h&&(o=h.left),0!==this.charSpacing&&r===this._textLines[i].length&&(o-=this._getWidthOfCharSpacing()),n={top:s,left:e+(o>0?o:0)},\"rtl\"===this.direction&&(n.left*=-1),this.cursorOffsetCache=n,this.cursorOffsetCache},renderCursor:function(t,e){var i=this.get2DCursorLocation(),r=i.lineIndex,n=i.charIndex>0?i.charIndex-1:0,s=this.getValueOfPropertyAt(r,n,\"fontSize\"),o=this.scaleX*this.canvas.getZoom(),a=this.cursorWidth/o,l=t.topOffset,h=this.getValueOfPropertyAt(r,n,\"deltaY\");l+=(1-this._fontSizeFraction)*this.getHeightOfLine(r)/this.lineHeight-s*(1-this._fontSizeFraction),this.inCompositionMode&&this.renderSelection(t,e),e.fillStyle=this.cursorColor||this.getValueOfPropertyAt(r,n,\"fill\"),e.globalAlpha=this.__isMousedown?1:this._currentCursorOpacity,e.fillRect(t.left+t.leftOffset-a/2,l+t.top+h,a,s)},renderSelection:function(t,e){for(var i=this.inCompositionMode?this.hiddenTextarea.selectionStart:this.selectionStart,r=this.inCompositionMode?this.hiddenTextarea.selectionEnd:this.selectionEnd,n=-1!==this.textAlign.indexOf(\"justify\"),s=this.get2DCursorLocation(i),o=this.get2DCursorLocation(r),a=s.lineIndex,l=o.lineIndex,h=s.charIndex<0?0:s.charIndex,c=o.charIndex<0?0:o.charIndex,u=a;u<=l;u++){var p,f=this._getLineLeftOffset(u)||0,d=this.getHeightOfLine(u),g=0,m=0;if(u===a&&(g=this.__charBounds[a][h].left),u>=a&&u<l)m=n&&!this.isEndOfWrapping(u)?this.width:this.getLineWidth(u)||5;else if(u===l)if(0===c)m=this.__charBounds[l][c].left;else{var v=this._getWidthOfCharSpacing();m=this.__charBounds[l][c-1].left+this.__charBounds[l][c-1].width-v}p=d,(this.lineHeight<1||u===l&&this.lineHeight>1)&&(d/=this.lineHeight);var y=t.left+f+g,x=m-g,_=d,b=0;this.inCompositionMode?(e.fillStyle=this.compositionColor||\"black\",_=1,b=d):e.fillStyle=this.selectionColor,\"rtl\"===this.direction&&(y=this.width-y-x),e.fillRect(y,t.top+t.topOffset+b,x,_),t.topOffset+=p}},getCurrentCharFontSize:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,\"fontSize\")},getCurrentCharColor:function(){var t=this._getCurrentCharIndex();return this.getValueOfPropertyAt(t.l,t.c,\"fill\")},_getCurrentCharIndex:function(){var t=this.get2DCursorLocation(this.selectionStart,!0),e=t.charIndex>0?t.charIndex-1:0;return{l:t.lineIndex,c:e}}}),x.IText.fromObject=function(e,i){var r=x.util.stylesFromArray(e.styles,e.text),n=Object.assign({},e,{styles:r});if(t(n),n.styles)for(var s in n.styles)for(var o in n.styles[s])t(n.styles[s][o]);x.Object._fromObject(\"IText\",n,i,\"text\")}}(),g=x.util.object.clone,x.util.object.extend(x.IText.prototype,{initBehavior:function(){this.initAddedHandler(),this.initRemovedHandler(),this.initCursorSelectionHandlers(),this.initDoubleClickSimulation(),this.mouseMoveHandler=this.mouseMoveHandler.bind(this)},onDeselect:function(){this.isEditing&&this.exitEditing(),this.selected=!1},initAddedHandler:function(){var t=this;this.on(\"added\",(function(){var e=t.canvas;e&&(e._hasITextHandlers||(e._hasITextHandlers=!0,t._initCanvasHandlers(e)),e._iTextInstances=e._iTextInstances||[],e._iTextInstances.push(t))}))},initRemovedHandler:function(){var t=this;this.on(\"removed\",(function(){var e=t.canvas;e&&(e._iTextInstances=e._iTextInstances||[],x.util.removeFromArray(e._iTextInstances,t),0===e._iTextInstances.length&&(e._hasITextHandlers=!1,t._removeCanvasHandlers(e)))}))},_initCanvasHandlers:function(t){t._mouseUpITextHandler=function(){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.__isMousedown=!1}))},t.on(\"mouse:up\",t._mouseUpITextHandler)},_removeCanvasHandlers:function(t){t.off(\"mouse:up\",t._mouseUpITextHandler)},_tick:function(){this._currentTickState=this._animateCursor(this,1,this.cursorDuration,\"_onTickComplete\")},_animateCursor:function(t,e,i,r){var n;return n={isAborted:!1,abort:function(){this.isAborted=!0}},t.animate(\"_currentCursorOpacity\",e,{duration:i,onComplete:function(){n.isAborted||t[r]()},onChange:function(){t.canvas&&t.selectionStart===t.selectionEnd&&t.renderCursorOrSelection()},abort:function(){return n.isAborted}}),n},_onTickComplete:function(){var t=this;this._cursorTimeout1&&clearTimeout(this._cursorTimeout1),this._cursorTimeout1=setTimeout((function(){t._currentTickCompleteState=t._animateCursor(t,0,this.cursorDuration/2,\"_tick\")}),100)},initDelayedCursor:function(t){var e=this,i=t?0:this.cursorDelay;this.abortCursorAnimation(),this._currentCursorOpacity=1,this._cursorTimeout2=setTimeout((function(){e._tick()}),i)},abortCursorAnimation:function(){var t=this._currentTickState||this._currentTickCompleteState,e=this.canvas;this._currentTickState&&this._currentTickState.abort(),this._currentTickCompleteState&&this._currentTickCompleteState.abort(),clearTimeout(this._cursorTimeout1),clearTimeout(this._cursorTimeout2),this._currentCursorOpacity=0,t&&e&&e.clearContext(e.contextTop||e.contextContainer)},selectAll:function(){return this.selectionStart=0,this.selectionEnd=this._text.length,this._fireSelectionChanged(),this._updateTextarea(),this},getSelectedText:function(){return this._text.slice(this.selectionStart,this.selectionEnd).join(\"\")},findWordBoundaryLeft:function(t){var e=0,i=t-1;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i--;for(;/\\S/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findWordBoundaryRight:function(t){var e=0,i=t;if(this._reSpace.test(this._text[i]))for(;this._reSpace.test(this._text[i]);)e++,i++;for(;/\\S/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},findLineBoundaryLeft:function(t){for(var e=0,i=t-1;!/\\n/.test(this._text[i])&&i>-1;)e++,i--;return t-e},findLineBoundaryRight:function(t){for(var e=0,i=t;!/\\n/.test(this._text[i])&&i<this._text.length;)e++,i++;return t+e},searchWordBoundary:function(t,e){for(var i=this._text,r=this._reSpace.test(i[t])?t-1:t,n=i[r],s=x.reNonWord;!s.test(n)&&r>0&&r<i.length;)n=i[r+=e];return s.test(n)&&(r+=1===e?0:1),r},selectWord:function(t){t=t||this.selectionStart;var e=this.searchWordBoundary(t,-1),i=this.searchWordBoundary(t,1);this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()},selectLine:function(t){t=t||this.selectionStart;var e=this.findLineBoundaryLeft(t),i=this.findLineBoundaryRight(t);return this.selectionStart=e,this.selectionEnd=i,this._fireSelectionChanged(),this._updateTextarea(),this},enterEditing:function(t){if(!this.isEditing&&this.editable)return this.canvas&&(this.canvas.calcOffset(),this.exitEditingOnOthers(this.canvas)),this.isEditing=!0,this.initHiddenTextarea(t),this.hiddenTextarea.focus(),this.hiddenTextarea.value=this.text,this._updateTextarea(),this._saveEditingProps(),this._setEditingProps(),this._textBeforeEdit=this.text,this._tick(),this.fire(\"editing:entered\"),this._fireSelectionChanged(),this.canvas?(this.canvas.fire(\"text:editing:entered\",{target:this}),this.initMouseMoveHandler(),this.canvas.requestRenderAll(),this):this},exitEditingOnOthers:function(t){t._iTextInstances&&t._iTextInstances.forEach((function(t){t.selected=!1,t.isEditing&&t.exitEditing()}))},initMouseMoveHandler:function(){this.canvas.on(\"mouse:move\",this.mouseMoveHandler)},mouseMoveHandler:function(t){if(this.__isMousedown&&this.isEditing){document.activeElement!==this.hiddenTextarea&&this.hiddenTextarea.focus();var e=this.getSelectionStartFromPointer(t.e),i=this.selectionStart,r=this.selectionEnd;(e===this.__selectionStartOnMouseDown&&i!==r||i!==e&&r!==e)&&(e>this.__selectionStartOnMouseDown?(this.selectionStart=this.__selectionStartOnMouseDown,this.selectionEnd=e):(this.selectionStart=e,this.selectionEnd=this.__selectionStartOnMouseDown),this.selectionStart===i&&this.selectionEnd===r||(this.restartCursorIfNeeded(),this._fireSelectionChanged(),this._updateTextarea(),this.renderCursorOrSelection()))}},_setEditingProps:function(){this.hoverCursor=\"text\",this.canvas&&(this.canvas.defaultCursor=this.canvas.moveCursor=\"text\"),this.borderColor=this.editingBorderColor,this.hasControls=this.selectable=!1,this.lockMovementX=this.lockMovementY=!0},fromStringToGraphemeSelection:function(t,e,i){var r=i.slice(0,t),n=x.util.string.graphemeSplit(r).length;if(t===e)return{selectionStart:n,selectionEnd:n};var s=i.slice(t,e);return{selectionStart:n,selectionEnd:n+x.util.string.graphemeSplit(s).length}},fromGraphemeToStringSelection:function(t,e,i){var r=i.slice(0,t).join(\"\").length;return t===e?{selectionStart:r,selectionEnd:r}:{selectionStart:r,selectionEnd:r+i.slice(t,e).join(\"\").length}},_updateTextarea:function(){if(this.cursorOffsetCache={},this.hiddenTextarea){if(!this.inCompositionMode){var t=this.fromGraphemeToStringSelection(this.selectionStart,this.selectionEnd,this._text);this.hiddenTextarea.selectionStart=t.selectionStart,this.hiddenTextarea.selectionEnd=t.selectionEnd}this.updateTextareaPosition()}},updateFromTextArea:function(){if(this.hiddenTextarea){this.cursorOffsetCache={},this.text=this.hiddenTextarea.value,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords());var t=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value);this.selectionEnd=this.selectionStart=t.selectionEnd,this.inCompositionMode||(this.selectionStart=t.selectionStart),this.updateTextareaPosition()}},updateTextareaPosition:function(){if(this.selectionStart===this.selectionEnd){var t=this._calcTextareaPosition();this.hiddenTextarea.style.left=t.left,this.hiddenTextarea.style.top=t.top}},_calcTextareaPosition:function(){if(!this.canvas)return{x:1,y:1};var t=this.inCompositionMode?this.compositionStart:this.selectionStart,e=this._getCursorBoundaries(t),i=this.get2DCursorLocation(t),r=i.lineIndex,n=i.charIndex,s=this.getValueOfPropertyAt(r,n,\"fontSize\")*this.lineHeight,o=e.leftOffset,a=this.calcTransformMatrix(),l={x:e.left+o,y:e.top+e.topOffset+s},h=this.canvas.getRetinaScaling(),c=this.canvas.upperCanvasEl,u=c.width/h,p=c.height/h,f=u-s,d=p-s,g=c.clientWidth/u,m=c.clientHeight/p;return l=x.util.transformPoint(l,a),(l=x.util.transformPoint(l,this.canvas.viewportTransform)).x*=g,l.y*=m,l.x<0&&(l.x=0),l.x>f&&(l.x=f),l.y<0&&(l.y=0),l.y>d&&(l.y=d),l.x+=this.canvas._offset.left,l.y+=this.canvas._offset.top,{left:l.x+\"px\",top:l.y+\"px\",fontSize:s+\"px\",charHeight:s}},_saveEditingProps:function(){this._savedProps={hasControls:this.hasControls,borderColor:this.borderColor,lockMovementX:this.lockMovementX,lockMovementY:this.lockMovementY,hoverCursor:this.hoverCursor,selectable:this.selectable,defaultCursor:this.canvas&&this.canvas.defaultCursor,moveCursor:this.canvas&&this.canvas.moveCursor}},_restoreEditingProps:function(){this._savedProps&&(this.hoverCursor=this._savedProps.hoverCursor,this.hasControls=this._savedProps.hasControls,this.borderColor=this._savedProps.borderColor,this.selectable=this._savedProps.selectable,this.lockMovementX=this._savedProps.lockMovementX,this.lockMovementY=this._savedProps.lockMovementY,this.canvas&&(this.canvas.defaultCursor=this._savedProps.defaultCursor,this.canvas.moveCursor=this._savedProps.moveCursor))},exitEditing:function(){var t=this._textBeforeEdit!==this.text,e=this.hiddenTextarea;return this.selected=!1,this.isEditing=!1,this.selectionEnd=this.selectionStart,e&&(e.blur&&e.blur(),e.parentNode&&e.parentNode.removeChild(e)),this.hiddenTextarea=null,this.abortCursorAnimation(),this._restoreEditingProps(),this._currentCursorOpacity=0,this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this.fire(\"editing:exited\"),t&&this.fire(\"modified\"),this.canvas&&(this.canvas.off(\"mouse:move\",this.mouseMoveHandler),this.canvas.fire(\"text:editing:exited\",{target:this}),t&&this.canvas.fire(\"object:modified\",{target:this})),this},_removeExtraneousStyles:function(){for(var t in this.styles)this._textLines[t]||delete this.styles[t]},removeStyleFromTo:function(t,e){var i,r,n=this.get2DCursorLocation(t,!0),s=this.get2DCursorLocation(e,!0),o=n.lineIndex,a=n.charIndex,l=s.lineIndex,h=s.charIndex;if(o!==l){if(this.styles[o])for(i=a;i<this._unwrappedTextLines[o].length;i++)delete this.styles[o][i];if(this.styles[l])for(i=h;i<this._unwrappedTextLines[l].length;i++)(r=this.styles[l][i])&&(this.styles[o]||(this.styles[o]={}),this.styles[o][a+i-h]=r);for(i=o+1;i<=l;i++)delete this.styles[i];this.shiftLineStyles(l,o-l)}else if(this.styles[o]){r=this.styles[o];var c,u,p=h-a;for(i=a;i<h;i++)delete r[i];for(u in this.styles[o])(c=parseInt(u,10))>=h&&(r[c-p]=r[u],delete r[u])}},shiftLineStyles:function(t,e){var i=g(this.styles);for(var r in this.styles){var n=parseInt(r,10);n>t&&(this.styles[n+e]=i[n],i[n-e]||delete this.styles[n])}},restartCursorIfNeeded:function(){this._currentTickState&&!this._currentTickState.isAborted&&this._currentTickCompleteState&&!this._currentTickCompleteState.isAborted||this.initDelayedCursor()},insertNewlineStyleObject:function(t,e,i,r){var n,s={},o=!1,a=this._unwrappedTextLines[t].length===e;for(var l in i||(i=1),this.shiftLineStyles(t,i),this.styles[t]&&(n=this.styles[t][0===e?e:e-1]),this.styles[t]){var h=parseInt(l,10);h>=e&&(o=!0,s[h-e]=this.styles[t][l],a&&0===e||delete this.styles[t][l])}var c=!1;for(o&&!a&&(this.styles[t+i]=s,c=!0),c&&i--;i>0;)r&&r[i-1]?this.styles[t+i]={0:g(r[i-1])}:n?this.styles[t+i]={0:g(n)}:delete this.styles[t+i],i--;this._forceClearCache=!0},insertCharStyleObject:function(t,e,i,r){this.styles||(this.styles={});var n=this.styles[t],s=n?g(n):{};for(var o in i||(i=1),s){var a=parseInt(o,10);a>=e&&(n[a+i]=s[a],s[a-i]||delete n[a])}if(this._forceClearCache=!0,r)for(;i--;)Object.keys(r[i]).length&&(this.styles[t]||(this.styles[t]={}),this.styles[t][e+i]=g(r[i]));else if(n)for(var l=n[e?e-1:1];l&&i--;)this.styles[t][e+i]=g(l)},insertNewStyleBlock:function(t,e,i){for(var r=this.get2DCursorLocation(e,!0),n=[0],s=0,o=0;o<t.length;o++)\"\\n\"===t[o]?n[++s]=0:n[s]++;for(n[0]>0&&(this.insertCharStyleObject(r.lineIndex,r.charIndex,n[0],i),i=i&&i.slice(n[0]+1)),s&&this.insertNewlineStyleObject(r.lineIndex,r.charIndex+n[0],s),o=1;o<s;o++)n[o]>0?this.insertCharStyleObject(r.lineIndex+o,0,n[o],i):i&&this.styles[r.lineIndex+o]&&i[0]&&(this.styles[r.lineIndex+o][0]=i[0]),i=i&&i.slice(n[o]+1);n[o]>0&&this.insertCharStyleObject(r.lineIndex+o,0,n[o],i)},setSelectionStartEndWithShift:function(t,e,i){i<=t?(e===t?this._selectionDirection=\"left\":\"right\"===this._selectionDirection&&(this._selectionDirection=\"left\",this.selectionEnd=t),this.selectionStart=i):i>t&&i<e?\"right\"===this._selectionDirection?this.selectionEnd=i:this.selectionStart=i:(e===t?this._selectionDirection=\"right\":\"left\"===this._selectionDirection&&(this._selectionDirection=\"right\",this.selectionStart=e),this.selectionEnd=i)},setSelectionInBoundaries:function(){var t=this.text.length;this.selectionStart>t?this.selectionStart=t:this.selectionStart<0&&(this.selectionStart=0),this.selectionEnd>t?this.selectionEnd=t:this.selectionEnd<0&&(this.selectionEnd=0)}}),x.util.object.extend(x.IText.prototype,{initDoubleClickSimulation:function(){this.__lastClickTime=+new Date,this.__lastLastClickTime=+new Date,this.__lastPointer={},this.on(\"mousedown\",this.onMouseDown)},onMouseDown:function(t){if(this.canvas){this.__newClickTime=+new Date;var e=t.pointer;this.isTripleClick(e)&&(this.fire(\"tripleclick\",t),this._stopEvent(t.e)),this.__lastLastClickTime=this.__lastClickTime,this.__lastClickTime=this.__newClickTime,this.__lastPointer=e,this.__lastIsEditing=this.isEditing,this.__lastSelected=this.selected}},isTripleClick:function(t){return this.__newClickTime-this.__lastClickTime<500&&this.__lastClickTime-this.__lastLastClickTime<500&&this.__lastPointer.x===t.x&&this.__lastPointer.y===t.y},_stopEvent:function(t){t.preventDefault&&t.preventDefault(),t.stopPropagation&&t.stopPropagation()},initCursorSelectionHandlers:function(){this.initMousedownHandler(),this.initMouseupHandler(),this.initClicks()},doubleClickHandler:function(t){this.isEditing&&this.selectWord(this.getSelectionStartFromPointer(t.e))},tripleClickHandler:function(t){this.isEditing&&this.selectLine(this.getSelectionStartFromPointer(t.e))},initClicks:function(){this.on(\"mousedblclick\",this.doubleClickHandler),this.on(\"tripleclick\",this.tripleClickHandler)},_mouseDownHandler:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.__isMousedown=!0,this.selected&&(this.inCompositionMode=!1,this.setCursorByClick(t.e)),this.isEditing&&(this.__selectionStartOnMouseDown=this.selectionStart,this.selectionStart===this.selectionEnd&&this.abortCursorAnimation(),this.renderCursorOrSelection()))},_mouseDownHandlerBefore:function(t){!this.canvas||!this.editable||t.e.button&&1!==t.e.button||(this.selected=this===this.canvas._activeObject)},initMousedownHandler:function(){this.on(\"mousedown\",this._mouseDownHandler),this.on(\"mousedown:before\",this._mouseDownHandlerBefore)},initMouseupHandler:function(){this.on(\"mouseup\",this.mouseUpHandler)},mouseUpHandler:function(t){if(this.__isMousedown=!1,!(!this.editable||this.group||t.transform&&t.transform.actionPerformed||t.e.button&&1!==t.e.button)){if(this.canvas){var e=this.canvas._activeObject;if(e&&e!==this)return}this.__lastSelected&&!this.__corner?(this.selected=!1,this.__lastSelected=!1,this.enterEditing(t.e),this.selectionStart===this.selectionEnd?this.initDelayedCursor(!0):this.renderCursorOrSelection()):this.selected=!0}},setCursorByClick:function(t){var e=this.getSelectionStartFromPointer(t),i=this.selectionStart,r=this.selectionEnd;t.shiftKey?this.setSelectionStartEndWithShift(i,r,e):(this.selectionStart=e,this.selectionEnd=e),this.isEditing&&(this._fireSelectionChanged(),this._updateTextarea())},getSelectionStartFromPointer:function(t){for(var e,i=this.getLocalPointer(t),r=0,n=0,s=0,o=0,a=0,l=0,h=this._textLines.length;l<h&&s<=i.y;l++)s+=this.getHeightOfLine(l)*this.scaleY,a=l,l>0&&(o+=this._textLines[l-1].length+this.missingNewlineOffset(l-1));n=this._getLineLeftOffset(a)*this.scaleX,e=this._textLines[a],\"rtl\"===this.direction&&(i.x=this.width*this.scaleX-i.x+n);for(var c=0,u=e.length;c<u&&(r=n,(n+=this.__charBounds[a][c].kernedWidth*this.scaleX)<=i.x);c++)o++;return this._getNewSelectionStartFromOffset(i,r,n,o,u)},_getNewSelectionStartFromOffset:function(t,e,i,r,n){var s=t.x-e,o=i-t.x,a=r+(o>s||o<0?0:1);return this.flipX&&(a=n-a),a>this._text.length&&(a=this._text.length),a}}),x.util.object.extend(x.IText.prototype,{initHiddenTextarea:function(){this.hiddenTextarea=x.document.createElement(\"textarea\"),this.hiddenTextarea.setAttribute(\"autocapitalize\",\"off\"),this.hiddenTextarea.setAttribute(\"autocorrect\",\"off\"),this.hiddenTextarea.setAttribute(\"autocomplete\",\"off\"),this.hiddenTextarea.setAttribute(\"spellcheck\",\"false\"),this.hiddenTextarea.setAttribute(\"data-fabric-hiddentextarea\",\"\"),this.hiddenTextarea.setAttribute(\"wrap\",\"off\");var t=this._calcTextareaPosition();this.hiddenTextarea.style.cssText=\"position: absolute; top: \"+t.top+\"; left: \"+t.left+\"; z-index: -999; opacity: 0; width: 1px; height: 1px; font-size: 1px; paddingｰtop: \"+t.fontSize+\";\",this.hiddenTextareaContainer?this.hiddenTextareaContainer.appendChild(this.hiddenTextarea):x.document.body.appendChild(this.hiddenTextarea),x.util.addListener(this.hiddenTextarea,\"keydown\",this.onKeyDown.bind(this)),x.util.addListener(this.hiddenTextarea,\"keyup\",this.onKeyUp.bind(this)),x.util.addListener(this.hiddenTextarea,\"input\",this.onInput.bind(this)),x.util.addListener(this.hiddenTextarea,\"copy\",this.copy.bind(this)),x.util.addListener(this.hiddenTextarea,\"cut\",this.copy.bind(this)),x.util.addListener(this.hiddenTextarea,\"paste\",this.paste.bind(this)),x.util.addListener(this.hiddenTextarea,\"compositionstart\",this.onCompositionStart.bind(this)),x.util.addListener(this.hiddenTextarea,\"compositionupdate\",this.onCompositionUpdate.bind(this)),x.util.addListener(this.hiddenTextarea,\"compositionend\",this.onCompositionEnd.bind(this)),!this._clickHandlerInitialized&&this.canvas&&(x.util.addListener(this.canvas.upperCanvasEl,\"click\",this.onClick.bind(this)),this._clickHandlerInitialized=!0)},keysMap:{9:\"exitEditing\",27:\"exitEditing\",33:\"moveCursorUp\",34:\"moveCursorDown\",35:\"moveCursorRight\",36:\"moveCursorLeft\",37:\"moveCursorLeft\",38:\"moveCursorUp\",39:\"moveCursorRight\",40:\"moveCursorDown\"},keysMapRtl:{9:\"exitEditing\",27:\"exitEditing\",33:\"moveCursorUp\",34:\"moveCursorDown\",35:\"moveCursorLeft\",36:\"moveCursorRight\",37:\"moveCursorRight\",38:\"moveCursorUp\",39:\"moveCursorLeft\",40:\"moveCursorDown\"},ctrlKeysMapUp:{67:\"copy\",88:\"cut\"},ctrlKeysMapDown:{65:\"selectAll\"},onClick:function(){this.hiddenTextarea&&this.hiddenTextarea.focus()},onKeyDown:function(t){if(this.isEditing){var e=\"rtl\"===this.direction?this.keysMapRtl:this.keysMap;if(t.keyCode in e)this[e[t.keyCode]](t);else{if(!(t.keyCode in this.ctrlKeysMapDown)||!t.ctrlKey&&!t.metaKey)return;this[this.ctrlKeysMapDown[t.keyCode]](t)}t.stopImmediatePropagation(),t.preventDefault(),t.keyCode>=33&&t.keyCode<=40?(this.inCompositionMode=!1,this.clearContextTop(),this.renderCursorOrSelection()):this.canvas&&this.canvas.requestRenderAll()}},onKeyUp:function(t){!this.isEditing||this._copyDone||this.inCompositionMode?this._copyDone=!1:t.keyCode in this.ctrlKeysMapUp&&(t.ctrlKey||t.metaKey)&&(this[this.ctrlKeysMapUp[t.keyCode]](t),t.stopImmediatePropagation(),t.preventDefault(),this.canvas&&this.canvas.requestRenderAll())},onInput:function(t){var e=this.fromPaste;if(this.fromPaste=!1,t&&t.stopPropagation(),this.isEditing){var i,r,n,s,o,a=this._splitTextIntoLines(this.hiddenTextarea.value).graphemeText,l=this._text.length,h=a.length,c=h-l,u=this.selectionStart,p=this.selectionEnd,f=u!==p;if(\"\"===this.hiddenTextarea.value)return this.styles={},this.updateFromTextArea(),this.fire(\"changed\"),void(this.canvas&&(this.canvas.fire(\"text:changed\",{target:this}),this.canvas.requestRenderAll()));var d=this.fromStringToGraphemeSelection(this.hiddenTextarea.selectionStart,this.hiddenTextarea.selectionEnd,this.hiddenTextarea.value),g=u>d.selectionStart;f?(i=this._text.slice(u,p),c+=p-u):h<l&&(i=g?this._text.slice(p+c,p):this._text.slice(u,u-c)),r=a.slice(d.selectionEnd-c,d.selectionEnd),i&&i.length&&(r.length&&(n=this.getSelectionStyles(u,u+1,!1),n=r.map((function(){return n[0]}))),f?(s=u,o=p):g?(s=p-i.length,o=p):(s=p,o=p+i.length),this.removeStyleFromTo(s,o)),r.length&&(e&&r.join(\"\")===x.copiedText&&!x.disableStyleCopyPaste&&(n=x.copiedTextStyle),this.insertNewStyleBlock(r,u,n)),this.updateFromTextArea(),this.fire(\"changed\"),this.canvas&&(this.canvas.fire(\"text:changed\",{target:this}),this.canvas.requestRenderAll())}},onCompositionStart:function(){this.inCompositionMode=!0},onCompositionEnd:function(){this.inCompositionMode=!1},onCompositionUpdate:function(t){this.compositionStart=t.target.selectionStart,this.compositionEnd=t.target.selectionEnd,this.updateTextareaPosition()},copy:function(){this.selectionStart!==this.selectionEnd&&(x.copiedText=this.getSelectedText(),x.disableStyleCopyPaste?x.copiedTextStyle=null:x.copiedTextStyle=this.getSelectionStyles(this.selectionStart,this.selectionEnd,!0),this._copyDone=!0)},paste:function(){this.fromPaste=!0},_getClipboardData:function(t){return t&&t.clipboardData||x.window.clipboardData},_getWidthBeforeCursor:function(t,e){var i,r=this._getLineLeftOffset(t);return e>0&&(r+=(i=this.__charBounds[t][e-1]).left+i.width),r},getDownCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),r=this.get2DCursorLocation(i),n=r.lineIndex;if(n===this._textLines.length-1||t.metaKey||34===t.keyCode)return this._text.length-i;var s=r.charIndex,o=this._getWidthBeforeCursor(n,s),a=this._getIndexOnLine(n+1,o);return this._textLines[n].slice(s).length+a+1+this.missingNewlineOffset(n)},_getSelectionForOffset:function(t,e){return t.shiftKey&&this.selectionStart!==this.selectionEnd&&e?this.selectionEnd:this.selectionStart},getUpCursorOffset:function(t,e){var i=this._getSelectionForOffset(t,e),r=this.get2DCursorLocation(i),n=r.lineIndex;if(0===n||t.metaKey||33===t.keyCode)return-i;var s=r.charIndex,o=this._getWidthBeforeCursor(n,s),a=this._getIndexOnLine(n-1,o),l=this._textLines[n].slice(0,s),h=this.missingNewlineOffset(n-1);return-this._textLines[n-1].length+a-l.length+(1-h)},_getIndexOnLine:function(t,e){for(var i,r,n=this._textLines[t],s=this._getLineLeftOffset(t),o=0,a=0,l=n.length;a<l;a++)if((s+=i=this.__charBounds[t][a].width)>e){r=!0;var h=s-i,c=s,u=Math.abs(h-e);o=Math.abs(c-e)<u?a:a-1;break}return r||(o=n.length-1),o},moveCursorDown:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorUpOrDown(\"Down\",t)},moveCursorUp:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorUpOrDown(\"Up\",t)},_moveCursorUpOrDown:function(t,e){var i=this[\"get\"+t+\"CursorOffset\"](e,\"right\"===this._selectionDirection);e.shiftKey?this.moveCursorWithShift(i):this.moveCursorWithoutShift(i),0!==i&&(this.setSelectionInBoundaries(),this.abortCursorAnimation(),this._currentCursorOpacity=1,this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorWithShift:function(t){var e=\"left\"===this._selectionDirection?this.selectionStart+t:this.selectionEnd+t;return this.setSelectionStartEndWithShift(this.selectionStart,this.selectionEnd,e),0!==t},moveCursorWithoutShift:function(t){return t<0?(this.selectionStart+=t,this.selectionEnd=this.selectionStart):(this.selectionEnd+=t,this.selectionStart=this.selectionEnd),0!==t},moveCursorLeft:function(t){0===this.selectionStart&&0===this.selectionEnd||this._moveCursorLeftOrRight(\"Left\",t)},_move:function(t,e,i){var r;if(t.altKey)r=this[\"findWordBoundary\"+i](this[e]);else{if(!t.metaKey&&35!==t.keyCode&&36!==t.keyCode)return this[e]+=\"Left\"===i?-1:1,!0;r=this[\"findLineBoundary\"+i](this[e])}if(void 0!==r&&this[e]!==r)return this[e]=r,!0},_moveLeft:function(t,e){return this._move(t,e,\"Left\")},_moveRight:function(t,e){return this._move(t,e,\"Right\")},moveCursorLeftWithoutShift:function(t){var e=!0;return this._selectionDirection=\"left\",this.selectionEnd===this.selectionStart&&0!==this.selectionStart&&(e=this._moveLeft(t,\"selectionStart\")),this.selectionEnd=this.selectionStart,e},moveCursorLeftWithShift:function(t){return\"right\"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveLeft(t,\"selectionEnd\"):0!==this.selectionStart?(this._selectionDirection=\"left\",this._moveLeft(t,\"selectionStart\")):void 0},moveCursorRight:function(t){this.selectionStart>=this._text.length&&this.selectionEnd>=this._text.length||this._moveCursorLeftOrRight(\"Right\",t)},_moveCursorLeftOrRight:function(t,e){var i=\"moveCursor\"+t+\"With\";this._currentCursorOpacity=1,e.shiftKey?i+=\"Shift\":i+=\"outShift\",this[i](e)&&(this.abortCursorAnimation(),this.initDelayedCursor(),this._fireSelectionChanged(),this._updateTextarea())},moveCursorRightWithShift:function(t){return\"left\"===this._selectionDirection&&this.selectionStart!==this.selectionEnd?this._moveRight(t,\"selectionStart\"):this.selectionEnd!==this._text.length?(this._selectionDirection=\"right\",this._moveRight(t,\"selectionEnd\")):void 0},moveCursorRightWithoutShift:function(t){var e=!0;return this._selectionDirection=\"right\",this.selectionStart===this.selectionEnd?(e=this._moveRight(t,\"selectionStart\"),this.selectionEnd=this.selectionStart):this.selectionStart=this.selectionEnd,e},removeChars:function(t,e){void 0===e&&(e=t+1),this.removeStyleFromTo(t,e),this._text.splice(t,e-t),this.text=this._text.join(\"\"),this.set(\"dirty\",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()},insertChars:function(t,e,i,r){void 0===r&&(r=i),r>i&&this.removeStyleFromTo(i,r);var n=x.util.string.graphemeSplit(t);this.insertNewStyleBlock(n,i,e),this._text=[].concat(this._text.slice(0,i),n,this._text.slice(r)),this.text=this._text.join(\"\"),this.set(\"dirty\",!0),this._shouldClearDimensionCache()&&(this.initDimensions(),this.setCoords()),this._removeExtraneousStyles()}}),m=x.util.toFixed,v=/  +/g,x.util.object.extend(x.Text.prototype,{_toSVG:function(){var t=this._getSVGLeftTopOffsets(),e=this._getSVGTextAndBg(t.textTop,t.textLeft);return this._wrapSVGTextAndBg(e)},toSVG:function(t){return this._createBaseSVGMarkup(this._toSVG(),{reviver:t,noStyle:!0,withShadow:!0})},_getSVGLeftTopOffsets:function(){return{textLeft:-this.width/2,textTop:-this.height/2,lineTop:this.getHeightOfLine(0)}},_wrapSVGTextAndBg:function(t){var e=this.getSvgTextDecoration(this);return[t.textBgRects.join(\"\"),'\\t\\t<text xml:space=\"preserve\" ',this.fontFamily?'font-family=\"'+this.fontFamily.replace(/\"/g,\"'\")+'\" ':\"\",this.fontSize?'font-size=\"'+this.fontSize+'\" ':\"\",this.fontStyle?'font-style=\"'+this.fontStyle+'\" ':\"\",this.fontWeight?'font-weight=\"'+this.fontWeight+'\" ':\"\",e?'text-decoration=\"'+e+'\" ':\"\",'style=\"',this.getSvgStyles(!0),'\"',this.addPaintOrder(),\" >\",t.textSpans.join(\"\"),\"</text>\\n\"]},_getSVGTextAndBg:function(t,e){var i,r=[],n=[],s=t;this._setSVGBg(n);for(var o=0,a=this._textLines.length;o<a;o++)i=this._getLineLeftOffset(o),(this.textBackgroundColor||this.styleHas(\"textBackgroundColor\",o))&&this._setSVGTextLineBg(n,o,e+i,s),this._setSVGTextLineText(r,o,e+i,s),s+=this.getHeightOfLine(o);return{textSpans:r,textBgRects:n}},_createTextCharSpan:function(t,e,i,r){var n=t!==t.trim()||t.match(v),s=this.getSvgSpanStyles(e,n),o=s?'style=\"'+s+'\"':\"\",a=e.deltaY,l=\"\",h=x.Object.NUM_FRACTION_DIGITS;return a&&(l=' dy=\"'+m(a,h)+'\" '),['<tspan x=\"',m(i,h),'\" y=\"',m(r,h),'\" ',l,o,\">\",x.util.string.escapeXml(t),\"</tspan>\"].join(\"\")},_setSVGTextLineText:function(t,e,i,r){var n,s,o,a,l,h=this.getHeightOfLine(e),c=-1!==this.textAlign.indexOf(\"justify\"),u=\"\",p=0,f=this._textLines[e];r+=h*(1-this._fontSizeFraction)/this.lineHeight;for(var d=0,g=f.length-1;d<=g;d++)l=d===g||this.charSpacing,u+=f[d],o=this.__charBounds[e][d],0===p?(i+=o.kernedWidth-o.width,p+=o.width):p+=o.kernedWidth,c&&!l&&this._reSpaceAndTab.test(f[d])&&(l=!0),l||(n=n||this.getCompleteStyleDeclaration(e,d),s=this.getCompleteStyleDeclaration(e,d+1),l=x.util.hasStyleChanged(n,s,!0)),l&&(a=this._getStyleDeclaration(e,d)||{},t.push(this._createTextCharSpan(u,a,i,r)),u=\"\",n=s,i+=p,p=0)},_pushTextBgRect:function(t,e,i,r,n,s){var o=x.Object.NUM_FRACTION_DIGITS;t.push(\"\\t\\t<rect \",this._getFillAttributes(e),' x=\"',m(i,o),'\" y=\"',m(r,o),'\" width=\"',m(n,o),'\" height=\"',m(s,o),'\"></rect>\\n')},_setSVGTextLineBg:function(t,e,i,r){for(var n,s,o=this._textLines[e],a=this.getHeightOfLine(e)/this.lineHeight,l=0,h=0,c=this.getValueOfPropertyAt(e,0,\"textBackgroundColor\"),u=0,p=o.length;u<p;u++)n=this.__charBounds[e][u],(s=this.getValueOfPropertyAt(e,u,\"textBackgroundColor\"))!==c?(c&&this._pushTextBgRect(t,c,i+h,r,l,a),h=n.left,l=n.width,c=s):l+=n.kernedWidth;s&&this._pushTextBgRect(t,s,i+h,r,l,a)},_getFillAttributes:function(t){var e=t&&\"string\"==typeof t?new x.Color(t):\"\";return e&&e.getSource()&&1!==e.getAlpha()?'opacity=\"'+e.getAlpha()+'\" fill=\"'+e.setAlpha(1).toRgb()+'\"':'fill=\"'+t+'\"'},_getSVGLineTopOffset:function(t){for(var e,i=0,r=0;r<t;r++)i+=this.getHeightOfLine(r);return e=this.getHeightOfLine(r),{lineTop:i,offset:(this._fontSizeMult-this._fontSizeFraction)*e/(this.lineHeight*this._fontSizeMult)}},getSvgStyles:function(t){return x.Object.prototype.getSvgStyles.call(this,t)+\" white-space: pre;\"}}),function(t){\"use strict\";var e=t.fabric||(t.fabric={});e.Textbox=e.util.createClass(e.IText,e.Observable,{type:\"textbox\",minWidth:20,dynamicMinWidth:2,__cachedLines:null,lockScalingFlip:!0,noScaleCache:!1,_dimensionAffectingProps:e.Text.prototype._dimensionAffectingProps.concat(\"width\"),_wordJoiners:/[ \\t\\r]/,splitByGrapheme:!1,initDimensions:function(){this.__skipDimension||(this.isEditing&&this.initDelayedCursor(),this.clearContextTop(),this._clearCache(),this.dynamicMinWidth=0,this._styleMap=this._generateStyleMap(this._splitText()),this.dynamicMinWidth>this.width&&this._set(\"width\",this.dynamicMinWidth),-1!==this.textAlign.indexOf(\"justify\")&&this.enlargeSpaces(),this.height=this.calcTextHeight(),this.saveState({propertySet:\"_dimensionAffectingProps\"}))},_generateStyleMap:function(t){for(var e=0,i=0,r=0,n={},s=0;s<t.graphemeLines.length;s++)\"\\n\"===t.graphemeText[r]&&s>0?(i=0,r++,e++):!this.splitByGrapheme&&this._reSpaceAndTab.test(t.graphemeText[r])&&s>0&&(i++,r++),n[s]={line:e,offset:i},r+=t.graphemeLines[s].length,i+=t.graphemeLines[s].length;return n},styleHas:function(t,i){if(this._styleMap&&!this.isWrapping){var r=this._styleMap[i];r&&(i=r.line)}return e.Text.prototype.styleHas.call(this,t,i)},isEmptyStyles:function(t){if(!this.styles)return!0;var e,i,r=0,n=!1,s=this._styleMap[t],o=this._styleMap[t+1];for(var a in s&&(t=s.line,r=s.offset),o&&(n=o.line===t,e=o.offset),i=void 0===t?this.styles:{line:this.styles[t]})for(var l in i[a])if(l>=r&&(!n||l<e))for(var h in i[a][l])return!1;return!0},_getStyleDeclaration:function(t,e){if(this._styleMap&&!this.isWrapping){var i=this._styleMap[t];if(!i)return null;t=i.line,e=i.offset+e}return this.callSuper(\"_getStyleDeclaration\",t,e)},_setStyleDeclaration:function(t,e,i){var r=this._styleMap[t];t=r.line,e=r.offset+e,this.styles[t][e]=i},_deleteStyleDeclaration:function(t,e){var i=this._styleMap[t];t=i.line,e=i.offset+e,delete this.styles[t][e]},_getLineStyle:function(t){var e=this._styleMap[t];return!!this.styles[e.line]},_setLineStyle:function(t){var e=this._styleMap[t];this.styles[e.line]={}},_wrapText:function(t,e){var i,r=[];for(this.isWrapping=!0,i=0;i<t.length;i++)r=r.concat(this._wrapLine(t[i],i,e));return this.isWrapping=!1,r},_measureWord:function(t,e,i){var r,n=0;i=i||0;for(var s=0,o=t.length;s<o;s++){n+=this._getGraphemeBox(t[s],e,s+i,r,true).kernedWidth,r=t[s]}return n},_wrapLine:function(t,i,r,n){var s=0,o=this.splitByGrapheme,a=[],l=[],h=o?e.util.string.graphemeSplit(t):t.split(this._wordJoiners),c=\"\",u=0,p=o?\"\":\" \",f=0,d=0,g=0,m=!0,v=this._getWidthOfCharSpacing();n=n||0;0===h.length&&h.push([]),r-=n;for(var y=0;y<h.length;y++)c=o?h[y]:e.util.string.graphemeSplit(h[y]),f=this._measureWord(c,i,u),u+=c.length,(s+=d+f-v)>r&&!m?(a.push(l),l=[],s=f,m=!0):s+=v,m||o||l.push(p),l=l.concat(c),d=o?0:this._measureWord([p],i,u),u++,m=!1,f>g&&(g=f);return y&&a.push(l),g+n>this.dynamicMinWidth&&(this.dynamicMinWidth=g-v+n),a},isEndOfWrapping:function(t){return!this._styleMap[t+1]||this._styleMap[t+1].line!==this._styleMap[t].line},missingNewlineOffset:function(t){return this.splitByGrapheme?this.isEndOfWrapping(t)?1:0:1},_splitTextIntoLines:function(t){for(var i=e.Text.prototype._splitTextIntoLines.call(this,t),r=this._wrapText(i.lines,this.width),n=new Array(r.length),s=0;s<r.length;s++)n[s]=r[s].join(\"\");return i.lines=n,i.graphemeLines=r,i},getMinWidth:function(){return Math.max(this.minWidth,this.dynamicMinWidth)},_removeExtraneousStyles:function(){var t={};for(var e in this._styleMap)this._textLines[e]&&(t[this._styleMap[e].line]=1);for(var e in this.styles)t[e]||delete this.styles[e]},toObject:function(t){return this.callSuper(\"toObject\",[\"minWidth\",\"splitByGrapheme\"].concat(t))}}),e.Textbox.fromObject=function(t,i){var r=e.util.stylesFromArray(t.styles,t.text),n=Object.assign({},t,{styles:r});return e.Object._fromObject(\"Textbox\",n,i,\"text\")}}(t.exports),function(){var t=x.controlsUtils,e=t.scaleSkewCursorStyleHandler,i=t.scaleCursorStyleHandler,r=t.scalingEqually,n=t.scalingYOrSkewingX,s=t.scalingXOrSkewingY,o=t.scaleOrSkewActionName,a=x.Object.prototype.controls;if(a.ml=new x.Control({x:-.5,y:0,cursorStyleHandler:e,actionHandler:s,getActionName:o}),a.mr=new x.Control({x:.5,y:0,cursorStyleHandler:e,actionHandler:s,getActionName:o}),a.mb=new x.Control({x:0,y:.5,cursorStyleHandler:e,actionHandler:n,getActionName:o}),a.mt=new x.Control({x:0,y:-.5,cursorStyleHandler:e,actionHandler:n,getActionName:o}),a.tl=new x.Control({x:-.5,y:-.5,cursorStyleHandler:i,actionHandler:r}),a.tr=new x.Control({x:.5,y:-.5,cursorStyleHandler:i,actionHandler:r}),a.bl=new x.Control({x:-.5,y:.5,cursorStyleHandler:i,actionHandler:r}),a.br=new x.Control({x:.5,y:.5,cursorStyleHandler:i,actionHandler:r}),a.mtr=new x.Control({x:0,y:-.5,actionHandler:t.rotationWithSnapping,cursorStyleHandler:t.rotationStyleHandler,offsetY:-40,withConnection:!0,actionName:\"rotate\"}),x.Textbox){var l=x.Textbox.prototype.controls={};l.mtr=a.mtr,l.tr=a.tr,l.br=a.br,l.tl=a.tl,l.bl=a.bl,l.mt=a.mt,l.mb=a.mb,l.mr=new x.Control({x:.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:\"resizing\"}),l.ml=new x.Control({x:-.5,y:0,actionHandler:t.changeWidth,cursorStyleHandler:e,actionName:\"resizing\"})}}()})),parcelRequire.register(\"7PJQL\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>n));var i=parcelRequire(\"5O8LN\"),r=parcelRequire(\"6F9ZT\");var n=class{wait=!1;isTyping=!1;typingComplete=!1;constructor(t,e=40,n=0,s,o,a){this.text=t,this.speed=e,this.delay=n,this.name=s,this.wait=o,this.onComplete=a,this.parentNode=document.createElement(\"span\"),this.typerNodeId=`typer-${s?`${s}-`:\"\"}${(0,r.uuid)()}`,this.parentNode.setAttribute(\"id\",this.typerNodeId),this.parentNode.classList.add(\"typer\"),this.parentNode.dataset.typerName=String(this.name),this.parentNode.innerHTML=t,this.typer=new(0,i.default)(this.parentNode),this.finish=this.finish.bind(this),document.addEventListener(\"keypress\",this.finish),o||this.start()}output(){return this.parentNode.outerHTML}start(){this.isTyping||this.typingComplete||this.typeDelayTimeout?console.warn(`Tried to restart typing for ${this.typerNodeId}`):this.typeDelayTimeout=setTimeout((()=>{this.parentNode.classList.add(\"typing\"),this.isTyping=!0,this.typeInterval=setInterval((()=>{this.typer.type()||(clearInterval(this.typeInterval),this.parentNode.classList.remove(\"typing\"),this.parentNode.classList.add(\"typed\"),this.isTyping=!1,this.typingComplete=!0,this.onComplete&&this.onComplete());const t=document.querySelector(`#${this.typerNodeId}`);t&&(t.outerHTML=this.parentNode.outerHTML)}),this.speed)}),this.delay)}finish(t){\"Space\"===t.code&&this.isTyping&&(t.preventDefault(),t.stopPropagation(),clearTimeout(this.typeDelayTimeout),this.typer.finish(),document.removeEventListener(\"keypress\",this.finish))}}})),parcelRequire.register(\"5O8LN\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>r));class i{constructor(t,e){let r;for(this.node=t,this.appendTarget=e,this.childNodes=[],this.node.nodeValue&&(this.nodeValue=this.node.nodeValue,this.node.nodeValue=\"\");null!==(r=this.node.firstChild);)this.childNodes.push(new i(r,t)),this.node.removeChild(r);this.finished=!1}finish(){for(;this.type(););return!1}type(t){if(this.finished)return!1;if(this.appendTarget){if(this.appendTarget.appendChild(this.node),this.node.nodeType!==Node.ELEMENT_NODE&&this.node.nodeType!==Node.TEXT_NODE||\"none\"===window.getComputedStyle(this.node.parentNode).display)return this.finish();this.appendTarget=null}if(this.nodeValue){if(t)this.node.nodeValue+=this.nodeValue,this.nodeValue=\"\";else{const t=this.nodeValue.charAt(0);this.node.nodeValue+=t,this.nodeValue=this.nodeValue.slice(1)}return!0}for(;this.childNodes.length>0;){if(this.childNodes[0].type())return!0;this.childNodes.shift()}return this.finished=!0,!1}}var r=i})),parcelRequire.register(\"gzCul\",(function(t,e){$parcel$export(t.exports,\"default\",(()=>r));class i{constructor(t,e,i,r,n){this.name=t,this.audio=e,this.canplaythrough=i,this.played=r,this.playOnLoad=n}get playing(){return!this.audio.paused}}var r=class{audioWrappers=[];masterVolume=1;add(t,e){const r=new Audio(t);let n=!1;r.readyState===HTMLMediaElement.HAVE_ENOUGH_DATA?n=!0:r.addEventListener(\"canplaythrough\",(()=>{const t=this.getAudioWrapperByName(e);t&&(t.canplaythrough=!0,t.playOnLoad&&(console.log(`${e} loaded: playing delayed`),t.audio.play()))})),r.setAttribute(\"preload\",\"auto\"),r.addEventListener(\"ended\",(()=>{const t=this.getAudioWrapperByName(e);t&&(t.played=!0)})),this.audioWrappers.push(new i(e,r,n,!1,!1))}getAudioByName(t){const e=this.getAudioWrapperByName(t);return e?e.audio:null}getAudioWrapperByName(t){return this.audioWrappers.find((e=>e.name===t))}playAudio(t,e=!1,i=1){const r=this.getAudioWrapperByName(t);return!!r&&(r.audio.loop=e,r.audio.volume=i*this.masterVolume,r.canplaythrough?r.audio.play():(console.log(`Need to wait for ${t} to load.`),r.playOnLoad=!0),!0)}pauseAudio(t){const e=this.getAudioWrapperByName(t);e&&e.audio.pause()}toggleMuteAll(){this.audioWrappers.forEach((t=>{t.audio.muted=!t.audio.muted}))}stopAll(){this.audioWrappers.forEach((t=>{t.audio.pause(),t.audio.currentTime=0}))}}}));var $fiPkb=parcelRequire(\"fiPkb\");(()=>{const t=document.querySelector(\"tw-storydata\");if(!t)throw new Error(\"Missing tw-storydata node!\");const e=new(0,$fiPkb.default)(t),i=t.querySelector(\"script#twine-user-script\");if(i){const t=document.createElement(\"script\");t.setAttribute(\"type\",\"text/javascript\"),t.classList.add(\"user-script\"),t.innerHTML=i.innerHTML,document.body.appendChild(t)}const r=t.querySelector(\"style#twine-user-stylesheet\");if(r){const t=document.createElement(\"style\");t.setAttribute(\"type\",\"text/css\"),t.classList.add(\"user-style\"),t.innerHTML=r.innerHTML,document.head.appendChild(t)}const n=(t,i,r)=>{const n=e.getPassageByName(t);if(!n)throw new Error(`Couldn't find passage with name: \"${t}\"!`);e.displayPassage(n,i,r)},s=document.querySelector(\"#tw-story\");if(!s)throw new Error(\"Missing story container #tw-story!\");const o=s.querySelector(\"#tw-story #tw-passage\");if(!o)throw new Error(\"Missing passage container #tw-passage\");const a=document.querySelector(\"#tw-input\");if(!a)throw new Error(\"Missing input container #tw-input\");s.addEventListener(\"click\",(t=>{if(!t.target)return;const e=t.target;if(\"a\"===e.tagName.toLowerCase()&&e.dataset.passageName){const t=e.dataset.passageName;n(t,o,a)}})),a&&a.addEventListener(\"click\",(t=>{if(!t.target)return;const e=t.target;if(\"button\"===e.tagName.toLowerCase()&&e.dataset.passageName){const t=e.dataset.passageName;n(t,o,a)}})),document.addEventListener(\"keypress\",(t=>{\"m\"===t.key&&e.renderer.audioHelper.toggleMuteAll()})),window.__explorer={story:e},e.displayCurrentPassage(o,a)})()})();\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\r\n\r\n\t\t</script>\r\n\t</body>\r\n</html>"})